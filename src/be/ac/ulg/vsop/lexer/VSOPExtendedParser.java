/* The following code was generated by JFlex 1.6.1 */

/*VSOP Parser*/
package be.ac.ulg.vsop.lexer;
import be.ac.ulg.vsop.parser.SymbolValue;
import java.util.Stack;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>E:/m1prg/Compiler/Parsers/VSOPExtendedParser.flex</tt>
 */
class VSOPExtendedParser {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int COMMENT = 4;
  public static final int ERROR = 6;
  public static final int HEX = 8;
  public static final int BIN = 10;
  public static final int BYTESTRING = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\1\66\10\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\0"+
    "\1\42\1\62\4\0\1\45\1\46\1\54\1\52\1\51\1\53\1\41"+
    "\1\4\1\40\1\64\1\31\1\30\6\12\1\47\1\50\1\6\1\56"+
    "\1\7\1\0\1\57\6\63\24\10\1\60\1\65\1\61\1\55\1\11"+
    "\1\0\1\13\1\16\1\21\1\15\1\23\1\26\1\35\1\36\1\27"+
    "\2\11\1\20\1\11\1\14\1\17\2\11\1\34\1\22\1\25\1\32"+
    "\1\11\1\33\1\24\1\37\1\11\1\43\1\0\1\44\1\5\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff91\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\2\2\1\3\1\4\1\5\1\6\22\1"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\0\1\32\2\31\1\33\2\2"+
    "\1\34\1\35\1\0\1\36\2\0\2\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\4\46\1\0\4\47\1\0"+
    "\4\50\1\0\1\50\30\0\1\51\1\52\1\53\1\54"+
    "\2\0\1\54\2\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\34\4\71"+
    "\4\72\1\73\1\40\1\74\1\75\1\76\5\0\4\77"+
    "\2\0\4\100\13\0\4\101\2\0\4\102\3\0\1\103"+
    "\1\104\1\0\4\105\4\106\4\107\3\0\4\110\10\0"+
    "\4\111\5\0\4\112\4\113\4\114\4\115\2\0\4\116"+
    "\2\0\4\117\4\120\4\0\4\121\1\0\1\122\4\123"+
    "\2\0\4\124\4\125\4\126\4\127\1\0\4\130\4\131"+
    "\1\0\4\132\4\133";

  private static int [] zzUnpackAction() {
    int [] result = new int[306];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\u0181"+
    "\0\u01b8\0\u0181\0\u01ef\0\u0181\0\u0226\0\u025d\0\u0294\0\u02cb"+
    "\0\u0302\0\u0339\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c\0\u0483"+
    "\0\u04ba\0\u04f1\0\u0528\0\u055f\0\u0596\0\u05cd\0\u0604\0\u063b"+
    "\0\u0181\0\u0181\0\u0181\0\u0181\0\u0672\0\u0181\0\u0181\0\u0181"+
    "\0\u0181\0\u0181\0\u0181\0\u0181\0\u0181\0\u0181\0\u0181\0\u0181"+
    "\0\u0181\0\u0181\0\u06a9\0\u06a9\0\u0181\0\u06e0\0\u0717\0\u06a9"+
    "\0\u074e\0\u0785\0\u07bc\0\u0181\0\u07f3\0\u0181\0\u082a\0\u0861"+
    "\0\u0181\0\u0898\0\u08cf\0\u0181\0\u0181\0\u0181\0\u0181\0\u0181"+
    "\0\u0906\0\u0181\0\u093d\0\u0974\0\u0294\0\u09ab\0\u0181\0\u09e2"+
    "\0\u0a19\0\u02cb\0\u0a50\0\u0181\0\u0a87\0\u0abe\0\u0302\0\u0af5"+
    "\0\u0b2c\0\u0b63\0\u0b9a\0\u0bd1\0\u0c08\0\u0c3f\0\u0c76\0\u0cad"+
    "\0\u0ce4\0\u0d1b\0\u0d52\0\u0d89\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65"+
    "\0\u0e9c\0\u0ed3\0\u0f0a\0\u0f41\0\u0f78\0\u0faf\0\u0fe6\0\u101d"+
    "\0\u0181\0\u0181\0\u0181\0\u06a9\0\u06e0\0\u1054\0\u0181\0\u0181"+
    "\0\u108b\0\u10c2\0\u0181\0\u0181\0\u0181\0\u0181\0\u0181\0\u0181"+
    "\0\u0181\0\u0181\0\u0181\0\u0181\0\u0181\0\u10f9\0\u0181\0\u1130"+
    "\0\u1167\0\u119e\0\u0181\0\u11d5\0\u120c\0\u0181\0\u0181\0\u0181"+
    "\0\u0181\0\u0181\0\u1243\0\u127a\0\u12b1\0\u12e8\0\u131f\0\u1356"+
    "\0\u0181\0\u138d\0\u13c4\0\u13fb\0\u1432\0\u1469\0\u0181\0\u14a0"+
    "\0\u14d7\0\u150e\0\u1545\0\u157c\0\u15b3\0\u15ea\0\u1621\0\u1658"+
    "\0\u168f\0\u16c6\0\u16fd\0\u1734\0\u176b\0\u0181\0\u17a2\0\u17d9"+
    "\0\u1810\0\u1847\0\u187e\0\u0181\0\u18b5\0\u18ec\0\u1923\0\u195a"+
    "\0\u108b\0\u0181\0\u0181\0\u1991\0\u19c8\0\u0181\0\u19ff\0\u1a36"+
    "\0\u1a6d\0\u0181\0\u1aa4\0\u1adb\0\u1b12\0\u0181\0\u1b49\0\u1b80"+
    "\0\u1bb7\0\u1bee\0\u1c25\0\u1c5c\0\u0181\0\u1c93\0\u1cca\0\u1d01"+
    "\0\u1d38\0\u1d6f\0\u1da6\0\u1ddd\0\u1e14\0\u1e4b\0\u1e82\0\u1eb9"+
    "\0\u0181\0\u1ef0\0\u1f27\0\u1f5e\0\u1f95\0\u1fcc\0\u2003\0\u203a"+
    "\0\u2071\0\u0181\0\u20a8\0\u20df\0\u2116\0\u0181\0\u214d\0\u2184"+
    "\0\u21bb\0\u0181\0\u21f2\0\u2229\0\u2260\0\u0181\0\u2297\0\u22ce"+
    "\0\u2305\0\u233c\0\u2373\0\u0181\0\u23aa\0\u23e1\0\u2418\0\u244f"+
    "\0\u2486\0\u0181\0\u24bd\0\u24f4\0\u252b\0\u0181\0\u2562\0\u2599"+
    "\0\u25d0\0\u2607\0\u263e\0\u2675\0\u26ac\0\u0181\0\u26e3\0\u271a"+
    "\0\u2751\0\u0181\0\u2788\0\u0181\0\u27bf\0\u27f6\0\u282d\0\u2864"+
    "\0\u289b\0\u0181\0\u28d2\0\u2909\0\u2940\0\u0181\0\u2977\0\u29ae"+
    "\0\u29e5\0\u0181\0\u2a1c\0\u2a53\0\u2a8a\0\u0181\0\u2ac1\0\u2af8"+
    "\0\u2b2f\0\u2b66\0\u0181\0\u2b9d\0\u2bd4\0\u2c0b\0\u0181\0\u2c42"+
    "\0\u2c79\0\u2cb0\0\u2ce7\0\u0181\0\u2d1e\0\u2d55\0\u2d8c\0\u0181"+
    "\0\u2dc3\0\u2dfa";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[306];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\1\11\2\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\20\1\33\1\34\1\35\2\21"+
    "\1\36\1\37\4\20\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\17\1\21"+
    "\2\10\2\63\1\64\37\63\1\65\2\63\2\66\16\63"+
    "\1\67\1\70\45\12\1\71\6\12\1\72\12\12\2\73"+
    "\1\0\64\73\12\74\2\75\1\74\2\75\2\74\1\75"+
    "\1\74\1\75\2\74\1\75\1\74\2\75\6\74\1\75"+
    "\22\74\2\75\2\74\12\76\2\77\1\76\2\77\2\76"+
    "\1\77\1\76\1\77\2\76\1\77\1\76\2\77\6\76"+
    "\1\100\22\76\1\77\1\100\2\76\2\101\1\0\7\101"+
    "\2\102\1\101\2\102\2\101\1\102\1\101\1\102\2\101"+
    "\1\102\1\101\2\102\6\101\1\102\22\101\2\102\2\101"+
    "\71\0\1\12\70\0\1\103\70\0\1\104\44\0\1\105"+
    "\2\0\1\106\17\0\1\107\46\0\1\110\11\0\1\111"+
    "\4\112\1\113\1\114\31\115\1\112\1\0\10\112\1\0"+
    "\6\112\1\0\2\115\3\0\1\116\4\117\1\120\1\121"+
    "\31\122\1\117\1\0\10\117\1\0\6\117\1\0\2\122"+
    "\3\0\1\123\4\124\1\125\1\126\2\124\1\127\15\124"+
    "\2\127\6\124\1\127\1\130\1\0\10\124\1\0\6\124"+
    "\1\0\1\124\1\127\3\0\1\116\4\117\1\120\1\121"+
    "\4\122\1\131\24\122\1\117\1\0\10\117\1\0\6\117"+
    "\1\0\2\122\3\0\1\116\4\117\1\120\1\121\7\122"+
    "\1\132\3\122\1\133\6\122\1\134\6\122\1\117\1\0"+
    "\10\117\1\0\6\117\1\0\2\122\3\0\1\116\4\117"+
    "\1\120\1\121\7\122\1\135\21\122\1\117\1\0\10\117"+
    "\1\0\6\117\1\0\2\122\3\0\1\116\4\117\1\120"+
    "\1\121\7\122\1\136\17\122\1\137\1\122\1\117\1\0"+
    "\10\117\1\0\6\117\1\0\2\122\3\0\1\116\4\117"+
    "\1\120\1\121\24\122\1\140\4\122\1\117\1\0\10\117"+
    "\1\0\6\117\1\0\2\122\3\0\1\116\4\117\1\120"+
    "\1\121\13\122\1\141\15\122\1\117\1\0\10\117\1\0"+
    "\6\117\1\0\2\122\3\0\1\116\4\117\1\120\1\121"+
    "\10\122\1\142\20\122\1\117\1\0\10\117\1\0\6\117"+
    "\1\0\2\122\3\0\1\116\4\117\1\120\1\121\15\122"+
    "\1\143\13\122\1\117\1\0\10\117\1\0\6\117\1\0"+
    "\2\122\3\0\1\116\4\117\1\120\1\121\10\122\1\144"+
    "\3\122\1\145\7\122\1\146\4\122\1\117\1\0\10\117"+
    "\1\0\6\117\1\0\2\122\3\0\1\116\4\117\1\120"+
    "\1\121\24\122\1\147\1\122\1\150\2\122\1\117\1\0"+
    "\10\117\1\0\6\117\1\0\2\122\3\0\1\116\4\117"+
    "\1\120\1\121\3\122\1\151\3\122\1\152\1\153\20\122"+
    "\1\117\1\0\10\117\1\0\6\117\1\0\2\122\3\0"+
    "\1\116\4\117\1\120\1\121\4\122\1\154\5\122\1\155"+
    "\3\122\1\156\12\122\1\117\1\0\10\117\1\0\6\117"+
    "\1\0\2\122\3\0\1\116\4\117\1\120\1\121\4\122"+
    "\1\157\24\122\1\117\1\0\10\117\1\0\6\117\1\0"+
    "\2\122\3\0\1\116\4\117\1\120\1\121\26\122\1\160"+
    "\2\122\1\117\1\0\10\117\1\0\6\117\1\0\2\122"+
    "\3\0\1\123\4\124\1\125\1\126\2\124\1\127\3\124"+
    "\1\161\5\124\1\162\3\124\2\127\6\124\1\127\1\130"+
    "\1\0\10\124\1\0\6\124\1\0\1\124\1\127\56\0"+
    "\1\163\12\0\2\64\1\164\37\64\1\0\2\64\2\165"+
    "\16\64\1\0\1\64\1\0\1\166\1\167\64\0\1\170"+
    "\1\171\1\172\1\171\10\170\1\173\1\170\1\174\5\170"+
    "\1\175\1\176\1\177\5\170\1\200\5\170\1\201\22\170"+
    "\1\202\1\170\54\0\1\203\60\0\1\204\20\0\2\73"+
    "\1\205\64\73\1\74\1\206\4\207\1\210\1\211\2\74"+
    "\2\75\1\74\2\75\2\74\1\75\1\74\1\75\2\74"+
    "\1\75\1\74\2\75\6\74\1\75\1\207\1\74\10\207"+
    "\1\74\6\207\1\74\2\75\2\74\12\76\2\77\1\76"+
    "\2\77\2\76\1\77\1\76\1\77\2\76\1\77\1\76"+
    "\2\77\6\76\1\77\22\76\2\77\3\76\1\212\4\213"+
    "\1\214\1\215\2\76\2\77\1\76\2\77\2\76\1\77"+
    "\1\76\1\77\2\76\1\77\1\76\2\77\6\76\1\100"+
    "\1\213\1\76\10\213\1\76\6\213\1\76\1\77\1\100"+
    "\2\76\12\0\2\216\1\0\2\216\2\0\1\216\1\0"+
    "\1\216\2\0\1\216\1\0\2\216\6\0\1\216\22\0"+
    "\2\216\2\0\2\103\1\217\64\103\2\0\1\220\72\0"+
    "\1\220\67\0\1\220\61\0\1\221\72\0\1\221\67\0"+
    "\1\221\61\0\1\222\72\0\1\222\67\0\1\222\71\0"+
    "\1\223\15\0\2\223\6\0\1\223\23\0\1\223\3\0"+
    "\1\116\4\117\1\120\1\121\5\122\1\224\23\122\1\117"+
    "\1\0\10\117\1\0\6\117\1\0\2\122\3\0\1\116"+
    "\4\117\1\120\1\121\15\122\1\225\13\122\1\117\1\0"+
    "\10\117\1\0\6\117\1\0\2\122\3\0\1\116\4\117"+
    "\1\120\1\121\23\122\1\226\5\122\1\117\1\0\10\117"+
    "\1\0\6\117\1\0\2\122\3\0\1\116\4\117\1\120"+
    "\1\121\10\122\1\227\20\122\1\117\1\0\10\117\1\0"+
    "\6\117\1\0\2\122\3\0\1\230\4\231\1\232\1\233"+
    "\31\122\1\231\1\0\10\231\1\0\6\231\1\0\2\122"+
    "\3\0\1\116\4\117\1\120\1\121\7\122\1\234\21\122"+
    "\1\117\1\0\10\117\1\0\6\117\1\0\2\122\3\0"+
    "\1\116\4\117\1\120\1\121\15\122\1\235\13\122\1\117"+
    "\1\0\10\117\1\0\6\117\1\0\2\122\3\0\1\236"+
    "\4\237\1\240\1\241\31\122\1\237\1\0\10\237\1\0"+
    "\6\237\1\0\2\122\3\0\1\116\4\117\1\120\1\121"+
    "\15\122\1\242\13\122\1\117\1\0\10\117\1\0\6\117"+
    "\1\0\2\122\3\0\1\116\4\117\1\120\1\121\3\122"+
    "\1\243\25\122\1\117\1\0\10\117\1\0\6\117\1\0"+
    "\2\122\3\0\1\116\4\117\1\120\1\121\24\122\1\244"+
    "\4\122\1\117\1\0\10\117\1\0\6\117\1\0\2\122"+
    "\3\0\1\116\4\117\1\120\1\121\12\122\1\245\16\122"+
    "\1\117\1\0\10\117\1\0\6\117\1\0\2\122\3\0"+
    "\1\116\4\117\1\120\1\121\15\122\1\246\13\122\1\117"+
    "\1\0\10\117\1\0\6\117\1\0\2\122\3\0\1\116"+
    "\4\117\1\120\1\121\3\122\1\247\25\122\1\117\1\0"+
    "\10\117\1\0\6\117\1\0\2\122\3\0\1\116\4\117"+
    "\1\120\1\121\22\122\1\250\6\122\1\117\1\0\10\117"+
    "\1\0\6\117\1\0\2\122\3\0\1\116\4\117\1\120"+
    "\1\121\13\122\1\251\15\122\1\117\1\0\10\117\1\0"+
    "\6\117\1\0\2\122\3\0\1\116\4\117\1\120\1\121"+
    "\10\122\1\252\20\122\1\117\1\0\10\117\1\0\6\117"+
    "\1\0\2\122\3\0\1\116\4\117\1\120\1\121\24\122"+
    "\1\253\4\122\1\117\1\0\10\117\1\0\6\117\1\0"+
    "\2\122\3\0\1\116\4\117\1\120\1\121\7\122\1\254"+
    "\21\122\1\117\1\0\10\117\1\0\6\117\1\0\2\122"+
    "\3\0\1\255\4\256\1\257\1\260\15\122\1\261\13\122"+
    "\1\256\1\0\10\256\1\0\6\256\1\0\2\122\3\0"+
    "\1\116\4\117\1\120\1\121\4\122\1\262\24\122\1\117"+
    "\1\0\10\117\1\0\6\117\1\0\2\122\3\0\1\263"+
    "\4\264\1\265\1\266\31\122\1\264\1\0\10\264\1\0"+
    "\6\264\1\0\2\122\3\0\1\116\4\117\1\120\1\121"+
    "\17\122\1\267\11\122\1\117\1\0\10\117\1\0\6\117"+
    "\1\0\2\122\3\0\1\116\4\117\1\120\1\121\17\122"+
    "\1\270\11\122\1\117\1\0\10\117\1\0\6\117\1\0"+
    "\2\122\4\0\1\167\65\0\1\271\1\172\1\271\64\0"+
    "\1\172\1\0\1\172\65\0\1\272\72\0\1\272\67\0"+
    "\1\272\61\0\1\273\72\0\1\273\67\0\1\273\71\0"+
    "\1\223\13\0\1\274\1\0\2\223\6\0\1\223\23\0"+
    "\1\223\3\0\1\275\4\276\1\277\1\300\31\122\1\276"+
    "\1\0\10\276\1\0\6\276\1\0\2\122\3\0\1\301"+
    "\4\302\1\303\1\304\31\122\1\302\1\0\10\302\1\0"+
    "\6\302\1\0\2\122\3\0\1\305\4\306\1\307\1\310"+
    "\31\122\1\306\1\0\10\306\1\0\6\306\1\0\2\122"+
    "\3\0\1\116\4\117\1\120\1\121\10\122\1\311\20\122"+
    "\1\117\1\0\10\117\1\0\6\117\1\0\2\122\4\0"+
    "\1\231\72\0\1\231\67\0\1\231\60\0\1\116\4\117"+
    "\1\120\1\121\10\122\1\312\20\122\1\117\1\0\10\117"+
    "\1\0\6\117\1\0\2\122\3\0\1\116\4\117\1\120"+
    "\1\121\13\122\1\313\15\122\1\117\1\0\10\117\1\0"+
    "\6\117\1\0\2\122\4\0\1\237\72\0\1\237\67\0"+
    "\1\237\60\0\1\314\4\315\1\316\1\317\31\122\1\315"+
    "\1\0\10\315\1\0\6\315\1\0\2\122\3\0\1\116"+
    "\4\117\1\120\1\121\12\122\1\320\16\122\1\117\1\0"+
    "\10\117\1\0\6\117\1\0\2\122\3\0\1\116\4\117"+
    "\1\120\1\121\17\122\1\321\11\122\1\117\1\0\10\117"+
    "\1\0\6\117\1\0\2\122\3\0\1\116\4\117\1\120"+
    "\1\121\13\122\1\322\15\122\1\117\1\0\10\117\1\0"+
    "\6\117\1\0\2\122\3\0\1\116\4\117\1\120\1\121"+
    "\13\122\1\323\15\122\1\117\1\0\10\117\1\0\6\117"+
    "\1\0\2\122\3\0\1\116\4\117\1\120\1\121\12\122"+
    "\1\324\16\122\1\117\1\0\10\117\1\0\6\117\1\0"+
    "\2\122\3\0\1\116\4\117\1\120\1\121\13\122\1\325"+
    "\15\122\1\117\1\0\10\117\1\0\6\117\1\0\2\122"+
    "\3\0\1\116\4\117\1\120\1\121\4\122\1\326\24\122"+
    "\1\117\1\0\10\117\1\0\6\117\1\0\2\122\3\0"+
    "\1\116\4\117\1\120\1\121\12\122\1\327\16\122\1\117"+
    "\1\0\10\117\1\0\6\117\1\0\2\122\3\0\1\330"+
    "\4\331\1\332\1\333\31\122\1\331\1\0\10\331\1\0"+
    "\6\331\1\0\2\122\3\0\1\116\4\117\1\120\1\121"+
    "\3\122\1\334\25\122\1\117\1\0\10\117\1\0\6\117"+
    "\1\0\2\122\4\0\1\256\72\0\1\256\67\0\1\256"+
    "\60\0\1\116\4\117\1\120\1\121\20\122\1\335\10\122"+
    "\1\117\1\0\10\117\1\0\6\117\1\0\2\122\3\0"+
    "\1\116\4\117\1\120\1\121\22\122\1\336\6\122\1\117"+
    "\1\0\10\117\1\0\6\117\1\0\2\122\4\0\1\264"+
    "\72\0\1\264\67\0\1\264\60\0\1\116\4\117\1\120"+
    "\1\121\15\122\1\337\13\122\1\117\1\0\10\117\1\0"+
    "\6\117\1\0\2\122\3\0\1\116\4\117\1\120\1\121"+
    "\10\122\1\340\20\122\1\117\1\0\10\117\1\0\6\117"+
    "\1\0\2\122\3\0\1\341\4\342\1\343\1\344\2\342"+
    "\1\0\15\342\2\0\6\342\1\0\1\342\1\0\10\342"+
    "\1\0\6\342\1\0\1\342\5\0\1\276\72\0\1\276"+
    "\67\0\1\276\61\0\1\302\72\0\1\302\67\0\1\302"+
    "\61\0\1\306\72\0\1\306\67\0\1\306\60\0\1\345"+
    "\4\346\1\347\1\350\31\122\1\346\1\0\10\346\1\0"+
    "\6\346\1\0\2\122\3\0\1\351\4\352\1\353\1\354"+
    "\31\122\1\352\1\0\10\352\1\0\6\352\1\0\2\122"+
    "\3\0\1\355\4\356\1\357\1\360\31\122\1\356\1\0"+
    "\10\356\1\0\6\356\1\0\2\122\4\0\1\315\72\0"+
    "\1\315\67\0\1\315\60\0\1\116\4\117\1\120\1\121"+
    "\12\122\1\361\16\122\1\117\1\0\10\117\1\0\6\117"+
    "\1\0\2\122\3\0\1\116\4\117\1\120\1\121\4\122"+
    "\1\362\24\122\1\117\1\0\10\117\1\0\6\117\1\0"+
    "\2\122\3\0\1\363\4\364\1\365\1\366\31\122\1\364"+
    "\1\0\10\364\1\0\6\364\1\0\2\122\3\0\1\116"+
    "\4\117\1\120\1\121\4\122\1\367\24\122\1\117\1\0"+
    "\10\117\1\0\6\117\1\0\2\122\3\0\1\116\4\117"+
    "\1\120\1\121\13\122\1\370\15\122\1\117\1\0\10\117"+
    "\1\0\6\117\1\0\2\122\3\0\1\371\4\372\1\373"+
    "\1\374\31\122\1\372\1\0\10\372\1\0\6\372\1\0"+
    "\2\122\3\0\1\375\4\376\1\377\1\u0100\31\122\1\376"+
    "\1\0\10\376\1\0\6\376\1\0\2\122\3\0\1\116"+
    "\4\117\1\120\1\121\13\122\1\u0101\15\122\1\117\1\0"+
    "\10\117\1\0\6\117\1\0\2\122\4\0\1\331\72\0"+
    "\1\331\67\0\1\331\60\0\1\116\4\117\1\120\1\121"+
    "\15\122\1\u0102\13\122\1\117\1\0\10\117\1\0\6\117"+
    "\1\0\2\122\3\0\1\116\4\117\1\120\1\121\21\122"+
    "\1\u0103\7\122\1\117\1\0\10\117\1\0\6\117\1\0"+
    "\2\122\3\0\1\116\4\117\1\120\1\121\10\122\1\u0104"+
    "\20\122\1\117\1\0\10\117\1\0\6\117\1\0\2\122"+
    "\3\0\1\u0105\4\u0106\1\u0107\1\u0108\31\122\1\u0106\1\0"+
    "\10\u0106\1\0\6\u0106\1\0\2\122\3\0\1\116\4\117"+
    "\1\120\1\121\13\122\1\u0109\15\122\1\117\1\0\10\117"+
    "\1\0\6\117\1\0\2\122\4\0\1\u010a\72\0\1\u010a"+
    "\67\0\1\u010a\61\0\1\346\72\0\1\346\67\0\1\346"+
    "\61\0\1\352\72\0\1\352\67\0\1\352\61\0\1\356"+
    "\72\0\1\356\67\0\1\356\60\0\1\u010b\4\u010c\1\u010d"+
    "\1\u010e\31\122\1\u010c\1\0\10\u010c\1\0\6\u010c\1\0"+
    "\2\122\3\0\1\116\4\117\1\120\1\121\25\122\1\u010f"+
    "\3\122\1\117\1\0\10\117\1\0\6\117\1\0\2\122"+
    "\4\0\1\364\72\0\1\364\67\0\1\364\60\0\1\116"+
    "\4\117\1\120\1\121\5\122\1\u0110\23\122\1\117\1\0"+
    "\10\117\1\0\6\117\1\0\2\122\3\0\1\u0111\4\u0112"+
    "\1\u0113\1\u0114\31\122\1\u0112\1\0\10\u0112\1\0\6\u0112"+
    "\1\0\2\122\4\0\1\372\72\0\1\372\67\0\1\372"+
    "\61\0\1\376\72\0\1\376\67\0\1\376\60\0\1\u0115"+
    "\4\u0116\1\u0117\1\u0118\31\122\1\u0116\1\0\10\u0116\1\0"+
    "\6\u0116\1\0\2\122\3\0\1\u0119\4\u011a\1\u011b\1\u011c"+
    "\31\122\1\u011a\1\0\10\u011a\1\0\6\u011a\1\0\2\122"+
    "\3\0\1\u011d\4\u011e\1\u011f\1\u0120\31\122\1\u011e\1\0"+
    "\10\u011e\1\0\6\u011e\1\0\2\122\3\0\1\116\4\117"+
    "\1\120\1\121\10\122\1\u0121\20\122\1\117\1\0\10\117"+
    "\1\0\6\117\1\0\2\122\4\0\1\u0106\72\0\1\u0106"+
    "\67\0\1\u0106\60\0\1\u0122\4\u0123\1\u0124\1\u0125\31\122"+
    "\1\u0123\1\0\10\u0123\1\0\6\u0123\1\0\2\122\4\0"+
    "\1\u010c\72\0\1\u010c\67\0\1\u010c\60\0\1\u0126\4\u0127"+
    "\1\u0128\1\u0129\31\122\1\u0127\1\0\10\u0127\1\0\6\u0127"+
    "\1\0\2\122\3\0\1\116\4\117\1\120\1\121\12\122"+
    "\1\u012a\16\122\1\117\1\0\10\117\1\0\6\117\1\0"+
    "\2\122\4\0\1\u0112\72\0\1\u0112\67\0\1\u0112\61\0"+
    "\1\u0116\72\0\1\u0116\67\0\1\u0116\61\0\1\u011a\72\0"+
    "\1\u011a\67\0\1\u011a\61\0\1\u011e\72\0\1\u011e\67\0"+
    "\1\u011e\60\0\1\u012b\4\u012c\1\u012d\1\u012e\31\122\1\u012c"+
    "\1\0\10\u012c\1\0\6\u012c\1\0\2\122\4\0\1\u0123"+
    "\72\0\1\u0123\67\0\1\u0123\61\0\1\u0127\72\0\1\u0127"+
    "\67\0\1\u0127\60\0\1\u012f\4\u0130\1\u0131\1\u0132\31\122"+
    "\1\u0130\1\0\10\u0130\1\0\6\u0130\1\0\2\122\4\0"+
    "\1\u012c\72\0\1\u012c\67\0\1\u012c\61\0\1\u0130\72\0"+
    "\1\u0130\67\0\1\u0130\57\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11825];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\1\11\1\1\1\11\1\1\1\11\24\1\4\11"+
    "\1\1\15\11\1\1\1\0\1\11\6\1\1\11\1\0"+
    "\1\11\2\0\1\11\2\1\5\11\1\1\1\11\2\1"+
    "\1\0\1\1\1\11\2\1\1\0\1\1\1\11\2\1"+
    "\1\0\1\1\30\0\3\11\1\1\2\0\2\11\2\1"+
    "\13\11\1\1\1\11\3\1\1\11\2\1\5\11\5\0"+
    "\1\1\1\11\2\1\2\0\1\1\1\11\2\1\13\0"+
    "\1\1\1\11\2\1\2\0\1\1\1\11\2\1\3\0"+
    "\2\11\1\0\1\1\1\11\3\1\1\11\3\1\1\11"+
    "\2\1\3\0\1\1\1\11\2\1\10\0\1\1\1\11"+
    "\2\1\5\0\1\1\1\11\3\1\1\11\3\1\1\11"+
    "\3\1\1\11\2\1\2\0\1\1\1\11\2\1\2\0"+
    "\1\1\1\11\3\1\1\11\2\1\4\0\1\1\1\11"+
    "\2\1\1\0\1\11\1\1\1\11\2\1\2\0\1\1"+
    "\1\11\3\1\1\11\3\1\1\11\3\1\1\11\2\1"+
    "\1\0\1\1\1\11\3\1\1\11\2\1\1\0\1\1"+
    "\1\11\3\1\1\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[306];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
   StringBuffer string = new StringBuffer();
   int nesting = 0, cbegin = 0, rbegin = 0;
   Stack<Integer> ccomment = new Stack<Integer>(), rcomment = new Stack<Integer>();

   public Symbol symbol(int type) {
      return new Symbol(type, yyline + 1, yycolumn + 1);
   }
   public Symbol symbol(int type, String value) {
      return new Symbol(type, yyline + 1, yycolumn + 1, value);
   }
   public Symbol symbol(int type, String value, int y, int x) {
      return new Symbol(type, y + 1, x + 1, value);
   }
   public Symbol symbol(int type, int value) {
      return new Symbol(type, yyline + 1, yycolumn + 1, value);
   }
   public Symbol symbol(int type, int value, int y, int x) {
      return new Symbol(type, y + 1, x + 1, value);
   }
   public Symbol symbol(int type, float value) {
      return new Symbol(type, yyline + 1, yycolumn + 1, value);
   }
   public Symbol symbol(int type, float value, int y, int x) {
      return new Symbol(type, y + 1, x + 1, value);
   }
   public String toPoint(int pt) {
      if(pt < 10)
         return pt + "";
      else if(pt == 10)
         return "a";
      else if(pt == 11)
         return "b";
      else if(pt == 12)
         return "c";
      else if(pt == 13)
         return "d";
      else if(pt == 14)
         return "e";
      else if(pt == 15)
         return "f";
      return "0";
   }
   public String toVSOPString(String text) {
      int point = text.charAt(0);
      if(point > 126 || point < 32) {
         return "\\x" + toPoint(point / 16) + toPoint(point % 16);
      } else
         return text;
   }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  VSOPExtendedParser(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 172) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(ERROR); yypushback(1);
            }
          case 92: break;
          case 2: 
            { /* ignore */
            }
          case 93: break;
          case 3: 
            { return symbol(SymbolValue.DIV);
            }
          case 94: break;
          case 4: 
            { return symbol(SymbolValue.TILDE);
            }
          case 95: break;
          case 5: 
            { return symbol(SymbolValue.LOWER);
            }
          case 96: break;
          case 6: 
            { return symbol(SymbolValue.GREATER);
            }
          case 97: break;
          case 7: 
            { return symbol(SymbolValue.DOT);
            }
          case 98: break;
          case 8: 
            { cbegin = yycolumn; rbegin = yyline; string.setLength(0); yybegin(STRING); string.append('"');
            }
          case 99: break;
          case 9: 
            { return symbol(SymbolValue.LBRACE);
            }
          case 100: break;
          case 10: 
            { return symbol(SymbolValue.RBRACE);
            }
          case 101: break;
          case 11: 
            { return symbol(SymbolValue.LPAR);
            }
          case 102: break;
          case 12: 
            { return symbol(SymbolValue.RPAR);
            }
          case 103: break;
          case 13: 
            { return symbol(SymbolValue.COLON);
            }
          case 104: break;
          case 14: 
            { return symbol(SymbolValue.SEMICOLON);
            }
          case 105: break;
          case 15: 
            { return symbol(SymbolValue.COMMA);
            }
          case 106: break;
          case 16: 
            { return symbol(SymbolValue.PLUS);
            }
          case 107: break;
          case 17: 
            { return symbol(SymbolValue.MINUS);
            }
          case 108: break;
          case 18: 
            { return symbol(SymbolValue.TIMES);
            }
          case 109: break;
          case 19: 
            { return symbol(SymbolValue.POW);
            }
          case 110: break;
          case 20: 
            { return symbol(SymbolValue.EQUAL);
            }
          case 111: break;
          case 21: 
            { return symbol(SymbolValue.SWITCH);
            }
          case 112: break;
          case 22: 
            { return symbol(SymbolValue.LBRK);
            }
          case 113: break;
          case 23: 
            { return symbol(SymbolValue.RBRK);
            }
          case 114: break;
          case 24: 
            { return symbol(SymbolValue.INCLUDE);
            }
          case 115: break;
          case 25: 
            { string.append(toVSOPString(yytext()));
            }
          case 116: break;
          case 26: 
            { yybegin(YYINITIAL); string.append('"'); return symbol(SymbolValue.STRING_LITERAL, string.toString(), rbegin, cbegin);
            }
          case 117: break;
          case 27: 
            { throw new java.io.IOException((yyline+1) + ":" + (yycolumn+1) + ": lexical error <" + yytext() + "> is a raw null character in a string.");
            }
          case 118: break;
          case 28: 
            { String err = yytext(); err = err.replace("\r", ""); err = err.replace("\n", ""); yybegin(YYINITIAL); throw new java.io.IOException((yyline+1) + ":" + (yycolumn+1) + ": lexical error <" + err + "> is not valid VSOP syntax.");
            }
          case 119: break;
          case 29: 
            { yybegin(YYINITIAL); throw new java.io.IOException((rbegin+1) + ":" + (cbegin+1) + ": lexical error <0x" + yytext() + "> is not a valid non-decimal number notation.");
            }
          case 120: break;
          case 30: 
            { yybegin(YYINITIAL); throw new java.io.IOException((rbegin+1) + ":" + (cbegin+1) + ": lexical error <0b" + yytext() + "> is not a valid non-decimal number notation.");
            }
          case 121: break;
          case 31: 
            { yypushback(1); yybegin(STRING); throw new java.io.IOException((yyline+1) + ":" + (yycolumn-1) + ": lexical error <\\x" + yytext() + "> is not a valid ASCII byte description.");
            }
          case 122: break;
          case 32: 
            { 
            }
          case 123: break;
          case 33: 
            { return symbol(SymbolValue.SHL);
            }
          case 124: break;
          case 34: 
            { return symbol(SymbolValue.ASSIGN);
            }
          case 125: break;
          case 35: 
            { return symbol(SymbolValue.LOWER_EQUAL);
            }
          case 126: break;
          case 36: 
            { return symbol(SymbolValue.SHR);
            }
          case 127: break;
          case 37: 
            { return symbol(SymbolValue.GREATER_EQUAL);
            }
          case 128: break;
          case 38: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);
            { return symbol(SymbolValue.TYPE_IDENTIFIER, yytext());
            }
          case 129: break;
          case 39: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);
            { return symbol(SymbolValue.OBJECT_IDENTIFIER, yytext());
            }
          case 130: break;
          case 40: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);
            { return symbol(SymbolValue.INTEGER_LITERAL, Integer.parseInt(yytext()));
            }
          case 131: break;
          case 41: 
            { cbegin = yycolumn; rbegin = yyline; yybegin(BIN);
            }
          case 132: break;
          case 42: 
            { cbegin = yycolumn; rbegin = yyline; yybegin(HEX);
            }
          case 133: break;
          case 43: 
            { ccomment.push(yycolumn); rcomment.push(yyline); nesting++; yybegin(COMMENT);
            }
          case 134: break;
          case 44: 
            { String err = yytext(); err = err.replace("\r", ""); err = err.replace("\n", ""); throw new java.io.IOException((yyline+1) + ":" + (yycolumn+1+yytext().trim().length()) + ": lexical error <" + err + "> is not a well-escaped possibly multi-line string.");
            }
          case 135: break;
          case 45: 
            { throw new java.io.IOException((yyline+1) + ":" + (yycolumn+1) + ": lexical error <" + yytext() + "> is not a valid espace character in a string.");
            }
          case 136: break;
          case 46: 
            { /* ignore still in string multi-line */
            }
          case 137: break;
          case 47: 
            { string.append("\\x0a");
            }
          case 138: break;
          case 48: 
            { string.append("\\x08");
            }
          case 139: break;
          case 49: 
            { yybegin(BYTESTRING); string.append("\\x");
            }
          case 140: break;
          case 50: 
            { string.append("\\x09");
            }
          case 141: break;
          case 51: 
            { string.append("\\x0c");
            }
          case 142: break;
          case 52: 
            { string.append("\\x0d");
            }
          case 143: break;
          case 53: 
            { string.append("\\\"");
            }
          case 144: break;
          case 54: 
            { string.append("\\\\");
            }
          case 145: break;
          case 55: 
            { ccomment.push(yycolumn); rcomment.push(yyline); nesting++;
            }
          case 146: break;
          case 56: 
            { ccomment.pop(); rcomment.pop(); nesting--; if(nesting == 0) yybegin(YYINITIAL);
            }
          case 147: break;
          case 57: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);
            { yybegin(YYINITIAL); return symbol(SymbolValue.INTEGER_LITERAL, Integer.parseInt(yytext(), 16), rbegin, cbegin);
            }
          case 148: break;
          case 58: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);
            { yybegin(YYINITIAL); return symbol(SymbolValue.INTEGER_LITERAL, Integer.parseInt(yytext(), 2), rbegin, cbegin);
            }
          case 149: break;
          case 59: 
            { yybegin(STRING); string.append(yytext());
            }
          case 150: break;
          case 60: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -2);
            { return symbol(SymbolValue.TYPE_IDENTIFIER, yytext());
            }
          case 151: break;
          case 61: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -2);
            { return symbol(SymbolValue.OBJECT_IDENTIFIER, yytext());
            }
          case 152: break;
          case 62: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -2);
            { return symbol(SymbolValue.INTEGER_LITERAL, Integer.parseInt(yytext()));
            }
          case 153: break;
          case 63: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 2);
            { return symbol(SymbolValue.DO);
            }
          case 154: break;
          case 64: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 2);
            { return symbol(SymbolValue.OR);
            }
          case 155: break;
          case 65: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 2);
            { return symbol(SymbolValue.IN);
            }
          case 156: break;
          case 66: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 2);
            { return symbol(SymbolValue.IF);
            }
          case 157: break;
          case 67: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -2);
            { yybegin(YYINITIAL); return symbol(SymbolValue.INTEGER_LITERAL, Integer.parseInt(yytext(), 16), rbegin, cbegin);
            }
          case 158: break;
          case 68: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -2);
            { yybegin(YYINITIAL); return symbol(SymbolValue.INTEGER_LITERAL, Integer.parseInt(yytext(), 2), rbegin, cbegin);
            }
          case 159: break;
          case 69: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 3);
            { return symbol(SymbolValue.AND);
            }
          case 160: break;
          case 70: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 3);
            { return symbol(SymbolValue.NOT);
            }
          case 161: break;
          case 71: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 3);
            { return symbol(SymbolValue.NEW);
            }
          case 162: break;
          case 72: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 3);
            { return symbol(SymbolValue.LET);
            }
          case 163: break;
          case 73: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 3);
            { return symbol(SymbolValue.FOR);
            }
          case 164: break;
          case 74: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);
            { return symbol(SymbolValue.FLOAT_LITERAL, Float.parseFloat(yytext()));
            }
          case 165: break;
          case 75: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 4);
            { return symbol(SymbolValue.NULL);
            }
          case 166: break;
          case 76: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 4);
            { return symbol(SymbolValue.BOOL);
            }
          case 167: break;
          case 77: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 4);
            { return symbol(SymbolValue.BYTE);
            }
          case 168: break;
          case 78: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 4);
            { return symbol(SymbolValue.ELSE);
            }
          case 169: break;
          case 79: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 4);
            { return symbol(SymbolValue.TRUE);
            }
          case 170: break;
          case 80: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 4);
            { return symbol(SymbolValue.THEN);
            }
          case 171: break;
          case 81: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 4);
            { return symbol(SymbolValue.UNIT);
            }
          case 172: break;
          case 82: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -2);
            { return symbol(SymbolValue.FLOAT_LITERAL, Float.parseFloat(yytext()));
            }
          case 173: break;
          case 83: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 5);
            { return symbol(SymbolValue.CLASS);
            }
          case 174: break;
          case 84: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 5);
            { return symbol(SymbolValue.ERASE);
            }
          case 175: break;
          case 85: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 5);
            { return symbol(SymbolValue.FALSE);
            }
          case 176: break;
          case 86: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 5);
            { return symbol(SymbolValue.FLOAT);
            }
          case 177: break;
          case 87: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 5);
            { return symbol(SymbolValue.INT32);
            }
          case 178: break;
          case 88: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 5);
            { return symbol(SymbolValue.WHILE);
            }
          case 179: break;
          case 89: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 6);
            { return symbol(SymbolValue.STRING);
            }
          case 180: break;
          case 90: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 6);
            { return symbol(SymbolValue.ISNULL);
            }
          case 181: break;
          case 91: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 7);
            { return symbol(SymbolValue.EXTENDS);
            }
          case 182: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
