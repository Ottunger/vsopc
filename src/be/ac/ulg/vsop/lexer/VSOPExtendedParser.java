/* The following code was generated by JFlex 1.6.1 */

/*VSOP Parser*/
package be.ac.ulg.vsop.lexer;
import be.ac.ulg.vsop.parser.SymbolValue;
import java.util.Stack;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>E:/m1prg/Compiler/Parsers/VSOPExtendedParser.flex</tt>
 */
class VSOPExtendedParser {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int COMMENT = 4;
  public static final int ERROR = 6;
  public static final int HEX = 8;
  public static final int BIN = 10;
  public static final int BYTESTRING = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\1\63\10\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\0"+
    "\1\37\5\0\1\42\1\43\1\51\1\47\1\46\1\50\1\36\1\4"+
    "\1\35\1\61\1\27\1\26\6\10\1\44\1\45\1\54\1\53\1\55"+
    "\1\0\1\56\6\60\24\6\1\57\1\62\1\5\1\52\1\7\1\0"+
    "\1\11\1\14\1\17\1\13\1\21\1\24\1\33\1\34\1\25\2\7"+
    "\1\16\1\7\1\12\1\15\2\7\1\32\1\20\1\23\1\30\1\7"+
    "\1\31\1\22\2\7\1\40\1\0\1\41\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff92\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\2\2\1\3\1\4\22\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\0\1\30\2\27\1\31\2\2\1\32\1\33"+
    "\1\0\1\34\2\0\2\35\1\36\2\37\1\0\2\40"+
    "\1\0\2\41\1\0\1\41\25\0\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\2\0\1\50\2\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\32\2\65\2\66\1\67\1\36\1\70"+
    "\1\71\1\72\5\0\2\73\1\0\2\74\11\0\2\75"+
    "\2\0\2\76\3\0\1\77\1\100\1\0\2\101\2\102"+
    "\2\103\2\0\2\104\14\0\2\105\2\106\2\107\2\0"+
    "\2\110\1\0\2\111\2\112\4\0\2\113\1\0\1\114"+
    "\2\115\2\0\2\116\2\117\2\120\1\0\2\121\2\122"+
    "\1\0\2\123\2\124";

  private static int [] zzUnpackAction() {
    int [] result = new int[225];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\u0104\0\u0138\0\u016c"+
    "\0\u01a0\0\u016c\0\u01d4\0\u016c\0\u0208\0\u023c\0\u0270\0\u02a4"+
    "\0\u02d8\0\u030c\0\u0340\0\u0374\0\u03a8\0\u03dc\0\u0410\0\u0444"+
    "\0\u0478\0\u04ac\0\u04e0\0\u0514\0\u0548\0\u057c\0\u016c\0\u016c"+
    "\0\u016c\0\u016c\0\u05b0\0\u016c\0\u016c\0\u016c\0\u016c\0\u016c"+
    "\0\u016c\0\u016c\0\u016c\0\u016c\0\u05e4\0\u0618\0\u016c\0\u016c"+
    "\0\u064c\0\u064c\0\u016c\0\u0680\0\u06b4\0\u064c\0\u06e8\0\u071c"+
    "\0\u0750\0\u016c\0\u0784\0\u016c\0\u07b8\0\u07ec\0\u016c\0\u0820"+
    "\0\u0854\0\u0888\0\u016c\0\u0208\0\u08bc\0\u016c\0\u023c\0\u08f0"+
    "\0\u016c\0\u0270\0\u0924\0\u0958\0\u098c\0\u09c0\0\u09f4\0\u0a28"+
    "\0\u0a5c\0\u0a90\0\u0ac4\0\u0af8\0\u0b2c\0\u0b60\0\u0b94\0\u0bc8"+
    "\0\u0bfc\0\u0c30\0\u0c64\0\u0c98\0\u0ccc\0\u0d00\0\u0d34\0\u0d68"+
    "\0\u016c\0\u016c\0\u016c\0\u016c\0\u016c\0\u016c\0\u064c\0\u0680"+
    "\0\u0d9c\0\u016c\0\u016c\0\u0dd0\0\u0e04\0\u016c\0\u016c\0\u016c"+
    "\0\u016c\0\u016c\0\u016c\0\u016c\0\u016c\0\u016c\0\u016c\0\u016c"+
    "\0\u0e38\0\u016c\0\u0e6c\0\u016c\0\u016c\0\u016c\0\u016c\0\u016c"+
    "\0\u016c\0\u0ea0\0\u0ed4\0\u0f08\0\u0f3c\0\u0f70\0\u0fa4\0\u016c"+
    "\0\u0fd8\0\u100c\0\u016c\0\u1040\0\u1074\0\u10a8\0\u10dc\0\u1110"+
    "\0\u1144\0\u1178\0\u11ac\0\u11e0\0\u1214\0\u016c\0\u1248\0\u127c"+
    "\0\u12b0\0\u016c\0\u12e4\0\u1318\0\u0dd0\0\u016c\0\u016c\0\u134c"+
    "\0\u1380\0\u016c\0\u13b4\0\u016c\0\u13e8\0\u016c\0\u141c\0\u1450"+
    "\0\u1484\0\u016c\0\u14b8\0\u14ec\0\u1520\0\u1554\0\u1588\0\u15bc"+
    "\0\u15f0\0\u1624\0\u1658\0\u168c\0\u16c0\0\u16f4\0\u1728\0\u016c"+
    "\0\u175c\0\u016c\0\u1790\0\u016c\0\u17c4\0\u17f8\0\u182c\0\u016c"+
    "\0\u1860\0\u1894\0\u016c\0\u18c8\0\u016c\0\u18fc\0\u1930\0\u1964"+
    "\0\u1998\0\u19cc\0\u016c\0\u1a00\0\u016c\0\u1a34\0\u016c\0\u1a68"+
    "\0\u1a9c\0\u1ad0\0\u016c\0\u1b04\0\u016c\0\u1b38\0\u016c\0\u1b6c"+
    "\0\u1ba0\0\u016c\0\u1bd4\0\u016c\0\u1c08\0\u1c3c\0\u016c\0\u1c70"+
    "\0\u016c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[225];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\1\11\2\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\16\1\31\1\32\1\33\2\17\1\34\1\35"+
    "\3\16\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\15\1\17\2\10\2\61"+
    "\1\62\34\61\1\63\2\61\2\64\16\61\1\65\1\66"+
    "\42\12\1\67\6\12\1\70\12\12\2\71\1\0\61\71"+
    "\10\72\2\73\1\72\2\73\2\72\1\73\1\72\1\73"+
    "\2\72\1\73\1\72\2\73\5\72\1\73\22\72\2\73"+
    "\2\72\10\74\2\75\1\74\2\75\2\74\1\75\1\74"+
    "\1\75\2\74\1\75\1\74\2\75\5\74\1\76\22\74"+
    "\1\75\1\76\2\74\2\77\1\0\5\77\2\100\1\77"+
    "\2\100\2\77\1\100\1\77\1\100\2\77\1\100\1\77"+
    "\2\100\5\77\1\100\22\77\2\100\2\77\66\0\1\12"+
    "\65\0\1\101\60\0\1\102\4\103\30\104\1\103\1\0"+
    "\10\103\1\0\7\103\2\104\3\0\1\105\4\106\30\107"+
    "\1\106\1\0\10\106\1\0\7\106\2\107\3\0\1\110"+
    "\6\111\1\112\15\111\2\112\5\111\1\112\1\113\1\0"+
    "\10\111\1\0\10\111\1\112\3\0\1\105\4\106\4\107"+
    "\1\114\23\107\1\106\1\0\10\106\1\0\7\106\2\107"+
    "\3\0\1\105\4\106\7\107\1\115\3\107\1\116\6\107"+
    "\1\117\5\107\1\106\1\0\10\106\1\0\7\106\2\107"+
    "\3\0\1\105\4\106\7\107\1\120\20\107\1\106\1\0"+
    "\10\106\1\0\7\106\2\107\3\0\1\105\4\106\7\107"+
    "\1\121\20\107\1\106\1\0\10\106\1\0\7\106\2\107"+
    "\3\0\1\105\4\106\24\107\1\122\3\107\1\106\1\0"+
    "\10\106\1\0\7\106\2\107\3\0\1\105\4\106\13\107"+
    "\1\123\14\107\1\106\1\0\10\106\1\0\7\106\2\107"+
    "\3\0\1\105\4\106\10\107\1\124\17\107\1\106\1\0"+
    "\10\106\1\0\7\106\2\107\3\0\1\105\4\106\15\107"+
    "\1\125\12\107\1\106\1\0\10\106\1\0\7\106\2\107"+
    "\3\0\1\105\4\106\10\107\1\126\3\107\1\127\13\107"+
    "\1\106\1\0\10\106\1\0\7\106\2\107\3\0\1\105"+
    "\4\106\24\107\1\130\1\107\1\131\1\107\1\106\1\0"+
    "\10\106\1\0\7\106\2\107\3\0\1\105\4\106\3\107"+
    "\1\132\4\107\1\133\17\107\1\106\1\0\10\106\1\0"+
    "\7\106\2\107\3\0\1\105\4\106\4\107\1\134\5\107"+
    "\1\135\3\107\1\136\11\107\1\106\1\0\10\106\1\0"+
    "\7\106\2\107\3\0\1\105\4\106\4\107\1\137\23\107"+
    "\1\106\1\0\10\106\1\0\7\106\2\107\3\0\1\105"+
    "\4\106\26\107\1\140\1\107\1\106\1\0\10\106\1\0"+
    "\7\106\2\107\3\0\1\110\6\111\1\112\3\111\1\141"+
    "\5\111\1\142\3\111\2\112\5\111\1\112\1\113\1\0"+
    "\10\111\1\0\10\111\1\112\53\0\1\143\62\0\1\144"+
    "\2\0\1\145\63\0\1\146\10\0\2\62\1\147\34\62"+
    "\1\0\2\62\2\150\16\62\1\0\1\62\1\0\1\151"+
    "\1\152\61\0\1\153\1\154\1\155\1\154\6\153\1\156"+
    "\1\153\1\157\5\153\1\160\1\161\1\162\5\153\1\163"+
    "\4\153\1\164\22\153\1\165\1\153\51\0\1\166\55\0"+
    "\1\167\20\0\2\71\1\170\61\71\1\72\1\171\4\172"+
    "\2\72\2\73\1\72\2\73\2\72\1\73\1\72\1\73"+
    "\2\72\1\73\1\72\2\73\5\72\1\73\1\172\1\72"+
    "\10\172\1\72\7\172\2\73\2\72\10\74\2\75\1\74"+
    "\2\75\2\74\1\75\1\74\1\75\2\74\1\75\1\74"+
    "\2\75\5\74\1\75\22\74\2\75\3\74\1\173\4\174"+
    "\2\74\2\75\1\74\2\75\2\74\1\75\1\74\1\75"+
    "\2\74\1\75\1\74\2\75\5\74\1\76\1\174\1\74"+
    "\10\174\1\74\7\174\1\75\1\76\2\74\10\0\2\175"+
    "\1\0\2\175\2\0\1\175\1\0\1\175\2\0\1\175"+
    "\1\0\2\175\5\0\1\175\22\0\2\175\2\0\2\101"+
    "\1\176\61\101\2\0\1\177\63\0\1\200\63\0\1\201"+
    "\71\0\1\202\15\0\2\202\5\0\1\202\23\0\1\202"+
    "\3\0\1\105\4\106\5\107\1\203\22\107\1\106\1\0"+
    "\10\106\1\0\7\106\2\107\3\0\1\105\4\106\15\107"+
    "\1\204\12\107\1\106\1\0\10\106\1\0\7\106\2\107"+
    "\3\0\1\105\4\106\23\107\1\205\4\107\1\106\1\0"+
    "\10\106\1\0\7\106\2\107\3\0\1\105\4\106\10\107"+
    "\1\206\17\107\1\106\1\0\10\106\1\0\7\106\2\107"+
    "\3\0\1\207\4\210\30\107\1\210\1\0\10\210\1\0"+
    "\7\210\2\107\3\0\1\105\4\106\7\107\1\211\20\107"+
    "\1\106\1\0\10\106\1\0\7\106\2\107\3\0\1\212"+
    "\4\213\30\107\1\213\1\0\10\213\1\0\7\213\2\107"+
    "\3\0\1\105\4\106\15\107\1\214\12\107\1\106\1\0"+
    "\10\106\1\0\7\106\2\107\3\0\1\105\4\106\3\107"+
    "\1\215\24\107\1\106\1\0\10\106\1\0\7\106\2\107"+
    "\3\0\1\105\4\106\24\107\1\216\3\107\1\106\1\0"+
    "\10\106\1\0\7\106\2\107\3\0\1\105\4\106\12\107"+
    "\1\217\15\107\1\106\1\0\10\106\1\0\7\106\2\107"+
    "\3\0\1\105\4\106\15\107\1\220\12\107\1\106\1\0"+
    "\10\106\1\0\7\106\2\107\3\0\1\105\4\106\22\107"+
    "\1\221\5\107\1\106\1\0\10\106\1\0\7\106\2\107"+
    "\3\0\1\105\4\106\13\107\1\222\14\107\1\106\1\0"+
    "\10\106\1\0\7\106\2\107\3\0\1\105\4\106\10\107"+
    "\1\223\17\107\1\106\1\0\10\106\1\0\7\106\2\107"+
    "\3\0\1\105\4\106\7\107\1\224\20\107\1\106\1\0"+
    "\10\106\1\0\7\106\2\107\3\0\1\225\4\226\15\107"+
    "\1\227\12\107\1\226\1\0\10\226\1\0\7\226\2\107"+
    "\3\0\1\105\4\106\4\107\1\230\23\107\1\106\1\0"+
    "\10\106\1\0\7\106\2\107\3\0\1\231\4\232\30\107"+
    "\1\232\1\0\10\232\1\0\7\232\2\107\3\0\1\105"+
    "\4\106\17\107\1\233\10\107\1\106\1\0\10\106\1\0"+
    "\7\106\2\107\3\0\1\105\4\106\17\107\1\234\10\107"+
    "\1\106\1\0\10\106\1\0\7\106\2\107\4\0\1\152"+
    "\62\0\1\235\1\155\1\235\61\0\1\155\1\0\1\155"+
    "\62\0\1\236\63\0\1\237\71\0\1\202\13\0\1\240"+
    "\1\0\2\202\5\0\1\202\23\0\1\202\3\0\1\241"+
    "\4\242\30\107\1\242\1\0\10\242\1\0\7\242\2\107"+
    "\3\0\1\243\4\244\30\107\1\244\1\0\10\244\1\0"+
    "\7\244\2\107\3\0\1\245\4\246\30\107\1\246\1\0"+
    "\10\246\1\0\7\246\2\107\3\0\1\105\4\106\10\107"+
    "\1\247\17\107\1\106\1\0\10\106\1\0\7\106\2\107"+
    "\4\0\1\210\62\0\1\105\4\106\10\107\1\250\17\107"+
    "\1\106\1\0\10\106\1\0\7\106\2\107\4\0\1\213"+
    "\62\0\1\251\4\252\30\107\1\252\1\0\10\252\1\0"+
    "\7\252\2\107\3\0\1\105\4\106\12\107\1\253\15\107"+
    "\1\106\1\0\10\106\1\0\7\106\2\107\3\0\1\105"+
    "\4\106\17\107\1\254\10\107\1\106\1\0\10\106\1\0"+
    "\7\106\2\107\3\0\1\105\4\106\13\107\1\255\14\107"+
    "\1\106\1\0\10\106\1\0\7\106\2\107\3\0\1\105"+
    "\4\106\13\107\1\256\14\107\1\106\1\0\10\106\1\0"+
    "\7\106\2\107\3\0\1\105\4\106\13\107\1\257\14\107"+
    "\1\106\1\0\10\106\1\0\7\106\2\107\3\0\1\105"+
    "\4\106\4\107\1\260\23\107\1\106\1\0\10\106\1\0"+
    "\7\106\2\107\3\0\1\105\4\106\12\107\1\261\15\107"+
    "\1\106\1\0\10\106\1\0\7\106\2\107\3\0\1\105"+
    "\4\106\3\107\1\262\24\107\1\106\1\0\10\106\1\0"+
    "\7\106\2\107\4\0\1\226\62\0\1\105\4\106\20\107"+
    "\1\263\7\107\1\106\1\0\10\106\1\0\7\106\2\107"+
    "\3\0\1\105\4\106\22\107\1\264\5\107\1\106\1\0"+
    "\10\106\1\0\7\106\2\107\4\0\1\232\62\0\1\105"+
    "\4\106\15\107\1\265\12\107\1\106\1\0\10\106\1\0"+
    "\7\106\2\107\3\0\1\105\4\106\10\107\1\266\17\107"+
    "\1\106\1\0\10\106\1\0\7\106\2\107\3\0\1\267"+
    "\6\270\1\0\15\270\2\0\5\270\1\0\1\270\1\0"+
    "\10\270\1\0\10\270\5\0\1\242\63\0\1\244\63\0"+
    "\1\246\62\0\1\271\4\272\30\107\1\272\1\0\10\272"+
    "\1\0\7\272\2\107\3\0\1\273\4\274\30\107\1\274"+
    "\1\0\10\274\1\0\7\274\2\107\4\0\1\252\62\0"+
    "\1\105\4\106\12\107\1\275\15\107\1\106\1\0\10\106"+
    "\1\0\7\106\2\107\3\0\1\105\4\106\4\107\1\276"+
    "\23\107\1\106\1\0\10\106\1\0\7\106\2\107\3\0"+
    "\1\277\4\300\30\107\1\300\1\0\10\300\1\0\7\300"+
    "\2\107\3\0\1\105\4\106\4\107\1\301\23\107\1\106"+
    "\1\0\10\106\1\0\7\106\2\107\3\0\1\302\4\303"+
    "\30\107\1\303\1\0\10\303\1\0\7\303\2\107\3\0"+
    "\1\304\4\305\30\107\1\305\1\0\10\305\1\0\7\305"+
    "\2\107\3\0\1\105\4\106\13\107\1\306\14\107\1\106"+
    "\1\0\10\106\1\0\7\106\2\107\3\0\1\105\4\106"+
    "\15\107\1\307\12\107\1\106\1\0\10\106\1\0\7\106"+
    "\2\107\3\0\1\105\4\106\21\107\1\310\6\107\1\106"+
    "\1\0\10\106\1\0\7\106\2\107\3\0\1\105\4\106"+
    "\10\107\1\311\17\107\1\106\1\0\10\106\1\0\7\106"+
    "\2\107\3\0\1\312\4\313\30\107\1\313\1\0\10\313"+
    "\1\0\7\313\2\107\3\0\1\105\4\106\13\107\1\314"+
    "\14\107\1\106\1\0\10\106\1\0\7\106\2\107\4\0"+
    "\1\315\63\0\1\272\63\0\1\274\62\0\1\316\4\317"+
    "\30\107\1\317\1\0\10\317\1\0\7\317\2\107\3\0"+
    "\1\105\4\106\25\107\1\320\2\107\1\106\1\0\10\106"+
    "\1\0\7\106\2\107\4\0\1\300\62\0\1\105\4\106"+
    "\5\107\1\321\22\107\1\106\1\0\10\106\1\0\7\106"+
    "\2\107\4\0\1\303\63\0\1\305\62\0\1\322\4\323"+
    "\30\107\1\323\1\0\10\323\1\0\7\323\2\107\3\0"+
    "\1\324\4\325\30\107\1\325\1\0\10\325\1\0\7\325"+
    "\2\107\3\0\1\326\4\327\30\107\1\327\1\0\10\327"+
    "\1\0\7\327\2\107\3\0\1\105\4\106\10\107\1\330"+
    "\17\107\1\106\1\0\10\106\1\0\7\106\2\107\4\0"+
    "\1\313\62\0\1\331\4\332\30\107\1\332\1\0\10\332"+
    "\1\0\7\332\2\107\4\0\1\317\62\0\1\333\4\334"+
    "\30\107\1\334\1\0\10\334\1\0\7\334\2\107\3\0"+
    "\1\105\4\106\12\107\1\335\15\107\1\106\1\0\10\106"+
    "\1\0\7\106\2\107\4\0\1\323\63\0\1\325\63\0"+
    "\1\327\62\0\1\336\4\337\30\107\1\337\1\0\10\337"+
    "\1\0\7\337\2\107\4\0\1\332\63\0\1\334\62\0"+
    "\1\340\4\341\30\107\1\341\1\0\10\341\1\0\7\341"+
    "\2\107\4\0\1\337\63\0\1\341\61\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7332];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\1\11\1\1\1\11\1\1\1\11\22\1\4\11"+
    "\1\1\11\11\2\1\2\11\1\1\1\0\1\11\6\1"+
    "\1\11\1\0\1\11\2\0\1\11\3\1\1\11\1\0"+
    "\1\1\1\11\1\0\1\1\1\11\1\0\1\1\25\0"+
    "\6\11\1\1\2\0\2\11\2\1\13\11\1\1\1\11"+
    "\1\1\6\11\5\0\1\1\1\11\1\0\1\1\1\11"+
    "\11\0\1\1\1\11\2\0\1\1\1\11\3\0\2\11"+
    "\1\0\1\1\1\11\1\1\1\11\1\1\1\11\2\0"+
    "\1\1\1\11\14\0\1\1\1\11\1\1\1\11\1\1"+
    "\1\11\2\0\1\1\1\11\1\0\1\1\1\11\1\1"+
    "\1\11\4\0\1\1\1\11\1\0\1\11\1\1\1\11"+
    "\2\0\1\1\1\11\1\1\1\11\1\1\1\11\1\0"+
    "\1\1\1\11\1\1\1\11\1\0\1\1\1\11\1\1"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[225];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
   StringBuffer string = new StringBuffer();
   int nesting = 0, cbegin = 0, rbegin = 0;
   Stack<Integer> ccomment = new Stack<Integer>(), rcomment = new Stack<Integer>();

   public Symbol symbol(int type) {
      return new Symbol(type, yyline + 1, yycolumn + 1);
   }
   public Symbol symbol(int type, String value) {
      return new Symbol(type, yyline + 1, yycolumn + 1, value);
   }
   public Symbol symbol(int type, String value, int y, int x) {
      return new Symbol(type, y + 1, x + 1, value);
   }
   public Symbol symbol(int type, int value) {
      return new Symbol(type, yyline + 1, yycolumn + 1, value);
   }
   public Symbol symbol(int type, int value, int y, int x) {
      return new Symbol(type, y + 1, x + 1, value);
   }
   public Symbol symbol(int type, float value) {
      return new Symbol(type, yyline + 1, yycolumn + 1, value);
   }
   public Symbol symbol(int type, float value, int y, int x) {
      return new Symbol(type, y + 1, x + 1, value);
   }
   public String toPoint(int pt) {
      if(pt < 10)
         return pt + "";
      else if(pt == 10)
         return "a";
      else if(pt == 11)
         return "b";
      else if(pt == 12)
         return "c";
      else if(pt == 13)
         return "d";
      else if(pt == 14)
         return "e";
      else if(pt == 15)
         return "f";
      return "0";
   }
   public String toVSOPString(String text) {
      int point = text.charAt(0);
      if(point > 126 || point < 32) {
         return "\\x" + toPoint(point / 16) + toPoint(point % 16);
      } else
         return text;
   }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  VSOPExtendedParser(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 166) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(ERROR); yypushback(1);
            }
          case 85: break;
          case 2: 
            { /* ignore */
            }
          case 86: break;
          case 3: 
            { return symbol(SymbolValue.DIV);
            }
          case 87: break;
          case 4: 
            { return symbol(SymbolValue.RBRK);
            }
          case 88: break;
          case 5: 
            { return symbol(SymbolValue.DOT);
            }
          case 89: break;
          case 6: 
            { cbegin = yycolumn; rbegin = yyline; string.setLength(0); yybegin(STRING); string.append('"');
            }
          case 90: break;
          case 7: 
            { return symbol(SymbolValue.LBRACE);
            }
          case 91: break;
          case 8: 
            { return symbol(SymbolValue.RBRACE);
            }
          case 92: break;
          case 9: 
            { return symbol(SymbolValue.LPAR);
            }
          case 93: break;
          case 10: 
            { return symbol(SymbolValue.RPAR);
            }
          case 94: break;
          case 11: 
            { return symbol(SymbolValue.COLON);
            }
          case 95: break;
          case 12: 
            { return symbol(SymbolValue.SEMICOLON);
            }
          case 96: break;
          case 13: 
            { return symbol(SymbolValue.COMMA);
            }
          case 97: break;
          case 14: 
            { return symbol(SymbolValue.PLUS);
            }
          case 98: break;
          case 15: 
            { return symbol(SymbolValue.MINUS);
            }
          case 99: break;
          case 16: 
            { return symbol(SymbolValue.TIMES);
            }
          case 100: break;
          case 17: 
            { return symbol(SymbolValue.POW);
            }
          case 101: break;
          case 18: 
            { return symbol(SymbolValue.EQUAL);
            }
          case 102: break;
          case 19: 
            { return symbol(SymbolValue.LOWER);
            }
          case 103: break;
          case 20: 
            { return symbol(SymbolValue.GREATER);
            }
          case 104: break;
          case 21: 
            { return symbol(SymbolValue.SWITCH);
            }
          case 105: break;
          case 22: 
            { return symbol(SymbolValue.LBRK);
            }
          case 106: break;
          case 23: 
            { string.append(toVSOPString(yytext()));
            }
          case 107: break;
          case 24: 
            { yybegin(YYINITIAL); string.append('"'); return symbol(SymbolValue.STRING_LITERAL, string.toString(), rbegin, cbegin);
            }
          case 108: break;
          case 25: 
            { throw new java.io.IOException((yyline+1) + ":" + (yycolumn+1) + ": lexical error <" + yytext() + "> is a raw null character in a string.");
            }
          case 109: break;
          case 26: 
            { String err = yytext(); err = err.replace("\r", ""); err = err.replace("\n", ""); yybegin(YYINITIAL); throw new java.io.IOException((yyline+1) + ":" + (yycolumn+1) + ": lexical error <" + err + "> is not valid VSOP syntax.");
            }
          case 110: break;
          case 27: 
            { yybegin(YYINITIAL); throw new java.io.IOException((rbegin+1) + ":" + (cbegin+1) + ": lexical error <0x" + yytext() + "> is not a valid non-decimal number notation.");
            }
          case 111: break;
          case 28: 
            { yybegin(YYINITIAL); throw new java.io.IOException((rbegin+1) + ":" + (cbegin+1) + ": lexical error <0b" + yytext() + "> is not a valid non-decimal number notation.");
            }
          case 112: break;
          case 29: 
            { yypushback(1); yybegin(STRING); throw new java.io.IOException((yyline+1) + ":" + (yycolumn-1) + ": lexical error <\\x" + yytext() + "> is not a valid ASCII byte description.");
            }
          case 113: break;
          case 30: 
            { 
            }
          case 114: break;
          case 31: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);
            { return symbol(SymbolValue.TYPE_IDENTIFIER, yytext());
            }
          case 115: break;
          case 32: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);
            { return symbol(SymbolValue.OBJECT_IDENTIFIER, yytext());
            }
          case 116: break;
          case 33: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);
            { return symbol(SymbolValue.INTEGER_LITERAL, Integer.parseInt(yytext()));
            }
          case 117: break;
          case 34: 
            { cbegin = yycolumn; rbegin = yyline; yybegin(BIN);
            }
          case 118: break;
          case 35: 
            { cbegin = yycolumn; rbegin = yyline; yybegin(HEX);
            }
          case 119: break;
          case 36: 
            { ccomment.push(yycolumn); rcomment.push(yyline); nesting++; yybegin(COMMENT);
            }
          case 120: break;
          case 37: 
            { return symbol(SymbolValue.ASSIGN);
            }
          case 121: break;
          case 38: 
            { return symbol(SymbolValue.LOWER_EQUAL);
            }
          case 122: break;
          case 39: 
            { return symbol(SymbolValue.GREATER_EQUAL);
            }
          case 123: break;
          case 40: 
            { String err = yytext(); err = err.replace("\r", ""); err = err.replace("\n", ""); throw new java.io.IOException((yyline+1) + ":" + (yycolumn+1+yytext().trim().length()) + ": lexical error <" + err + "> is not a well-escaped possibly multi-line string.");
            }
          case 124: break;
          case 41: 
            { throw new java.io.IOException((yyline+1) + ":" + (yycolumn+1) + ": lexical error <" + yytext() + "> is not a valid espace character in a string.");
            }
          case 125: break;
          case 42: 
            { /* ignore still in string multi-line */
            }
          case 126: break;
          case 43: 
            { string.append("\\x0a");
            }
          case 127: break;
          case 44: 
            { string.append("\\x08");
            }
          case 128: break;
          case 45: 
            { yybegin(BYTESTRING); string.append("\\x");
            }
          case 129: break;
          case 46: 
            { string.append("\\x09");
            }
          case 130: break;
          case 47: 
            { string.append("\\x0c");
            }
          case 131: break;
          case 48: 
            { string.append("\\x0d");
            }
          case 132: break;
          case 49: 
            { string.append("\\\"");
            }
          case 133: break;
          case 50: 
            { string.append("\\\\");
            }
          case 134: break;
          case 51: 
            { ccomment.push(yycolumn); rcomment.push(yyline); nesting++;
            }
          case 135: break;
          case 52: 
            { ccomment.pop(); rcomment.pop(); nesting--; if(nesting == 0) yybegin(YYINITIAL);
            }
          case 136: break;
          case 53: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);
            { yybegin(YYINITIAL); return symbol(SymbolValue.INTEGER_LITERAL, Integer.parseInt(yytext(), 16), rbegin, cbegin);
            }
          case 137: break;
          case 54: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);
            { yybegin(YYINITIAL); return symbol(SymbolValue.INTEGER_LITERAL, Integer.parseInt(yytext(), 2), rbegin, cbegin);
            }
          case 138: break;
          case 55: 
            { yybegin(STRING); string.append(yytext());
            }
          case 139: break;
          case 56: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -2);
            { return symbol(SymbolValue.TYPE_IDENTIFIER, yytext());
            }
          case 140: break;
          case 57: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -2);
            { return symbol(SymbolValue.OBJECT_IDENTIFIER, yytext());
            }
          case 141: break;
          case 58: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -2);
            { return symbol(SymbolValue.INTEGER_LITERAL, Integer.parseInt(yytext()));
            }
          case 142: break;
          case 59: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 2);
            { return symbol(SymbolValue.DO);
            }
          case 143: break;
          case 60: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 2);
            { return symbol(SymbolValue.OR);
            }
          case 144: break;
          case 61: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 2);
            { return symbol(SymbolValue.IN);
            }
          case 145: break;
          case 62: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 2);
            { return symbol(SymbolValue.IF);
            }
          case 146: break;
          case 63: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -2);
            { yybegin(YYINITIAL); return symbol(SymbolValue.INTEGER_LITERAL, Integer.parseInt(yytext(), 16), rbegin, cbegin);
            }
          case 147: break;
          case 64: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -2);
            { yybegin(YYINITIAL); return symbol(SymbolValue.INTEGER_LITERAL, Integer.parseInt(yytext(), 2), rbegin, cbegin);
            }
          case 148: break;
          case 65: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 3);
            { return symbol(SymbolValue.AND);
            }
          case 149: break;
          case 66: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 3);
            { return symbol(SymbolValue.NOT);
            }
          case 150: break;
          case 67: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 3);
            { return symbol(SymbolValue.NEW);
            }
          case 151: break;
          case 68: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 3);
            { return symbol(SymbolValue.LET);
            }
          case 152: break;
          case 69: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);
            { return symbol(SymbolValue.FLOAT_LITERAL, Float.parseFloat(yytext()));
            }
          case 153: break;
          case 70: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 4);
            { return symbol(SymbolValue.NULL);
            }
          case 154: break;
          case 71: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 4);
            { return symbol(SymbolValue.BOOL);
            }
          case 155: break;
          case 72: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 4);
            { return symbol(SymbolValue.ELSE);
            }
          case 156: break;
          case 73: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 4);
            { return symbol(SymbolValue.TRUE);
            }
          case 157: break;
          case 74: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 4);
            { return symbol(SymbolValue.THEN);
            }
          case 158: break;
          case 75: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 4);
            { return symbol(SymbolValue.UNIT);
            }
          case 159: break;
          case 76: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -2);
            { return symbol(SymbolValue.FLOAT_LITERAL, Float.parseFloat(yytext()));
            }
          case 160: break;
          case 77: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 5);
            { return symbol(SymbolValue.CLASS);
            }
          case 161: break;
          case 78: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 5);
            { return symbol(SymbolValue.FALSE);
            }
          case 162: break;
          case 79: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 5);
            { return symbol(SymbolValue.FLOAT);
            }
          case 163: break;
          case 80: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 5);
            { return symbol(SymbolValue.INT32);
            }
          case 164: break;
          case 81: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 5);
            { return symbol(SymbolValue.WHILE);
            }
          case 165: break;
          case 82: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 6);
            { return symbol(SymbolValue.STRING);
            }
          case 166: break;
          case 83: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 6);
            { return symbol(SymbolValue.ISNULL);
            }
          case 167: break;
          case 84: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 7);
            { return symbol(SymbolValue.EXTENDS);
            }
          case 168: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
