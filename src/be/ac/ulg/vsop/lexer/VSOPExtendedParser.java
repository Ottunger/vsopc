/* The following code was generated by JFlex 1.6.1 */

/*VSOP Parser*/
package be.ac.ulg.vsop.lexer;
import be.ac.ulg.vsop.parser.SymbolValue;
import java.util.Stack;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>E:/m1prg/Compiler/Parsers/VSOPExtendedParser.flex</tt>
 */
class VSOPExtendedParser {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int COMMENT = 4;
  public static final int ERROR = 6;
  public static final int HEX = 8;
  public static final int BIN = 10;
  public static final int BYTESTRING = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\1\64\10\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\0"+
    "\1\37\5\0\1\42\1\43\1\51\1\47\1\46\1\50\1\36\1\4"+
    "\1\35\1\62\1\27\1\26\6\10\1\44\1\45\1\54\1\53\1\55"+
    "\1\0\1\56\6\61\24\6\1\57\1\63\1\60\1\52\1\7\1\0"+
    "\1\11\1\14\1\17\1\13\1\21\1\24\1\33\1\34\1\25\2\7"+
    "\1\16\1\7\1\12\1\15\2\7\1\32\1\20\1\23\1\30\1\7"+
    "\1\31\1\22\2\7\1\40\1\0\1\41\1\5\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff91\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\2\2\1\3\1\4\22\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\0\1\31\2\30\1\32\2\2\1\33"+
    "\1\34\1\0\1\35\2\0\2\36\1\37\2\40\1\0"+
    "\2\41\1\0\2\42\1\0\1\42\25\0\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\2\0\1\51\2\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\33\2\66\2\67\1\70\1\37"+
    "\1\71\1\72\1\73\5\0\2\74\1\0\2\75\11\0"+
    "\2\76\2\0\2\77\3\0\1\100\1\101\1\0\2\102"+
    "\2\103\2\104\2\0\2\105\14\0\2\106\2\107\2\110"+
    "\2\0\2\111\1\0\2\112\2\113\4\0\2\114\1\0"+
    "\1\115\2\116\2\0\2\117\2\120\2\121\1\0\2\122"+
    "\2\123\1\0\2\124\2\125";

  private static int [] zzUnpackAction() {
    int [] result = new int[226];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u0173"+
    "\0\u01a8\0\u0173\0\u01dd\0\u0173\0\u0212\0\u0247\0\u027c\0\u02b1"+
    "\0\u02e6\0\u031b\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424\0\u0459"+
    "\0\u048e\0\u04c3\0\u04f8\0\u052d\0\u0562\0\u0597\0\u0173\0\u0173"+
    "\0\u0173\0\u0173\0\u05cc\0\u0173\0\u0173\0\u0173\0\u0173\0\u0173"+
    "\0\u0173\0\u0173\0\u0173\0\u0173\0\u0601\0\u0636\0\u0173\0\u0173"+
    "\0\u0173\0\u066b\0\u066b\0\u0173\0\u06a0\0\u06d5\0\u066b\0\u070a"+
    "\0\u073f\0\u0774\0\u0173\0\u07a9\0\u0173\0\u07de\0\u0813\0\u0173"+
    "\0\u0848\0\u087d\0\u08b2\0\u0173\0\u0212\0\u08e7\0\u0173\0\u0247"+
    "\0\u091c\0\u0173\0\u027c\0\u0951\0\u0986\0\u09bb\0\u09f0\0\u0a25"+
    "\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e\0\u0b63\0\u0b98\0\u0bcd"+
    "\0\u0c02\0\u0c37\0\u0c6c\0\u0ca1\0\u0cd6\0\u0d0b\0\u0d40\0\u0d75"+
    "\0\u0daa\0\u0173\0\u0173\0\u0173\0\u0173\0\u0173\0\u0173\0\u066b"+
    "\0\u06a0\0\u0ddf\0\u0173\0\u0173\0\u0e14\0\u0e49\0\u0173\0\u0173"+
    "\0\u0173\0\u0173\0\u0173\0\u0173\0\u0173\0\u0173\0\u0173\0\u0173"+
    "\0\u0173\0\u0e7e\0\u0173\0\u0eb3\0\u0173\0\u0173\0\u0173\0\u0173"+
    "\0\u0173\0\u0173\0\u0ee8\0\u0f1d\0\u0f52\0\u0f87\0\u0fbc\0\u0ff1"+
    "\0\u0173\0\u1026\0\u105b\0\u0173\0\u1090\0\u10c5\0\u10fa\0\u112f"+
    "\0\u1164\0\u1199\0\u11ce\0\u1203\0\u1238\0\u126d\0\u0173\0\u12a2"+
    "\0\u12d7\0\u130c\0\u0173\0\u1341\0\u1376\0\u0e14\0\u0173\0\u0173"+
    "\0\u13ab\0\u13e0\0\u0173\0\u1415\0\u0173\0\u144a\0\u0173\0\u147f"+
    "\0\u14b4\0\u14e9\0\u0173\0\u151e\0\u1553\0\u1588\0\u15bd\0\u15f2"+
    "\0\u1627\0\u165c\0\u1691\0\u16c6\0\u16fb\0\u1730\0\u1765\0\u179a"+
    "\0\u0173\0\u17cf\0\u0173\0\u1804\0\u0173\0\u1839\0\u186e\0\u18a3"+
    "\0\u0173\0\u18d8\0\u190d\0\u0173\0\u1942\0\u0173\0\u1977\0\u19ac"+
    "\0\u19e1\0\u1a16\0\u1a4b\0\u0173\0\u1a80\0\u0173\0\u1ab5\0\u0173"+
    "\0\u1aea\0\u1b1f\0\u1b54\0\u0173\0\u1b89\0\u0173\0\u1bbe\0\u0173"+
    "\0\u1bf3\0\u1c28\0\u0173\0\u1c5d\0\u0173\0\u1c92\0\u1cc7\0\u0173"+
    "\0\u1cfc\0\u0173";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[226];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\1\11\2\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\16\1\31\1\32\1\33\2\17\1\34\1\35"+
    "\3\16\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\15\1\17\2\10"+
    "\2\62\1\63\34\62\1\64\2\62\2\65\17\62\1\66"+
    "\1\67\42\12\1\70\6\12\1\71\13\12\2\72\1\0"+
    "\62\72\10\73\2\74\1\73\2\74\2\73\1\74\1\73"+
    "\1\74\2\73\1\74\1\73\2\74\5\73\1\74\23\73"+
    "\2\74\2\73\10\75\2\76\1\75\2\76\2\75\1\76"+
    "\1\75\1\76\2\75\1\76\1\75\2\76\5\75\1\77"+
    "\23\75\1\76\1\77\2\75\2\100\1\0\5\100\2\101"+
    "\1\100\2\101\2\100\1\101\1\100\1\101\2\100\1\101"+
    "\1\100\2\101\5\100\1\101\23\100\2\101\2\100\67\0"+
    "\1\12\66\0\1\102\61\0\1\103\4\104\30\105\1\104"+
    "\1\0\10\104\1\0\10\104\2\105\3\0\1\106\4\107"+
    "\30\110\1\107\1\0\10\107\1\0\10\107\2\110\3\0"+
    "\1\111\6\112\1\113\15\112\2\113\5\112\1\113\1\114"+
    "\1\0\10\112\1\0\11\112\1\113\3\0\1\106\4\107"+
    "\4\110\1\115\23\110\1\107\1\0\10\107\1\0\10\107"+
    "\2\110\3\0\1\106\4\107\7\110\1\116\3\110\1\117"+
    "\6\110\1\120\5\110\1\107\1\0\10\107\1\0\10\107"+
    "\2\110\3\0\1\106\4\107\7\110\1\121\20\110\1\107"+
    "\1\0\10\107\1\0\10\107\2\110\3\0\1\106\4\107"+
    "\7\110\1\122\20\110\1\107\1\0\10\107\1\0\10\107"+
    "\2\110\3\0\1\106\4\107\24\110\1\123\3\110\1\107"+
    "\1\0\10\107\1\0\10\107\2\110\3\0\1\106\4\107"+
    "\13\110\1\124\14\110\1\107\1\0\10\107\1\0\10\107"+
    "\2\110\3\0\1\106\4\107\10\110\1\125\17\110\1\107"+
    "\1\0\10\107\1\0\10\107\2\110\3\0\1\106\4\107"+
    "\15\110\1\126\12\110\1\107\1\0\10\107\1\0\10\107"+
    "\2\110\3\0\1\106\4\107\10\110\1\127\3\110\1\130"+
    "\13\110\1\107\1\0\10\107\1\0\10\107\2\110\3\0"+
    "\1\106\4\107\24\110\1\131\1\110\1\132\1\110\1\107"+
    "\1\0\10\107\1\0\10\107\2\110\3\0\1\106\4\107"+
    "\3\110\1\133\4\110\1\134\17\110\1\107\1\0\10\107"+
    "\1\0\10\107\2\110\3\0\1\106\4\107\4\110\1\135"+
    "\5\110\1\136\3\110\1\137\11\110\1\107\1\0\10\107"+
    "\1\0\10\107\2\110\3\0\1\106\4\107\4\110\1\140"+
    "\23\110\1\107\1\0\10\107\1\0\10\107\2\110\3\0"+
    "\1\106\4\107\26\110\1\141\1\110\1\107\1\0\10\107"+
    "\1\0\10\107\2\110\3\0\1\111\6\112\1\113\3\112"+
    "\1\142\5\112\1\143\3\112\2\113\5\112\1\113\1\114"+
    "\1\0\10\112\1\0\11\112\1\113\53\0\1\144\63\0"+
    "\1\145\2\0\1\146\64\0\1\147\11\0\2\63\1\150"+
    "\34\63\1\0\2\63\2\151\17\63\1\0\1\63\1\0"+
    "\1\152\1\153\62\0\1\154\1\155\1\156\1\155\6\154"+
    "\1\157\1\154\1\160\5\154\1\161\1\162\1\163\5\154"+
    "\1\164\4\154\1\165\23\154\1\166\1\154\51\0\1\167"+
    "\56\0\1\170\21\0\2\72\1\171\62\72\1\73\1\172"+
    "\4\173\2\73\2\74\1\73\2\74\2\73\1\74\1\73"+
    "\1\74\2\73\1\74\1\73\2\74\5\73\1\74\1\173"+
    "\1\73\10\173\1\73\10\173\2\74\2\73\10\75\2\76"+
    "\1\75\2\76\2\75\1\76\1\75\1\76\2\75\1\76"+
    "\1\75\2\76\5\75\1\76\23\75\2\76\3\75\1\174"+
    "\4\175\2\75\2\76\1\75\2\76\2\75\1\76\1\75"+
    "\1\76\2\75\1\76\1\75\2\76\5\75\1\77\1\175"+
    "\1\75\10\175\1\75\10\175\1\76\1\77\2\75\10\0"+
    "\2\176\1\0\2\176\2\0\1\176\1\0\1\176\2\0"+
    "\1\176\1\0\2\176\5\0\1\176\23\0\2\176\2\0"+
    "\2\102\1\177\62\102\2\0\1\200\64\0\1\201\64\0"+
    "\1\202\72\0\1\203\15\0\2\203\5\0\1\203\24\0"+
    "\1\203\3\0\1\106\4\107\5\110\1\204\22\110\1\107"+
    "\1\0\10\107\1\0\10\107\2\110\3\0\1\106\4\107"+
    "\15\110\1\205\12\110\1\107\1\0\10\107\1\0\10\107"+
    "\2\110\3\0\1\106\4\107\23\110\1\206\4\110\1\107"+
    "\1\0\10\107\1\0\10\107\2\110\3\0\1\106\4\107"+
    "\10\110\1\207\17\110\1\107\1\0\10\107\1\0\10\107"+
    "\2\110\3\0\1\210\4\211\30\110\1\211\1\0\10\211"+
    "\1\0\10\211\2\110\3\0\1\106\4\107\7\110\1\212"+
    "\20\110\1\107\1\0\10\107\1\0\10\107\2\110\3\0"+
    "\1\213\4\214\30\110\1\214\1\0\10\214\1\0\10\214"+
    "\2\110\3\0\1\106\4\107\15\110\1\215\12\110\1\107"+
    "\1\0\10\107\1\0\10\107\2\110\3\0\1\106\4\107"+
    "\3\110\1\216\24\110\1\107\1\0\10\107\1\0\10\107"+
    "\2\110\3\0\1\106\4\107\24\110\1\217\3\110\1\107"+
    "\1\0\10\107\1\0\10\107\2\110\3\0\1\106\4\107"+
    "\12\110\1\220\15\110\1\107\1\0\10\107\1\0\10\107"+
    "\2\110\3\0\1\106\4\107\15\110\1\221\12\110\1\107"+
    "\1\0\10\107\1\0\10\107\2\110\3\0\1\106\4\107"+
    "\22\110\1\222\5\110\1\107\1\0\10\107\1\0\10\107"+
    "\2\110\3\0\1\106\4\107\13\110\1\223\14\110\1\107"+
    "\1\0\10\107\1\0\10\107\2\110\3\0\1\106\4\107"+
    "\10\110\1\224\17\110\1\107\1\0\10\107\1\0\10\107"+
    "\2\110\3\0\1\106\4\107\7\110\1\225\20\110\1\107"+
    "\1\0\10\107\1\0\10\107\2\110\3\0\1\226\4\227"+
    "\15\110\1\230\12\110\1\227\1\0\10\227\1\0\10\227"+
    "\2\110\3\0\1\106\4\107\4\110\1\231\23\110\1\107"+
    "\1\0\10\107\1\0\10\107\2\110\3\0\1\232\4\233"+
    "\30\110\1\233\1\0\10\233\1\0\10\233\2\110\3\0"+
    "\1\106\4\107\17\110\1\234\10\110\1\107\1\0\10\107"+
    "\1\0\10\107\2\110\3\0\1\106\4\107\17\110\1\235"+
    "\10\110\1\107\1\0\10\107\1\0\10\107\2\110\4\0"+
    "\1\153\63\0\1\236\1\156\1\236\62\0\1\156\1\0"+
    "\1\156\63\0\1\237\64\0\1\240\72\0\1\203\13\0"+
    "\1\241\1\0\2\203\5\0\1\203\24\0\1\203\3\0"+
    "\1\242\4\243\30\110\1\243\1\0\10\243\1\0\10\243"+
    "\2\110\3\0\1\244\4\245\30\110\1\245\1\0\10\245"+
    "\1\0\10\245\2\110\3\0\1\246\4\247\30\110\1\247"+
    "\1\0\10\247\1\0\10\247\2\110\3\0\1\106\4\107"+
    "\10\110\1\250\17\110\1\107\1\0\10\107\1\0\10\107"+
    "\2\110\4\0\1\211\63\0\1\106\4\107\10\110\1\251"+
    "\17\110\1\107\1\0\10\107\1\0\10\107\2\110\4\0"+
    "\1\214\63\0\1\252\4\253\30\110\1\253\1\0\10\253"+
    "\1\0\10\253\2\110\3\0\1\106\4\107\12\110\1\254"+
    "\15\110\1\107\1\0\10\107\1\0\10\107\2\110\3\0"+
    "\1\106\4\107\17\110\1\255\10\110\1\107\1\0\10\107"+
    "\1\0\10\107\2\110\3\0\1\106\4\107\13\110\1\256"+
    "\14\110\1\107\1\0\10\107\1\0\10\107\2\110\3\0"+
    "\1\106\4\107\13\110\1\257\14\110\1\107\1\0\10\107"+
    "\1\0\10\107\2\110\3\0\1\106\4\107\13\110\1\260"+
    "\14\110\1\107\1\0\10\107\1\0\10\107\2\110\3\0"+
    "\1\106\4\107\4\110\1\261\23\110\1\107\1\0\10\107"+
    "\1\0\10\107\2\110\3\0\1\106\4\107\12\110\1\262"+
    "\15\110\1\107\1\0\10\107\1\0\10\107\2\110\3\0"+
    "\1\106\4\107\3\110\1\263\24\110\1\107\1\0\10\107"+
    "\1\0\10\107\2\110\4\0\1\227\63\0\1\106\4\107"+
    "\20\110\1\264\7\110\1\107\1\0\10\107\1\0\10\107"+
    "\2\110\3\0\1\106\4\107\22\110\1\265\5\110\1\107"+
    "\1\0\10\107\1\0\10\107\2\110\4\0\1\233\63\0"+
    "\1\106\4\107\15\110\1\266\12\110\1\107\1\0\10\107"+
    "\1\0\10\107\2\110\3\0\1\106\4\107\10\110\1\267"+
    "\17\110\1\107\1\0\10\107\1\0\10\107\2\110\3\0"+
    "\1\270\6\271\1\0\15\271\2\0\5\271\1\0\1\271"+
    "\1\0\10\271\1\0\11\271\5\0\1\243\64\0\1\245"+
    "\64\0\1\247\63\0\1\272\4\273\30\110\1\273\1\0"+
    "\10\273\1\0\10\273\2\110\3\0\1\274\4\275\30\110"+
    "\1\275\1\0\10\275\1\0\10\275\2\110\4\0\1\253"+
    "\63\0\1\106\4\107\12\110\1\276\15\110\1\107\1\0"+
    "\10\107\1\0\10\107\2\110\3\0\1\106\4\107\4\110"+
    "\1\277\23\110\1\107\1\0\10\107\1\0\10\107\2\110"+
    "\3\0\1\300\4\301\30\110\1\301\1\0\10\301\1\0"+
    "\10\301\2\110\3\0\1\106\4\107\4\110\1\302\23\110"+
    "\1\107\1\0\10\107\1\0\10\107\2\110\3\0\1\303"+
    "\4\304\30\110\1\304\1\0\10\304\1\0\10\304\2\110"+
    "\3\0\1\305\4\306\30\110\1\306\1\0\10\306\1\0"+
    "\10\306\2\110\3\0\1\106\4\107\13\110\1\307\14\110"+
    "\1\107\1\0\10\107\1\0\10\107\2\110\3\0\1\106"+
    "\4\107\15\110\1\310\12\110\1\107\1\0\10\107\1\0"+
    "\10\107\2\110\3\0\1\106\4\107\21\110\1\311\6\110"+
    "\1\107\1\0\10\107\1\0\10\107\2\110\3\0\1\106"+
    "\4\107\10\110\1\312\17\110\1\107\1\0\10\107\1\0"+
    "\10\107\2\110\3\0\1\313\4\314\30\110\1\314\1\0"+
    "\10\314\1\0\10\314\2\110\3\0\1\106\4\107\13\110"+
    "\1\315\14\110\1\107\1\0\10\107\1\0\10\107\2\110"+
    "\4\0\1\316\64\0\1\273\64\0\1\275\63\0\1\317"+
    "\4\320\30\110\1\320\1\0\10\320\1\0\10\320\2\110"+
    "\3\0\1\106\4\107\25\110\1\321\2\110\1\107\1\0"+
    "\10\107\1\0\10\107\2\110\4\0\1\301\63\0\1\106"+
    "\4\107\5\110\1\322\22\110\1\107\1\0\10\107\1\0"+
    "\10\107\2\110\4\0\1\304\64\0\1\306\63\0\1\323"+
    "\4\324\30\110\1\324\1\0\10\324\1\0\10\324\2\110"+
    "\3\0\1\325\4\326\30\110\1\326\1\0\10\326\1\0"+
    "\10\326\2\110\3\0\1\327\4\330\30\110\1\330\1\0"+
    "\10\330\1\0\10\330\2\110\3\0\1\106\4\107\10\110"+
    "\1\331\17\110\1\107\1\0\10\107\1\0\10\107\2\110"+
    "\4\0\1\314\63\0\1\332\4\333\30\110\1\333\1\0"+
    "\10\333\1\0\10\333\2\110\4\0\1\320\63\0\1\334"+
    "\4\335\30\110\1\335\1\0\10\335\1\0\10\335\2\110"+
    "\3\0\1\106\4\107\12\110\1\336\15\110\1\107\1\0"+
    "\10\107\1\0\10\107\2\110\4\0\1\324\64\0\1\326"+
    "\64\0\1\330\63\0\1\337\4\340\30\110\1\340\1\0"+
    "\10\340\1\0\10\340\2\110\4\0\1\333\64\0\1\335"+
    "\63\0\1\341\4\342\30\110\1\342\1\0\10\342\1\0"+
    "\10\342\2\110\4\0\1\340\64\0\1\342\62\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7473];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\1\11\1\1\1\11\1\1\1\11\22\1\4\11"+
    "\1\1\11\11\2\1\3\11\1\1\1\0\1\11\6\1"+
    "\1\11\1\0\1\11\2\0\1\11\3\1\1\11\1\0"+
    "\1\1\1\11\1\0\1\1\1\11\1\0\1\1\25\0"+
    "\6\11\1\1\2\0\2\11\2\1\13\11\1\1\1\11"+
    "\1\1\6\11\5\0\1\1\1\11\1\0\1\1\1\11"+
    "\11\0\1\1\1\11\2\0\1\1\1\11\3\0\2\11"+
    "\1\0\1\1\1\11\1\1\1\11\1\1\1\11\2\0"+
    "\1\1\1\11\14\0\1\1\1\11\1\1\1\11\1\1"+
    "\1\11\2\0\1\1\1\11\1\0\1\1\1\11\1\1"+
    "\1\11\4\0\1\1\1\11\1\0\1\11\1\1\1\11"+
    "\2\0\1\1\1\11\1\1\1\11\1\1\1\11\1\0"+
    "\1\1\1\11\1\1\1\11\1\0\1\1\1\11\1\1"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[226];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
   StringBuffer string = new StringBuffer();
   int nesting = 0, cbegin = 0, rbegin = 0;
   Stack<Integer> ccomment = new Stack<Integer>(), rcomment = new Stack<Integer>();

   public Symbol symbol(int type) {
      return new Symbol(type, yyline + 1, yycolumn + 1);
   }
   public Symbol symbol(int type, String value) {
      return new Symbol(type, yyline + 1, yycolumn + 1, value);
   }
   public Symbol symbol(int type, String value, int y, int x) {
      return new Symbol(type, y + 1, x + 1, value);
   }
   public Symbol symbol(int type, int value) {
      return new Symbol(type, yyline + 1, yycolumn + 1, value);
   }
   public Symbol symbol(int type, int value, int y, int x) {
      return new Symbol(type, y + 1, x + 1, value);
   }
   public Symbol symbol(int type, float value) {
      return new Symbol(type, yyline + 1, yycolumn + 1, value);
   }
   public Symbol symbol(int type, float value, int y, int x) {
      return new Symbol(type, y + 1, x + 1, value);
   }
   public String toPoint(int pt) {
      if(pt < 10)
         return pt + "";
      else if(pt == 10)
         return "a";
      else if(pt == 11)
         return "b";
      else if(pt == 12)
         return "c";
      else if(pt == 13)
         return "d";
      else if(pt == 14)
         return "e";
      else if(pt == 15)
         return "f";
      return "0";
   }
   public String toVSOPString(String text) {
      int point = text.charAt(0);
      if(point > 126 || point < 32) {
         return "\\x" + toPoint(point / 16) + toPoint(point % 16);
      } else
         return text;
   }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  VSOPExtendedParser(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 168) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(ERROR); yypushback(1);
            }
          case 86: break;
          case 2: 
            { /* ignore */
            }
          case 87: break;
          case 3: 
            { return symbol(SymbolValue.DIV);
            }
          case 88: break;
          case 4: 
            { return symbol(SymbolValue.TILDE);
            }
          case 89: break;
          case 5: 
            { return symbol(SymbolValue.DOT);
            }
          case 90: break;
          case 6: 
            { cbegin = yycolumn; rbegin = yyline; string.setLength(0); yybegin(STRING); string.append('"');
            }
          case 91: break;
          case 7: 
            { return symbol(SymbolValue.LBRACE);
            }
          case 92: break;
          case 8: 
            { return symbol(SymbolValue.RBRACE);
            }
          case 93: break;
          case 9: 
            { return symbol(SymbolValue.LPAR);
            }
          case 94: break;
          case 10: 
            { return symbol(SymbolValue.RPAR);
            }
          case 95: break;
          case 11: 
            { return symbol(SymbolValue.COLON);
            }
          case 96: break;
          case 12: 
            { return symbol(SymbolValue.SEMICOLON);
            }
          case 97: break;
          case 13: 
            { return symbol(SymbolValue.COMMA);
            }
          case 98: break;
          case 14: 
            { return symbol(SymbolValue.PLUS);
            }
          case 99: break;
          case 15: 
            { return symbol(SymbolValue.MINUS);
            }
          case 100: break;
          case 16: 
            { return symbol(SymbolValue.TIMES);
            }
          case 101: break;
          case 17: 
            { return symbol(SymbolValue.POW);
            }
          case 102: break;
          case 18: 
            { return symbol(SymbolValue.EQUAL);
            }
          case 103: break;
          case 19: 
            { return symbol(SymbolValue.LOWER);
            }
          case 104: break;
          case 20: 
            { return symbol(SymbolValue.GREATER);
            }
          case 105: break;
          case 21: 
            { return symbol(SymbolValue.SWITCH);
            }
          case 106: break;
          case 22: 
            { return symbol(SymbolValue.LBRK);
            }
          case 107: break;
          case 23: 
            { return symbol(SymbolValue.RBRK);
            }
          case 108: break;
          case 24: 
            { string.append(toVSOPString(yytext()));
            }
          case 109: break;
          case 25: 
            { yybegin(YYINITIAL); string.append('"'); return symbol(SymbolValue.STRING_LITERAL, string.toString(), rbegin, cbegin);
            }
          case 110: break;
          case 26: 
            { throw new java.io.IOException((yyline+1) + ":" + (yycolumn+1) + ": lexical error <" + yytext() + "> is a raw null character in a string.");
            }
          case 111: break;
          case 27: 
            { String err = yytext(); err = err.replace("\r", ""); err = err.replace("\n", ""); yybegin(YYINITIAL); throw new java.io.IOException((yyline+1) + ":" + (yycolumn+1) + ": lexical error <" + err + "> is not valid VSOP syntax.");
            }
          case 112: break;
          case 28: 
            { yybegin(YYINITIAL); throw new java.io.IOException((rbegin+1) + ":" + (cbegin+1) + ": lexical error <0x" + yytext() + "> is not a valid non-decimal number notation.");
            }
          case 113: break;
          case 29: 
            { yybegin(YYINITIAL); throw new java.io.IOException((rbegin+1) + ":" + (cbegin+1) + ": lexical error <0b" + yytext() + "> is not a valid non-decimal number notation.");
            }
          case 114: break;
          case 30: 
            { yypushback(1); yybegin(STRING); throw new java.io.IOException((yyline+1) + ":" + (yycolumn-1) + ": lexical error <\\x" + yytext() + "> is not a valid ASCII byte description.");
            }
          case 115: break;
          case 31: 
            { 
            }
          case 116: break;
          case 32: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);
            { return symbol(SymbolValue.TYPE_IDENTIFIER, yytext());
            }
          case 117: break;
          case 33: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);
            { return symbol(SymbolValue.OBJECT_IDENTIFIER, yytext());
            }
          case 118: break;
          case 34: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);
            { return symbol(SymbolValue.INTEGER_LITERAL, Integer.parseInt(yytext()));
            }
          case 119: break;
          case 35: 
            { cbegin = yycolumn; rbegin = yyline; yybegin(BIN);
            }
          case 120: break;
          case 36: 
            { cbegin = yycolumn; rbegin = yyline; yybegin(HEX);
            }
          case 121: break;
          case 37: 
            { ccomment.push(yycolumn); rcomment.push(yyline); nesting++; yybegin(COMMENT);
            }
          case 122: break;
          case 38: 
            { return symbol(SymbolValue.ASSIGN);
            }
          case 123: break;
          case 39: 
            { return symbol(SymbolValue.LOWER_EQUAL);
            }
          case 124: break;
          case 40: 
            { return symbol(SymbolValue.GREATER_EQUAL);
            }
          case 125: break;
          case 41: 
            { String err = yytext(); err = err.replace("\r", ""); err = err.replace("\n", ""); throw new java.io.IOException((yyline+1) + ":" + (yycolumn+1+yytext().trim().length()) + ": lexical error <" + err + "> is not a well-escaped possibly multi-line string.");
            }
          case 126: break;
          case 42: 
            { throw new java.io.IOException((yyline+1) + ":" + (yycolumn+1) + ": lexical error <" + yytext() + "> is not a valid espace character in a string.");
            }
          case 127: break;
          case 43: 
            { /* ignore still in string multi-line */
            }
          case 128: break;
          case 44: 
            { string.append("\\x0a");
            }
          case 129: break;
          case 45: 
            { string.append("\\x08");
            }
          case 130: break;
          case 46: 
            { yybegin(BYTESTRING); string.append("\\x");
            }
          case 131: break;
          case 47: 
            { string.append("\\x09");
            }
          case 132: break;
          case 48: 
            { string.append("\\x0c");
            }
          case 133: break;
          case 49: 
            { string.append("\\x0d");
            }
          case 134: break;
          case 50: 
            { string.append("\\\"");
            }
          case 135: break;
          case 51: 
            { string.append("\\\\");
            }
          case 136: break;
          case 52: 
            { ccomment.push(yycolumn); rcomment.push(yyline); nesting++;
            }
          case 137: break;
          case 53: 
            { ccomment.pop(); rcomment.pop(); nesting--; if(nesting == 0) yybegin(YYINITIAL);
            }
          case 138: break;
          case 54: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);
            { yybegin(YYINITIAL); return symbol(SymbolValue.INTEGER_LITERAL, Integer.parseInt(yytext(), 16), rbegin, cbegin);
            }
          case 139: break;
          case 55: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);
            { yybegin(YYINITIAL); return symbol(SymbolValue.INTEGER_LITERAL, Integer.parseInt(yytext(), 2), rbegin, cbegin);
            }
          case 140: break;
          case 56: 
            { yybegin(STRING); string.append(yytext());
            }
          case 141: break;
          case 57: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -2);
            { return symbol(SymbolValue.TYPE_IDENTIFIER, yytext());
            }
          case 142: break;
          case 58: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -2);
            { return symbol(SymbolValue.OBJECT_IDENTIFIER, yytext());
            }
          case 143: break;
          case 59: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -2);
            { return symbol(SymbolValue.INTEGER_LITERAL, Integer.parseInt(yytext()));
            }
          case 144: break;
          case 60: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 2);
            { return symbol(SymbolValue.DO);
            }
          case 145: break;
          case 61: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 2);
            { return symbol(SymbolValue.OR);
            }
          case 146: break;
          case 62: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 2);
            { return symbol(SymbolValue.IN);
            }
          case 147: break;
          case 63: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 2);
            { return symbol(SymbolValue.IF);
            }
          case 148: break;
          case 64: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -2);
            { yybegin(YYINITIAL); return symbol(SymbolValue.INTEGER_LITERAL, Integer.parseInt(yytext(), 16), rbegin, cbegin);
            }
          case 149: break;
          case 65: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -2);
            { yybegin(YYINITIAL); return symbol(SymbolValue.INTEGER_LITERAL, Integer.parseInt(yytext(), 2), rbegin, cbegin);
            }
          case 150: break;
          case 66: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 3);
            { return symbol(SymbolValue.AND);
            }
          case 151: break;
          case 67: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 3);
            { return symbol(SymbolValue.NOT);
            }
          case 152: break;
          case 68: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 3);
            { return symbol(SymbolValue.NEW);
            }
          case 153: break;
          case 69: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 3);
            { return symbol(SymbolValue.LET);
            }
          case 154: break;
          case 70: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);
            { return symbol(SymbolValue.FLOAT_LITERAL, Float.parseFloat(yytext()));
            }
          case 155: break;
          case 71: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 4);
            { return symbol(SymbolValue.NULL);
            }
          case 156: break;
          case 72: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 4);
            { return symbol(SymbolValue.BOOL);
            }
          case 157: break;
          case 73: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 4);
            { return symbol(SymbolValue.ELSE);
            }
          case 158: break;
          case 74: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 4);
            { return symbol(SymbolValue.TRUE);
            }
          case 159: break;
          case 75: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 4);
            { return symbol(SymbolValue.THEN);
            }
          case 160: break;
          case 76: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 4);
            { return symbol(SymbolValue.UNIT);
            }
          case 161: break;
          case 77: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -2);
            { return symbol(SymbolValue.FLOAT_LITERAL, Float.parseFloat(yytext()));
            }
          case 162: break;
          case 78: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 5);
            { return symbol(SymbolValue.CLASS);
            }
          case 163: break;
          case 79: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 5);
            { return symbol(SymbolValue.FALSE);
            }
          case 164: break;
          case 80: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 5);
            { return symbol(SymbolValue.FLOAT);
            }
          case 165: break;
          case 81: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 5);
            { return symbol(SymbolValue.INT32);
            }
          case 166: break;
          case 82: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 5);
            { return symbol(SymbolValue.WHILE);
            }
          case 167: break;
          case 83: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 6);
            { return symbol(SymbolValue.STRING);
            }
          case 168: break;
          case 84: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 6);
            { return symbol(SymbolValue.ISNULL);
            }
          case 169: break;
          case 85: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 7);
            { return symbol(SymbolValue.EXTENDS);
            }
          case 170: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
