
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package be.ac.ulg.vsop.parser;

import java.util.Stack;
import java_cup.runtime.*;
import be.ac.ulg.vsop.lexer.Symbol;
import be.ac.ulg.vsop.parser.SymbolValue;
import be.ac.ulg.vsop.parser.ASTNode;
import be.ac.ulg.vsop.parser.Parser;
import be.ac.ulg.vsop.analyzer.Analyzer;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class VSOPExtendedParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SymbolValue.class;
}

  /** Default constructor. */
  @Deprecated
  public VSOPExtendedParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public VSOPExtendedParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public VSOPExtendedParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\137\000\002\002\004\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\002\003\000\002\002\005\000" +
    "\002\002\005\000\002\024\005\000\002\024\006\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\004\004\000" +
    "\002\004\003\000\002\004\005\000\002\004\004\000\002" +
    "\005\007\000\002\005\011\000\002\006\004\000\002\006" +
    "\004\000\002\006\002\000\002\007\010\000\002\007\011" +
    "\000\002\010\003\000\002\010\002\000\002\011\004\000" +
    "\002\012\012\000\002\013\005\000\002\013\003\000\002" +
    "\013\002\000\002\014\005\000\002\014\003\000\002\015" +
    "\005\000\002\015\007\000\002\016\007\000\002\016\005" +
    "\000\002\017\003\000\002\017\005\000\002\021\005\000" +
    "\002\021\003\000\002\021\002\000\002\022\005\000\002" +
    "\022\003\000\002\026\006\000\002\026\010\000\002\020" +
    "\006\000\002\020\010\000\002\020\006\000\002\020\012" +
    "\000\002\020\006\000\002\020\007\000\002\020\006\000" +
    "\002\020\005\000\002\020\004\000\002\020\004\000\002" +
    "\020\004\000\002\020\005\000\002\020\005\000\002\020" +
    "\005\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\020\005\000\002\020\005\000\002\020\005\000\002" +
    "\020\004\000\002\020\004\000\002\020\006\000\002\020" +
    "\010\000\002\020\012\000\002\020\005\000\002\020\005" +
    "\000\002\020\004\000\002\020\007\000\002\020\003\000" +
    "\002\020\004\000\002\020\005\000\002\020\006\000\002" +
    "\020\006\000\002\020\003\000\002\020\004\000\002\020" +
    "\005\000\002\020\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\277\000\006\006\006\067\007\001\002\000\010\002" +
    "\uffeb\006\006\067\007\001\002\000\004\002\300\001\002" +
    "\000\004\051\012\001\002\000\004\052\010\001\002\000" +
    "\010\002\uffe9\006\006\067\007\001\002\000\004\002\uffea" +
    "\001\002\000\006\011\014\026\013\001\002\000\012\027" +
    "\uffe4\035\020\036\022\066\017\001\002\000\004\051\015" +
    "\001\002\000\004\026\016\001\002\000\012\027\uffe4\035" +
    "\020\036\022\066\017\001\002\000\006\035\ufff3\050\ufff3" +
    "\001\002\000\006\035\ufff5\050\ufff5\001\002\000\004\027" +
    "\275\001\002\000\006\035\ufff4\050\ufff4\001\002\000\012" +
    "\027\uffe4\035\020\036\022\066\017\001\002\000\012\027" +
    "\uffe4\035\020\036\022\066\017\001\002\000\006\035\027" +
    "\050\026\001\002\000\006\030\246\032\247\001\002\000" +
    "\004\050\030\001\002\000\004\032\031\001\002\000\016" +
    "\005\035\015\036\022\033\051\040\054\032\061\041\001" +
    "\002\000\070\004\uffff\007\uffff\010\uffff\014\uffff\023\uffff" +
    "\026\uffff\027\uffff\030\uffff\031\uffff\032\uffff\033\uffff\034" +
    "\uffff\035\uffff\036\uffff\037\uffff\040\uffff\041\uffff\042\uffff" +
    "\043\uffff\044\uffff\045\uffff\046\uffff\056\uffff\057\uffff\060" +
    "\uffff\064\uffff\065\uffff\001\002\000\070\004\ufffe\007\ufffe" +
    "\010\ufffe\014\ufffe\023\ufffe\026\ufffe\027\ufffe\030\ufffe\031" +
    "\ufffe\032\ufffe\033\ufffe\034\ufffe\035\ufffe\036\ufffe\037\ufffe" +
    "\040\ufffe\041\ufffe\042\ufffe\043\ufffe\044\ufffe\045\ufffe\046" +
    "\ufffe\056\ufffe\057\ufffe\060\ufffe\064\ufffe\065\ufffe\001\002" +
    "\000\010\033\uffe0\045\047\064\045\001\002\000\070\004" +
    "\000\007\000\010\000\014\000\023\000\026\000\027\000" +
    "\030\000\031\000\032\000\033\000\034\000\035\000\036" +
    "\000\037\000\040\000\041\000\042\000\043\000\044\000" +
    "\045\000\046\000\056\000\057\000\060\000\064\000\065" +
    "\000\001\002\000\070\004\ufffd\007\ufffd\010\ufffd\014\ufffd" +
    "\023\ufffd\026\ufffd\027\ufffd\030\ufffd\031\ufffd\032\ufffd\033" +
    "\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd\040\ufffd\041\ufffd" +
    "\042\ufffd\043\ufffd\044\ufffd\045\ufffd\046\ufffd\056\ufffd\057" +
    "\ufffd\060\ufffd\064\ufffd\065\ufffd\001\002\000\022\014\ufffa" +
    "\026\ufffa\031\ufffa\032\ufffa\033\ufffa\034\ufffa\045\ufffa\064" +
    "\042\001\002\000\070\004\ufffb\007\ufffb\010\ufffb\014\ufffb" +
    "\023\ufffb\026\ufffb\027\ufffb\030\ufffb\031\ufffb\032\ufffb\033" +
    "\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb\040\ufffb\041\ufffb" +
    "\042\ufffb\043\ufffb\044\ufffb\045\ufffb\046\ufffb\056\ufffb\057" +
    "\ufffb\060\ufffb\064\ufffb\065\ufffb\001\002\000\070\004\ufffc" +
    "\007\ufffc\010\ufffc\014\ufffc\023\ufffc\026\ufffc\027\ufffc\030" +
    "\ufffc\031\ufffc\032\ufffc\033\ufffc\034\ufffc\035\ufffc\036\ufffc" +
    "\037\ufffc\040\ufffc\041\ufffc\042\ufffc\043\ufffc\044\ufffc\045" +
    "\ufffc\046\ufffc\056\ufffc\057\ufffc\060\ufffc\064\ufffc\065\ufffc" +
    "\001\002\000\004\065\043\001\002\000\022\014\ufff9\026" +
    "\ufff9\031\ufff9\032\ufff9\033\ufff9\034\ufff9\045\ufff9\064\ufff9" +
    "\001\002\000\010\014\uffe1\033\uffe1\034\uffe1\001\002\000" +
    "\004\065\210\001\002\000\004\033\245\001\002\000\046" +
    "\012\062\013\055\016\070\017\064\020\066\021\052\024" +
    "\053\025\051\026\057\030\073\036\063\047\065\050\074" +
    "\052\060\053\072\062\067\063\054\070\071\001\002\000" +
    "\060\004\uffa6\007\uffa6\010\uffa6\014\uffa6\023\uffa6\027\uffa6" +
    "\031\uffa6\032\uffa6\033\uffa6\034\uffa6\035\uffa6\036\uffa6\037" +
    "\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6\046\uffa6" +
    "\056\uffa6\057\uffa6\060\uffa6\065\uffa6\001\002\000\046\012" +
    "\062\013\055\016\070\017\064\020\066\021\052\024\053" +
    "\025\051\026\057\030\073\036\063\047\065\050\074\052" +
    "\060\053\072\062\067\063\054\070\071\001\002\000\046" +
    "\012\062\013\055\016\070\017\064\020\066\021\052\024" +
    "\053\025\051\026\057\030\073\036\063\047\065\050\074" +
    "\052\060\053\072\062\067\063\054\070\071\001\002\000" +
    "\060\004\uffef\007\uffef\010\uffef\014\uffef\023\uffef\027\uffef" +
    "\031\uffef\032\uffef\033\uffef\034\uffef\035\uffef\036\uffef\037" +
    "\uffef\040\uffef\041\uffef\042\uffef\043\uffef\044\uffef\046\uffef" +
    "\056\uffef\057\uffef\060\uffef\065\uffef\001\002\000\046\012" +
    "\062\013\055\016\070\017\064\020\066\021\052\024\053" +
    "\025\051\026\057\030\073\036\063\047\065\050\074\052" +
    "\060\053\072\062\067\063\054\070\071\001\002\000\046" +
    "\012\062\013\055\016\070\017\064\020\066\021\052\024" +
    "\053\025\051\026\057\030\073\036\063\047\065\050\074" +
    "\052\060\053\072\062\067\063\054\070\071\001\002\000" +
    "\060\004\uffa3\007\uffa3\010\uffa3\014\uffa3\023\uffa3\027\uffa3" +
    "\031\uffa3\032\uffa3\033\uffa3\034\uffa3\035\uffa3\036\uffa3\037" +
    "\uffa3\040\uffa3\041\uffa3\042\uffa3\043\uffa3\044\uffa3\046\uffa3" +
    "\056\uffa3\057\uffa3\060\uffa3\065\uffa3\001\002\000\046\012" +
    "\062\013\055\016\070\017\064\020\066\021\052\024\053" +
    "\025\051\026\057\030\073\036\063\047\065\050\074\052" +
    "\060\053\072\062\067\063\054\070\071\001\002\000\060" +
    "\004\ufff0\007\ufff0\010\ufff0\014\ufff0\023\ufff0\027\ufff0\031" +
    "\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0" +
    "\040\ufff0\041\ufff0\042\ufff0\043\ufff0\044\ufff0\046\ufff0\056" +
    "\ufff0\057\ufff0\060\ufff0\065\ufff0\001\002\000\060\004\105" +
    "\007\uffdf\010\uffdf\014\uffdf\023\uffdf\027\uffdf\031\uffdf\032" +
    "\uffdf\033\uffdf\034\uffdf\035\112\036\104\037\116\040\114" +
    "\041\106\042\111\043\107\044\121\046\113\056\110\057" +
    "\117\060\120\065\uffdf\001\002\000\060\004\uffee\007\uffee" +
    "\010\uffee\014\uffee\023\uffee\027\uffee\031\uffee\032\uffee\033" +
    "\uffee\034\uffee\035\uffee\036\uffee\037\uffee\040\uffee\041\uffee" +
    "\042\uffee\043\uffee\044\uffee\046\uffee\056\uffee\057\uffee\060" +
    "\uffee\065\uffee\001\002\000\046\012\062\013\055\016\070" +
    "\017\064\020\066\021\052\024\053\025\051\026\057\030" +
    "\073\036\063\047\065\050\074\052\060\053\072\062\067" +
    "\063\054\070\071\001\002\000\004\050\211\001\002\000" +
    "\060\004\ufff2\007\ufff2\010\ufff2\014\ufff2\023\ufff2\027\ufff2" +
    "\031\ufff2\032\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2\037" +
    "\ufff2\040\ufff2\041\ufff2\042\ufff2\043\ufff2\044\ufff2\046\ufff2" +
    "\056\ufff2\057\ufff2\060\ufff2\065\ufff2\001\002\000\016\005" +
    "\035\015\036\022\033\051\040\054\032\061\041\001\002" +
    "\000\060\004\ufff1\007\ufff1\010\ufff1\014\ufff1\023\ufff1\027" +
    "\ufff1\031\ufff1\032\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1" +
    "\037\ufff1\040\ufff1\041\ufff1\042\ufff1\043\ufff1\044\ufff1\046" +
    "\ufff1\056\ufff1\057\ufff1\060\ufff1\065\ufff1\001\002\000\046" +
    "\012\062\013\055\016\070\017\064\020\066\021\052\024" +
    "\053\025\051\026\057\030\073\036\063\047\065\050\074" +
    "\052\060\053\072\062\067\063\054\070\071\001\002\000" +
    "\004\050\167\001\002\000\060\004\uffed\007\uffed\010\uffed" +
    "\014\uffed\023\uffed\027\uffed\031\uffed\032\uffed\033\uffed\034" +
    "\uffed\035\uffed\036\uffed\037\uffed\040\uffed\041\uffed\042\uffed" +
    "\043\uffed\044\uffed\046\uffed\056\uffed\057\uffed\060\uffed\065" +
    "\uffed\001\002\000\050\012\062\013\055\016\070\017\064" +
    "\020\066\021\052\024\053\025\051\026\057\030\073\031" +
    "\165\036\063\047\065\050\074\052\060\053\072\062\067" +
    "\063\054\070\071\001\002\000\066\004\uffab\007\uffab\010" +
    "\uffab\014\uffab\023\uffab\027\uffab\030\077\031\uffab\032\uffab" +
    "\033\uffab\034\uffab\035\uffab\036\uffab\037\uffab\040\uffab\041" +
    "\uffab\042\uffab\043\uffab\044\uffab\045\047\046\uffab\056\uffab" +
    "\057\uffab\060\uffab\064\076\065\uffab\001\002\000\060\004" +
    "\uffc3\007\uffc3\010\uffc3\014\uffc3\023\uffc3\027\uffc3\031\uffc3" +
    "\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040" +
    "\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\046\uffc3\056\uffc3" +
    "\057\uffc3\060\uffc3\065\uffc3\001\002\000\046\012\062\013" +
    "\055\016\070\017\064\020\066\021\052\024\053\025\051" +
    "\026\057\030\073\036\063\047\065\050\074\052\060\053" +
    "\072\062\067\063\054\070\071\001\002\000\050\012\062" +
    "\013\055\016\070\017\064\020\066\021\052\024\053\025" +
    "\051\026\057\030\073\031\uffd0\036\063\047\065\050\074" +
    "\052\060\053\072\062\067\063\054\070\071\001\002\000" +
    "\062\004\uffaa\007\uffaa\010\uffaa\014\uffaa\023\uffaa\027\uffaa" +
    "\031\uffaa\032\uffaa\033\uffaa\034\uffaa\035\uffaa\036\uffaa\037" +
    "\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045\047" +
    "\046\uffaa\056\uffaa\057\uffaa\060\uffaa\065\uffaa\001\002\000" +
    "\060\004\uffc4\007\uffc4\010\uffc4\014\uffc4\023\uffc4\027\uffc4" +
    "\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037" +
    "\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4\046\uffc4" +
    "\056\uffc4\057\uffc4\060\uffc4\065\uffc4\001\002\000\004\031" +
    "\160\001\002\000\040\004\105\031\uffd1\034\115\035\112" +
    "\036\104\037\116\040\114\041\106\042\111\043\107\044" +
    "\121\046\113\056\110\057\117\060\120\001\002\000\046" +
    "\012\062\013\055\016\070\017\064\020\066\021\052\024" +
    "\053\025\051\026\057\030\073\036\063\047\065\050\074" +
    "\052\060\053\072\062\067\063\054\070\071\001\002\000" +
    "\046\012\062\013\055\016\070\017\064\020\066\021\052" +
    "\024\053\025\051\026\057\030\073\036\063\047\065\050" +
    "\074\052\060\053\072\062\067\063\054\070\071\001\002" +
    "\000\046\012\062\013\055\016\070\017\064\020\066\021" +
    "\052\024\053\025\051\026\057\030\073\036\063\047\065" +
    "\050\074\052\060\053\072\062\067\063\054\070\071\001" +
    "\002\000\050\012\062\013\055\016\070\017\064\020\066" +
    "\021\052\024\053\025\051\026\057\030\073\036\063\047" +
    "\065\050\074\051\145\052\060\053\072\062\067\063\054" +
    "\070\071\001\002\000\046\012\062\013\055\016\070\017" +
    "\064\020\066\021\052\024\053\025\051\026\057\030\073" +
    "\036\063\047\065\050\074\052\060\053\072\062\067\063" +
    "\054\070\071\001\002\000\046\012\062\013\055\016\070" +
    "\017\064\020\066\021\052\024\053\025\051\026\057\030" +
    "\073\036\063\047\065\050\074\052\060\053\072\062\067" +
    "\063\054\070\071\001\002\000\046\012\062\013\055\016" +
    "\070\017\064\020\066\021\052\024\053\025\051\026\057" +
    "\030\073\036\063\047\065\050\074\052\060\053\072\062" +
    "\067\063\054\070\071\001\002\000\004\050\133\001\002" +
    "\000\046\012\062\013\055\016\070\017\064\020\066\021" +
    "\052\024\053\025\051\026\057\030\073\036\063\047\065" +
    "\050\074\052\060\053\072\062\067\063\054\070\071\001" +
    "\002\000\046\012\062\013\055\016\070\017\064\020\066" +
    "\021\052\024\053\025\051\026\057\030\073\036\063\047" +
    "\065\050\074\052\060\053\072\062\067\063\054\070\071" +
    "\001\002\000\046\012\062\013\055\016\070\017\064\020" +
    "\066\021\052\024\053\025\051\026\057\030\073\036\063" +
    "\047\065\050\074\052\060\053\072\062\067\063\054\070" +
    "\071\001\002\000\046\012\062\013\055\016\070\017\064" +
    "\020\066\021\052\024\053\025\051\026\057\030\073\036" +
    "\063\047\065\050\074\052\060\053\072\062\067\063\054" +
    "\070\071\001\002\000\046\012\062\013\055\016\070\017" +
    "\064\020\066\021\052\024\053\025\051\026\057\030\073" +
    "\036\063\047\065\050\074\052\060\053\072\062\067\063" +
    "\054\070\071\001\002\000\046\012\062\013\055\016\070" +
    "\017\064\020\066\021\052\024\053\025\051\026\057\030" +
    "\073\036\063\047\065\050\074\052\060\053\072\062\067" +
    "\063\054\070\071\001\002\000\046\004\uffbe\007\uffbe\010" +
    "\uffbe\014\uffbe\023\uffbe\027\uffbe\031\uffbe\032\uffbe\033\uffbe" +
    "\034\uffbe\035\112\036\104\037\116\040\114\041\106\046" +
    "\113\060\uffbe\065\uffbe\001\002\000\060\004\uffba\007\uffba" +
    "\010\uffba\014\uffba\023\uffba\027\uffba\031\uffba\032\uffba\033" +
    "\uffba\034\uffba\035\112\036\104\037\116\040\114\041\106" +
    "\042\111\043\107\044\121\046\113\056\110\057\117\060" +
    "\uffba\065\uffba\001\002\000\046\004\uffbb\007\uffbb\010\uffbb" +
    "\014\uffbb\023\uffbb\027\uffbb\031\uffbb\032\uffbb\033\uffbb\034" +
    "\uffbb\035\112\036\104\037\116\040\114\041\106\046\113" +
    "\060\uffbb\065\uffbb\001\002\000\060\004\uffb7\007\uffb7\010" +
    "\uffb7\014\uffb7\023\uffb7\027\uffb7\031\uffb7\032\uffb7\033\uffb7" +
    "\034\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7\041\106\042" +
    "\uffb7\043\uffb7\044\uffb7\046\113\056\uffb7\057\uffb7\060\uffb7" +
    "\065\uffb7\001\002\000\004\031\uffd2\001\002\000\040\004" +
    "\105\031\uffce\034\130\035\112\036\104\037\116\040\114" +
    "\041\106\042\111\043\107\044\121\046\113\056\110\057" +
    "\117\060\120\001\002\000\046\012\062\013\055\016\070" +
    "\017\064\020\066\021\052\024\053\025\051\026\057\030" +
    "\073\036\063\047\065\050\074\052\060\053\072\062\067" +
    "\063\054\070\071\001\002\000\004\031\uffcf\001\002\000" +
    "\060\004\uffb6\007\uffb6\010\uffb6\014\uffb6\023\uffb6\027\uffb6" +
    "\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6\037" +
    "\uffb6\040\uffb6\041\106\042\uffb6\043\uffb6\044\uffb6\046\113" +
    "\056\uffb6\057\uffb6\060\uffb6\065\uffb6\001\002\000\066\004" +
    "\uffa9\007\uffa9\010\uffa9\014\uffa9\023\uffa9\027\uffa9\030\135" +
    "\031\uffa9\032\uffa9\033\uffa9\034\uffa9\035\uffa9\036\uffa9\037" +
    "\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9\044\uffa9\045\047" +
    "\046\uffa9\056\uffa9\057\uffa9\060\uffa9\064\076\065\uffa9\001" +
    "\002\000\060\004\uffc5\007\uffc5\010\uffc5\014\uffc5\023\uffc5" +
    "\027\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036" +
    "\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5" +
    "\046\uffc5\056\uffc5\057\uffc5\060\uffc5\065\uffc5\001\002\000" +
    "\050\012\062\013\055\016\070\017\064\020\066\021\052" +
    "\024\053\025\051\026\057\030\073\031\uffd0\036\063\047" +
    "\065\050\074\052\060\053\072\062\067\063\054\070\071" +
    "\001\002\000\062\004\uffa8\007\uffa8\010\uffa8\014\uffa8\023" +
    "\uffa8\027\uffa8\031\uffa8\032\uffa8\033\uffa8\034\uffa8\035\uffa8" +
    "\036\uffa8\037\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8\044" +
    "\uffa8\045\047\046\uffa8\056\uffa8\057\uffa8\060\uffa8\065\uffa8" +
    "\001\002\000\060\004\uffc6\007\uffc6\010\uffc6\014\uffc6\023" +
    "\uffc6\027\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6" +
    "\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044" +
    "\uffc6\046\uffc6\056\uffc6\057\uffc6\060\uffc6\065\uffc6\001\002" +
    "\000\004\031\141\001\002\000\060\004\uffb1\007\uffb1\010" +
    "\uffb1\014\uffb1\023\uffb1\027\uffb1\031\uffb1\032\uffb1\033\uffb1" +
    "\034\uffb1\035\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1\042" +
    "\uffb1\043\uffb1\044\uffb1\046\uffb1\056\uffb1\057\uffb1\060\uffb1" +
    "\065\uffb1\001\002\000\060\004\uffb9\007\uffb9\010\uffb9\014" +
    "\uffb9\023\uffb9\027\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9" +
    "\035\uffb9\036\uffb9\037\116\040\114\041\106\042\uffb9\043" +
    "\uffb9\044\uffb9\046\113\056\uffb9\057\uffb9\060\uffb9\065\uffb9" +
    "\001\002\000\046\004\uffc0\007\uffc0\010\uffc0\014\uffc0\023" +
    "\uffc0\027\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\035\112" +
    "\036\104\037\116\040\114\041\106\046\113\060\uffc0\065" +
    "\uffc0\001\002\000\046\004\uffbc\007\uffbc\010\uffbc\014\uffbc" +
    "\023\uffbc\027\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035" +
    "\112\036\104\037\116\040\114\041\106\046\113\060\uffbc" +
    "\065\uffbc\001\002\000\006\046\150\056\147\001\002\000" +
    "\046\004\uffbf\007\uffbf\010\uffbf\014\uffbf\023\uffbf\027\uffbf" +
    "\031\uffbf\032\uffbf\033\uffbf\034\uffbf\035\112\036\104\037" +
    "\116\040\114\041\106\046\113\060\uffbf\065\uffbf\001\002" +
    "\000\060\004\uffa7\007\uffa7\010\uffa7\014\uffa7\023\uffa7\027" +
    "\uffa7\031\uffa7\032\uffa7\033\uffa7\034\uffa7\035\uffa7\036\uffa7" +
    "\037\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7\046" +
    "\uffa7\056\uffa7\057\uffa7\060\uffa7\065\uffa7\001\002\000\004" +
    "\050\151\001\002\000\004\030\152\001\002\000\050\012" +
    "\062\013\055\016\070\017\064\020\066\021\052\024\053" +
    "\025\051\026\057\030\073\031\uffd0\036\063\047\065\050" +
    "\074\052\060\053\072\062\067\063\054\070\071\001\002" +
    "\000\004\031\154\001\002\000\060\004\uffb0\007\uffb0\010" +
    "\uffb0\014\uffb0\023\uffb0\027\uffb0\031\uffb0\032\uffb0\033\uffb0" +
    "\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042" +
    "\uffb0\043\uffb0\044\uffb0\046\uffb0\056\uffb0\057\uffb0\060\uffb0" +
    "\065\uffb0\001\002\000\060\004\uffb5\007\uffb5\010\uffb5\014" +
    "\uffb5\023\uffb5\027\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5" +
    "\035\uffb5\036\uffb5\037\uffb5\040\uffb5\041\106\042\uffb5\043" +
    "\uffb5\044\uffb5\046\113\056\uffb5\057\uffb5\060\uffb5\065\uffb5" +
    "\001\002\000\060\004\uffbd\007\uffbd\010\uffbd\014\uffbd\023" +
    "\uffbd\027\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035\112" +
    "\036\104\037\116\040\114\041\106\042\111\043\107\044" +
    "\121\046\113\056\110\057\117\060\uffbd\065\uffbd\001\002" +
    "\000\060\004\uffb8\007\uffb8\010\uffb8\014\uffb8\023\uffb8\027" +
    "\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8" +
    "\037\116\040\114\041\106\042\uffb8\043\uffb8\044\uffb8\046" +
    "\113\056\uffb8\057\uffb8\060\uffb8\065\uffb8\001\002\000\060" +
    "\004\uffb2\007\uffb2\010\uffb2\014\uffb2\023\uffb2\027\uffb2\031" +
    "\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2" +
    "\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\046\uffb2\056" +
    "\uffb2\057\uffb2\060\uffb2\065\uffb2\001\002\000\036\004\105" +
    "\035\112\036\104\037\116\040\114\041\106\042\111\043" +
    "\107\044\121\046\113\056\110\057\117\060\120\065\162" +
    "\001\002\000\064\004\ufff7\007\ufff7\010\ufff7\014\ufff7\023" +
    "\ufff7\027\ufff7\031\ufff7\032\ufff7\033\ufff7\034\ufff7\035\ufff7" +
    "\036\ufff7\037\ufff7\040\ufff7\041\ufff7\042\ufff7\043\ufff7\044" +
    "\ufff7\045\ufff7\046\ufff7\056\ufff7\057\ufff7\060\ufff7\064\076" +
    "\065\ufff7\001\002\000\062\004\ufff6\007\ufff6\010\ufff6\014" +
    "\ufff6\023\ufff6\027\ufff6\031\ufff6\032\ufff6\033\ufff6\034\ufff6" +
    "\035\ufff6\036\ufff6\037\ufff6\040\ufff6\041\ufff6\042\ufff6\043" +
    "\ufff6\044\ufff6\045\ufff6\046\ufff6\056\ufff6\057\ufff6\060\ufff6" +
    "\065\ufff6\001\002\000\036\004\105\031\166\035\112\036" +
    "\104\037\116\040\114\041\106\042\111\043\107\044\121" +
    "\046\113\056\110\057\117\060\120\001\002\000\060\004" +
    "\uffa5\007\uffa5\010\uffa5\014\uffa5\023\uffa5\027\uffa5\031\uffa5" +
    "\032\uffa5\033\uffa5\034\uffa5\035\uffa5\036\uffa5\037\uffa5\040" +
    "\uffa5\041\uffa5\042\uffa5\043\uffa5\044\uffa5\046\uffa5\056\uffa5" +
    "\057\uffa5\060\uffa5\065\uffa5\001\002\000\060\004\uffa4\007" +
    "\uffa4\010\uffa4\014\uffa4\023\uffa4\027\uffa4\031\uffa4\032\uffa4" +
    "\033\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4\041" +
    "\uffa4\042\uffa4\043\uffa4\044\uffa4\046\uffa4\056\uffa4\057\uffa4" +
    "\060\uffa4\065\uffa4\001\002\000\004\032\170\001\002\000" +
    "\046\012\062\013\055\016\070\017\064\020\066\021\052" +
    "\024\053\025\051\026\057\030\073\036\063\047\065\050" +
    "\074\052\060\053\072\062\067\063\054\070\071\001\002" +
    "\000\036\004\105\032\172\035\112\036\104\037\116\040" +
    "\114\041\106\042\111\043\107\044\121\046\113\056\110" +
    "\057\117\060\120\001\002\000\046\012\062\013\055\016" +
    "\070\017\064\020\066\021\052\024\053\025\051\026\057" +
    "\030\073\036\063\047\065\050\074\052\060\053\072\062" +
    "\067\063\054\070\071\001\002\000\036\004\105\007\174" +
    "\035\112\036\104\037\116\040\114\041\106\042\111\043" +
    "\107\044\121\046\113\056\110\057\117\060\120\001\002" +
    "\000\046\012\062\013\055\016\070\017\064\020\066\021" +
    "\052\024\053\025\051\026\057\030\073\036\063\047\065" +
    "\050\074\052\060\053\072\062\067\063\054\070\071\001" +
    "\002\000\060\004\105\007\uffc8\010\uffc8\014\uffc8\023\uffc8" +
    "\027\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\112\036" +
    "\104\037\116\040\114\041\106\042\111\043\107\044\121" +
    "\046\113\056\110\057\117\060\120\065\uffc8\001\002\000" +
    "\060\004\uffb3\007\uffb3\010\uffb3\014\uffb3\023\uffb3\027\uffb3" +
    "\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3\037" +
    "\uffb3\040\uffb3\041\106\042\uffb3\043\uffb3\044\uffb3\046\113" +
    "\056\uffb3\057\uffb3\060\uffb3\065\uffb3\001\002\000\004\064" +
    "\206\001\002\000\064\004\uffad\007\uffad\010\uffad\014\uffad" +
    "\023\uffad\027\uffad\030\202\031\uffad\032\uffad\033\uffad\034" +
    "\uffad\035\uffad\036\uffad\037\uffad\040\uffad\041\uffad\042\uffad" +
    "\043\uffad\044\uffad\046\uffad\056\uffad\057\uffad\060\uffad\064" +
    "\201\065\uffad\001\002\000\050\012\062\013\055\016\070" +
    "\017\064\020\066\021\052\024\053\025\051\026\057\030" +
    "\073\036\063\047\065\050\074\052\060\053\072\062\067" +
    "\063\054\065\043\070\071\001\002\000\050\012\062\013" +
    "\055\016\070\017\064\020\066\021\052\024\053\025\051" +
    "\026\057\030\073\031\uffd0\036\063\047\065\050\074\052" +
    "\060\053\072\062\067\063\054\070\071\001\002\000\060" +
    "\004\uffae\007\uffae\010\uffae\014\uffae\023\uffae\027\uffae\031" +
    "\uffae\032\uffae\033\uffae\034\uffae\035\uffae\036\uffae\037\uffae" +
    "\040\uffae\041\uffae\042\uffae\043\uffae\044\uffae\046\uffae\056" +
    "\uffae\057\uffae\060\uffae\065\uffae\001\002\000\004\031\205" +
    "\001\002\000\060\004\uffac\007\uffac\010\uffac\014\uffac\023" +
    "\uffac\027\uffac\031\uffac\032\uffac\033\uffac\034\uffac\035\uffac" +
    "\036\uffac\037\uffac\040\uffac\041\uffac\042\uffac\043\uffac\044" +
    "\uffac\046\uffac\056\uffac\057\uffac\060\uffac\065\uffac\001\002" +
    "\000\050\012\062\013\055\016\070\017\064\020\066\021" +
    "\052\024\053\025\051\026\057\030\073\036\063\047\065" +
    "\050\074\052\060\053\072\062\067\063\054\065\210\070" +
    "\071\001\002\000\060\004\uffaf\007\uffaf\010\uffaf\014\uffaf" +
    "\023\uffaf\027\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf\035" +
    "\uffaf\036\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf" +
    "\044\uffaf\046\uffaf\056\uffaf\057\uffaf\060\uffaf\065\uffaf\001" +
    "\002\000\022\014\ufff8\026\ufff8\031\ufff8\032\ufff8\033\ufff8" +
    "\034\ufff8\045\ufff8\064\ufff8\001\002\000\004\032\215\001" +
    "\002\000\004\014\213\001\002\000\046\012\062\013\055" +
    "\016\070\017\064\020\066\021\052\024\053\025\051\026" +
    "\057\030\073\036\063\047\065\050\074\052\060\053\072" +
    "\062\067\063\054\070\071\001\002\000\060\004\105\007" +
    "\uffc7\010\uffc7\014\uffc7\023\uffc7\027\uffc7\031\uffc7\032\uffc7" +
    "\033\uffc7\034\uffc7\035\112\036\104\037\116\040\114\041" +
    "\106\042\111\043\107\044\121\046\113\056\110\057\117" +
    "\060\120\065\uffc7\001\002\000\016\005\035\015\036\022" +
    "\033\051\040\054\032\061\041\001\002\000\012\014\uffe0" +
    "\034\uffe0\045\047\064\045\001\002\000\006\014\uffcd\034" +
    "\220\001\002\000\004\050\211\001\002\000\004\014\uffcc" +
    "\001\002\000\060\004\uffb4\007\uffb4\010\uffb4\014\uffb4\023" +
    "\uffb4\027\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4" +
    "\036\uffb4\037\uffb4\040\uffb4\041\106\042\uffb4\043\uffb4\044" +
    "\uffb4\046\113\056\uffb4\057\uffb4\060\uffb4\065\uffb4\001\002" +
    "\000\040\004\105\027\225\033\224\035\112\036\104\037" +
    "\116\040\114\041\106\042\111\043\107\044\121\046\113" +
    "\056\110\057\117\060\120\001\002\000\046\012\062\013" +
    "\055\016\070\017\064\020\066\021\052\024\053\025\051" +
    "\026\057\030\073\036\063\047\065\050\074\052\060\053" +
    "\072\062\067\063\054\070\071\001\002\000\062\004\uffd5" +
    "\007\uffd5\010\uffd5\014\uffd5\023\uffd5\027\uffd5\031\uffd5\032" +
    "\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5" +
    "\041\uffd5\042\uffd5\043\uffd5\044\uffd5\046\uffd5\056\uffd5\057" +
    "\uffd5\060\uffd5\065\uffd5\066\uffd5\001\002\000\004\027\232" +
    "\001\002\000\040\004\105\027\uffd4\033\230\035\112\036" +
    "\104\037\116\040\114\041\106\042\111\043\107\044\121" +
    "\046\113\056\110\057\117\060\120\001\002\000\046\012" +
    "\062\013\055\016\070\017\064\020\066\021\052\024\053" +
    "\025\051\026\057\030\073\036\063\047\065\050\074\052" +
    "\060\053\072\062\067\063\054\070\071\001\002\000\004" +
    "\027\uffd3\001\002\000\062\004\uffd6\007\uffd6\010\uffd6\014" +
    "\uffd6\023\uffd6\027\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6" +
    "\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\043" +
    "\uffd6\044\uffd6\046\uffd6\056\uffd6\057\uffd6\060\uffd6\065\uffd6" +
    "\066\uffd6\001\002\000\036\004\105\023\234\035\112\036" +
    "\104\037\116\040\114\041\106\042\111\043\107\044\121" +
    "\046\113\056\110\057\117\060\120\001\002\000\046\012" +
    "\062\013\055\016\070\017\064\020\066\021\052\024\053" +
    "\025\051\026\057\030\073\036\063\047\065\050\074\052" +
    "\060\053\072\062\067\063\054\070\071\001\002\000\060" +
    "\004\105\007\uffcb\010\236\014\uffcb\023\uffcb\027\uffcb\031" +
    "\uffcb\032\uffcb\033\uffcb\034\uffcb\035\112\036\104\037\116" +
    "\040\114\041\106\042\111\043\107\044\121\046\113\056" +
    "\110\057\117\060\120\065\uffcb\001\002\000\046\012\062" +
    "\013\055\016\070\017\064\020\066\021\052\024\053\025" +
    "\051\026\057\030\073\036\063\047\065\050\074\052\060" +
    "\053\072\062\067\063\054\070\071\001\002\000\060\004" +
    "\105\007\uffca\010\uffca\014\uffca\023\uffca\027\uffca\031\uffca" +
    "\032\uffca\033\uffca\034\uffca\035\112\036\104\037\116\040" +
    "\114\041\106\042\111\043\107\044\121\046\113\056\110" +
    "\057\117\060\120\065\uffca\001\002\000\060\004\uffc1\007" +
    "\uffc1\010\uffc1\014\uffc1\023\uffc1\027\uffc1\031\uffc1\032\uffc1" +
    "\033\uffc1\034\uffc1\035\112\036\104\037\116\040\114\041" +
    "\106\042\111\043\107\044\121\046\113\056\110\057\117" +
    "\060\uffc1\065\uffc1\001\002\000\060\004\uffc2\007\uffc2\010" +
    "\uffc2\014\uffc2\023\uffc2\027\uffc2\031\uffc2\032\uffc2\033\uffc2" +
    "\034\uffc2\035\112\036\104\037\116\040\114\041\106\042" +
    "\111\043\107\044\121\046\113\056\110\057\117\060\uffc2" +
    "\065\uffc2\001\002\000\036\004\105\007\243\035\112\036" +
    "\104\037\116\040\114\041\106\042\111\043\107\044\121" +
    "\046\113\056\110\057\117\060\120\001\002\000\046\012" +
    "\062\013\055\016\070\017\064\020\066\021\052\024\053" +
    "\025\051\026\057\030\073\036\063\047\065\050\074\052" +
    "\060\053\072\062\067\063\054\070\071\001\002\000\060" +
    "\004\105\007\uffc9\010\uffc9\014\uffc9\023\uffc9\027\uffc9\031" +
    "\uffc9\032\uffc9\033\uffc9\034\uffc9\035\112\036\104\037\116" +
    "\040\114\041\106\042\111\043\107\044\121\046\113\056" +
    "\110\057\117\060\120\065\uffc9\001\002\000\012\027\uffe2" +
    "\035\uffe2\036\uffe2\066\uffe2\001\002\000\006\031\uffdb\050" +
    "\253\001\002\000\016\005\035\015\036\022\033\051\040" +
    "\054\032\061\041\001\002\000\010\033\uffe0\045\047\064" +
    "\045\001\002\000\004\033\252\001\002\000\012\027\uffe3" +
    "\035\uffe3\036\uffe3\066\uffe3\001\002\000\004\032\267\001" +
    "\002\000\006\031\uffdc\034\262\001\002\000\004\031\256" +
    "\001\002\000\004\032\257\001\002\000\016\005\035\015" +
    "\036\022\033\051\040\054\032\061\041\001\002\000\006" +
    "\026\057\064\045\001\002\000\012\027\uffde\035\uffde\036" +
    "\uffde\066\uffde\001\002\000\004\050\253\001\002\000\006" +
    "\031\uffd9\034\265\001\002\000\004\031\uffdd\001\002\000" +
    "\004\050\253\001\002\000\004\031\uffda\001\002\000\016" +
    "\005\035\015\036\022\033\051\040\054\032\061\041\001" +
    "\002\000\012\031\uffd8\032\271\034\uffd8\064\045\001\002" +
    "\000\016\012\062\024\053\047\065\052\060\053\072\062" +
    "\067\001\002\000\006\031\uffd7\034\uffd7\001\002\000\004" +
    "\027\uffe5\001\002\000\004\027\uffe6\001\002\000\010\002" +
    "\uffe7\006\uffe7\067\uffe7\001\002\000\004\027\277\001\002" +
    "\000\010\002\uffe8\006\uffe8\067\uffe8\001\002\000\004\002" +
    "\001\001\002\000\004\002\uffec\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\277\000\006\004\004\005\003\001\001\000\006\004" +
    "\300\005\003\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\010\005\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\006\275\007\022" +
    "\012\023\025\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\006\020\007\022\012\023\025\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\006\273\007\022\012\023\025\024" +
    "\001\001\000\012\006\272\007\022\012\023\025\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\002\033\023\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\045\011\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\047\016\055\020\060\001\001" +
    "\000\002\001\001\000\010\003\047\016\055\020\241\001" +
    "\001\000\010\003\047\016\055\020\240\001\001\000\002" +
    "\001\001\000\010\003\047\016\055\020\237\001\001\000" +
    "\010\003\047\016\055\020\232\001\001\000\002\001\001" +
    "\000\010\003\047\016\055\020\222\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\003\047" +
    "\016\055\020\221\001\001\000\004\026\211\001\001\000" +
    "\002\001\001\000\006\002\176\023\177\001\001\000\002" +
    "\001\001\000\010\003\047\016\055\020\175\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\047\016\055" +
    "\020\163\001\001\000\006\011\074\024\077\001\001\000" +
    "\002\001\001\000\010\003\047\016\055\020\160\001\001" +
    "\000\012\003\047\016\055\020\102\021\101\001\001\000" +
    "\004\011\100\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\003\047\016\055\020\156\001" +
    "\001\000\010\003\047\016\055\020\155\001\001\000\010" +
    "\003\047\016\055\020\154\001\001\000\010\003\047\016" +
    "\055\020\145\001\001\000\010\003\047\016\055\020\143" +
    "\001\001\000\010\003\047\016\055\020\142\001\001\000" +
    "\010\003\047\016\055\020\141\001\001\000\002\001\001" +
    "\000\010\003\047\016\055\020\131\001\001\000\012\003" +
    "\047\016\055\020\126\022\125\001\001\000\010\003\047" +
    "\016\055\020\124\001\001\000\010\003\047\016\055\020" +
    "\123\001\001\000\010\003\047\016\055\020\122\001\001" +
    "\000\010\003\047\016\055\020\121\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\003\047\016" +
    "\055\020\126\022\130\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\133\024\135\001\001\000\002\001" +
    "\001\000\012\003\047\016\055\020\102\021\137\001\001" +
    "\000\004\011\136\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\003\047\016\055\020\102\021\152\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\162\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\003\047\016\055\020\170\001\001\000\002\001\001" +
    "\000\010\003\047\016\055\020\172\001\001\000\002\001" +
    "\001\000\010\003\047\016\055\020\174\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\206\001\001\000" +
    "\004\024\202\001\001\000\010\003\047\016\055\020\160" +
    "\001\001\000\012\003\047\016\055\020\102\021\203\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\003\047\016\055\020\160\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\003\047\016\055\020\213\001\001\000\002\001" +
    "\001\000\006\002\215\023\036\001\001\000\006\010\216" +
    "\011\043\001\001\000\002\001\001\000\004\026\220\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\003\047\016\055\017\225\020\226\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\003\047\016\055\017\230\020\226\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\003\047" +
    "\016\055\020\234\001\001\000\002\001\001\000\010\003" +
    "\047\016\055\020\236\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\003" +
    "\047\016\055\020\243\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\013\254\015\253\001\001\000\006\002" +
    "\247\023\036\001\001\000\006\010\250\011\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\002\257\023\036\001\001\000\004\016\260\001\001\000" +
    "\002\001\001\000\006\014\263\015\262\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\014\265\015\262\001" +
    "\001\000\002\001\001\000\006\002\267\023\036\001\001" +
    "\000\002\001\001\000\004\003\271\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$VSOPExtendedParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$VSOPExtendedParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$VSOPExtendedParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



   public void report_error(String message, Object info) {
      System.err.println(Parser.name + ":" + Parser.lastLine + ":" + Parser.lastColumn + ": syntax error " + message);
   }
   public void syntax_error(Symbol cur_token) throws Exception {
      Parser.lastLine = cur_token.line;
      Parser.lastColumn = cur_token.col;
      throw new Exception("symbol not within expected ones");
   }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$VSOPExtendedParser$actions {
  private final VSOPExtendedParser parser;

  /** Constructor */
  CUP$VSOPExtendedParser$actions(VSOPExtendedParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$VSOPExtendedParser$do_action_part00000000(
    int                        CUP$VSOPExtendedParser$act_num,
    java_cup.runtime.lr_parser CUP$VSOPExtendedParser$parser,
    java.util.Stack            CUP$VSOPExtendedParser$stack,
    int                        CUP$VSOPExtendedParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$VSOPExtendedParser$result;

      /* select the action based on the action number */
      switch (CUP$VSOPExtendedParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		ASTNode start_val = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		RESULT = start_val;
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$VSOPExtendedParser$parser.done_parsing();
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // simtypes ::= BOOL 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 Parser.lastLine = t.line; Parser.lastColumn = t.col; RESULT = new ASTNode(SymbolValue.BOOL, null); RESULT.addProp("line", t.line + ""); RESULT.addProp("col", t.col + ""); RESULT.addProp("type", "bool"); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("simtypes",17, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // simtypes ::= UNIT 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 Parser.lastLine = t.line; Parser.lastColumn = t.col; RESULT = new ASTNode(SymbolValue.UNIT, null); RESULT.addProp("line", t.line + ""); RESULT.addProp("col", t.col + ""); RESULT.addProp("type", "unit"); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("simtypes",17, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // simtypes ::= STRING 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 Parser.lastLine = t.line; Parser.lastColumn = t.col; RESULT = new ASTNode(SymbolValue.STRING, null); RESULT.addProp("line", t.line + ""); RESULT.addProp("col", t.col + ""); RESULT.addProp("type", "string"); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("simtypes",17, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // simtypes ::= INT32 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 Parser.lastLine = t.line; Parser.lastColumn = t.col; RESULT = new ASTNode(SymbolValue.INT32, null); RESULT.addProp("line", t.line + ""); RESULT.addProp("col", t.col + ""); RESULT.addProp("type", "int32"); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("simtypes",17, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // simtypes ::= FLOAT 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 Parser.lastLine = t.line; Parser.lastColumn = t.col; RESULT = new ASTNode(SymbolValue.FLOAT, null); RESULT.addProp("line", t.line + ""); RESULT.addProp("col", t.col + ""); RESULT.addProp("type", "float"); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("simtypes",17, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // simtypes ::= TYPE_IDENTIFIER 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 Parser.lastLine = t.line; Parser.lastColumn = t.col; RESULT = new ASTNode(SymbolValue.TYPE_IDENTIFIER, t.val); RESULT.addProp("line", t.line + ""); RESULT.addProp("col", t.col + ""); RESULT.addProp("type", ASTNode.typeValue(RESULT)); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("simtypes",17, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // types ::= simtypes 
            {
              ASTNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode s = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = s; 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("types",0, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // types ::= simtypes LBRK RBRK 
            {
              ASTNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode s = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		 RESULT = s; s.itype = SymbolValue.TYPE_IDENTIFIER; String st = RESULT.getProp("type").toString(); RESULT.addProp("type", "[]:" + st); s.setValue("[]:" + st); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("types",0, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // types ::= types LBRK RBRK 
            {
              ASTNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode s = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		 RESULT = s; String st = RESULT.getProp("type").toString(); RESULT.addProp("type", "[]:" + st); s.setValue("[]:" + st); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("types",0, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // deref ::= LBRK expression RBRK 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		 RESULT = new ASTNode("deref", null); RESULT.addChild(t); RESULT.addProp("col", t.getProp("col")); RESULT.addProp("line", t.getProp("line"));  RESULT.addChild(new ASTNode("dummy", null)); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("deref",18, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // deref ::= LBRK expression RBRK deref 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode d = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode("deref", null); RESULT.addChild(t); RESULT.addProp("col", t.getProp("col")); RESULT.addProp("line", t.getProp("line")); RESULT.addChild(d); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("deref",18, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // visi ::= PLUS 
            {
              Symbol RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		Symbol p = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = p; 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("visi",19, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // visi ::= MINUS 
            {
              Symbol RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		Symbol p = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = p; 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("visi",19, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // visi ::= TILDE 
            {
              Symbol RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		Symbol p = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = p; 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("visi",19, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // lit ::= INTEGER_LITERAL 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 Parser.lastLine = t.line; Parser.lastColumn = t.col; RESULT = new ASTNode(SymbolValue.INTEGER_LITERAL, t.val); RESULT.addProp("line", t.line + ""); RESULT.addProp("col", t.col + ""); RESULT.addProp("type", "int32"); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("lit",1, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // lit ::= FLOAT_LITERAL 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 Parser.lastLine = t.line; Parser.lastColumn = t.col; RESULT = new ASTNode(SymbolValue.FLOAT_LITERAL, t.val); RESULT.addProp("line", t.line + ""); RESULT.addProp("col", t.col + ""); RESULT.addProp("type", "float"); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("lit",1, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // lit ::= STRING_LITERAL 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 Parser.lastLine = t.line; Parser.lastColumn = t.col; RESULT = new ASTNode(SymbolValue.STRING_LITERAL, t.val); RESULT.addProp("line", t.line + ""); RESULT.addProp("col", t.col + ""); RESULT.addProp("type", "string"); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("lit",1, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // lit ::= TRUE 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 Parser.lastLine = t.line; Parser.lastColumn = t.col; RESULT = new ASTNode(SymbolValue.TRUE, null); RESULT.addProp("line", t.line + ""); RESULT.addProp("col", t.col + ""); RESULT.addProp("type", "bool"); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("lit",1, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // lit ::= FALSE 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 Parser.lastLine = t.line; Parser.lastColumn = t.col; RESULT = new ASTNode(SymbolValue.FALSE, null); RESULT.addProp("line", t.line + ""); RESULT.addProp("col", t.col + ""); RESULT.addProp("type", "bool"); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("lit",1, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // lit ::= NULL 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 Parser.lastLine = t.line; Parser.lastColumn = t.col; RESULT = new ASTNode(SymbolValue.NULL, null); RESULT.addProp("line", t.line + ""); RESULT.addProp("col", t.col + ""); RESULT.addProp("type", "Object"); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("lit",1, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // program ::= class_all program 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode c = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 c.pushChild(t); t.shuffleClass(); RESULT = c; 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("program",2, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // program ::= class_all 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode("program", null); RESULT.addChild(t); t.shuffleClass(); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("program",2, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // program ::= INCLUDE STRING_LITERAL program 
            {
              ASTNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode c = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 c.addChild(new ASTNode("include", s.val)); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("program",2, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // program ::= INCLUDE STRING_LITERAL 
            {
              ASTNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode("program", null); RESULT.addChild(new ASTNode("include", s.val)); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("program",2, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // class_all ::= CLASS TYPE_IDENTIFIER LBRACE class_body RBRACE 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		ASTNode c = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		 RESULT = c; ASTNode b = new ASTNode(SymbolValue.TYPE_IDENTIFIER, "Object"); b.addProp("line", t.line + ""); b.addProp("col", t.col + ""); c.addChild(b); ASTNode a = new ASTNode(SymbolValue.TYPE_IDENTIFIER, t.val); a.addProp("line", t.line + ""); a.addProp("col", t.col + ""); c.addChild(a); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("class_all",3, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // class_all ::= CLASS TYPE_IDENTIFIER EXTENDS TYPE_IDENTIFIER LBRACE class_body RBRACE 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-5)).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).right;
		Symbol e = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		ASTNode c = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		 RESULT = c; ASTNode b = new ASTNode(SymbolValue.TYPE_IDENTIFIER, e.val); b.addProp("line", e.line + ""); b.addProp("col", e.col + ""); c.addChild(b); ASTNode a = new ASTNode(SymbolValue.TYPE_IDENTIFIER, t.val); a.addProp("line", t.line + ""); a.addProp("col", t.col + ""); c.addChild(a); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("class_all",3, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-6)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // class_body ::= field class_body 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode c = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 c.pushChild(t); RESULT = c; 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("class_body",4, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // class_body ::= method class_body 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode c = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 c.pushChild(t); RESULT = c; 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("class_body",4, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // class_body ::= 
            {
              ASTNode RESULT =null;
		 RESULT = new ASTNode(SymbolValue.CLASS, null); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("class_body",4, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // field ::= visi OBJECT_IDENTIFIER COLON types may_assign SEMICOLON 
            {
              ASTNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-5)).right;
		Symbol v = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-5)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		ASTNode m = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		 RESULT = new ASTNode("field", null); ASTNode a = new ASTNode(SymbolValue.OBJECT_IDENTIFIER, o.val); a.addProp("line", o.line + ""); a.addProp("col", o.col + ""); a.addProp("type", ASTNode.typeValue(t)); RESULT.addChild(a); RESULT.addChild(t); if(m != null) RESULT.addChild(m); RESULT.addProp("visi", v); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("field",5, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-5)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // field ::= visi PLUS OBJECT_IDENTIFIER COLON types may_assign SEMICOLON 
            {
              ASTNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-6)).right;
		Symbol v = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-6)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		ASTNode m = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		 RESULT = new ASTNode("field", null); ASTNode a = new ASTNode(SymbolValue.OBJECT_IDENTIFIER, o.val); a.addProp("line", o.line + ""); a.addProp("col", o.col + ""); a.addProp("type", ASTNode.typeValue(t)); RESULT.addChild(a); RESULT.addChild(t); if(m != null) RESULT.addChild(m); RESULT.addProp("visi", v); RESULT.addProp("getter", true); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("field",5, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-6)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // may_assign ::= assign 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = t; 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("may_assign",6, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // may_assign ::= 
            {
              ASTNode RESULT =null;
		 RESULT = null; 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("may_assign",6, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // assign ::= ASSIGN expression 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode(SymbolValue.ASSIGN, null); RESULT.addChild(t); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("assign",7, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // method ::= visi OBJECT_IDENTIFIER LPAR formals RPAR COLON types block 
            {
              ASTNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-7)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-7)).right;
		Symbol v = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-7)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-6)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-6)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)).right;
		ASTNode f = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode b = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode("method", null); RESULT.addProp("type", ASTNode.typeValue(t)); ASTNode a = new ASTNode(SymbolValue.OBJECT_IDENTIFIER, o.val); a.addProp("line", o.line + ""); a.addProp("col", o.col + ""); RESULT.addChild(a); if(f != null) RESULT.addChild(f); RESULT.addChild(t); RESULT.addChild(b); RESULT.addProp("visi", v); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("method",8, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-7)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // formals ::= formal COMMA formals_full 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode c = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = c; c.pushChild(t); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("formals",9, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // formals ::= formal 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode("formals", null); RESULT.pushChild(t); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("formals",9, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // formals ::= 
            {
              ASTNode RESULT =null;
		 RESULT = null; 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("formals",9, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // formals_full ::= formal COMMA formals_full 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode c = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = c; c.pushChild(t); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("formals_full",10, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // formals_full ::= formal 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode("formals", null); RESULT.pushChild(t); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("formals_full",10, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // formal ::= OBJECT_IDENTIFIER COLON types 
            {
              ASTNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode("formal", null); ASTNode a = new ASTNode(SymbolValue.OBJECT_IDENTIFIER, o.val); a.addProp("line", o.line + ""); a.addProp("col", o.col + ""); a.addProp("type", ASTNode.typeValue(t)); RESULT.addChild(a); RESULT.addChild(t); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("formal",11, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // formal ::= OBJECT_IDENTIFIER COLON types COLON lit 
            {
              ASTNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode l = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode("formal", null); ASTNode a = new ASTNode(SymbolValue.OBJECT_IDENTIFIER, o.val); a.addProp("line", o.line + ""); a.addProp("col", o.col + ""); a.addProp("type", ASTNode.typeValue(t)); RESULT.addChild(a); RESULT.addChild(t); RESULT.addChild(l); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("formal",11, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // block ::= LBRACE expression SEMICOLON block_full RBRACE 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		ASTNode b = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		 RESULT = b; b.pushChild(e); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("block",12, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // block ::= LBRACE expression RBRACE 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		 RESULT = new ASTNode("block", null); RESULT.addChild(e); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("block",12, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // block_full ::= expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode("block", null); RESULT.addChild(e); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("block_full",13, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // block_full ::= expression SEMICOLON block_full 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode b = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = b; b.pushChild(e); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("block_full",13, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // args ::= expression COMMA args_full 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode b = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = b; b.pushChild(e); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("args",15, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // args ::= expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode("args", null); RESULT.addChild(e); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("args",15, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // args ::= 
            {
              ASTNode RESULT =null;
		 RESULT = null; 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("args",15, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // args_full ::= expression COMMA args_full 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode b = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = b; b.pushChild(e); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("args_full",16, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // args_full ::= expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode("args", null); RESULT.addChild(e); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("args_full",16, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // letlist ::= OBJECT_IDENTIFIER COLON types may_assign 
            {
              ASTNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode m = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode("let", null); ASTNode a = new ASTNode(SymbolValue.OBJECT_IDENTIFIER, o.val); a.addProp("line", o.line + ""); a.addProp("col", o.col + ""); a.addProp("type", ASTNode.typeValue(t)); RESULT.addChild(a); RESULT.addChild(t); if(m != null) RESULT.addChild(m); RESULT.addChild(null); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("letlist",20, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // letlist ::= OBJECT_IDENTIFIER COLON types may_assign COMMA letlist 
            {
              ASTNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-5)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-5)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode m = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode l = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode("let", null); ASTNode a = new ASTNode(SymbolValue.OBJECT_IDENTIFIER, o.val); a.addProp("line", o.line + ""); a.addProp("col", o.col + ""); a.addProp("type", ASTNode.typeValue(t)); RESULT.addChild(a); RESULT.addChild(t); if(m != null) RESULT.addChild(m); RESULT.addChild(l); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("letlist",20, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-5)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expression ::= IF expression THEN expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode f = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode("if", null); RESULT.addChild(e); RESULT.addChild(f); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expression ::= IF expression THEN expression ELSE expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode f = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode g = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode("if", null); RESULT.addChild(e); RESULT.addChild(f); RESULT.addChild(g); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-5)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expression ::= WHILE expression DO expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode f = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode("while", null); RESULT.addChild(e); RESULT.addChild(f); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expression ::= FOR OBJECT_IDENTIFIER COLON expression COLON expression DO expression 
            {
              ASTNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-6)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-6)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode f = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode g = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode("let", null).addChild(new ASTNode(SymbolValue.OBJECT_IDENTIFIER, "__arr").addProp("line", o.line + "").addProp("col", o.col + "").addProp("type", Analyzer.EMPTY)).addChild(null).addChild(new ASTNode("let", null).addChild(new ASTNode(SymbolValue.OBJECT_IDENTIFIER, o.val).addProp("type", Analyzer.EMPTY)).addChild(null).addChild(new ASTNode("block", null).addChild(new ASTNode("assign", null).addChild(new ASTNode(SymbolValue.OBJECT_IDENTIFIER, "__arr")).addChild(e)).addChild(new ASTNode("let", null).addChild(new ASTNode(SymbolValue.OBJECT_IDENTIFIER, "__i").addProp("type", "int32")).addChild(new ASTNode(SymbolValue.INT32, null).addProp("type", "int32")).addChild(new ASTNode("while", null).addChild(new ASTNode(SymbolValue.NOT, null).addChild(new ASTNode(SymbolValue.EQUAL, null).addChild(new ASTNode(SymbolValue.OBJECT_IDENTIFIER, "__i")).addChild(f.clone()))).addChild(new ASTNode("block", null).addChild(new ASTNode("assign", null).addChild(new ASTNode(SymbolValue.OBJECT_IDENTIFIER, o.val)).addChild(new ASTNode(SymbolValue.OBJECT_IDENTIFIER, "__arr").addChild(new ASTNode("deref", null).addChild(new ASTNode(SymbolValue.OBJECT_IDENTIFIER, "__i")).addChild(new ASTNode("dummy", null))))).addChild(g).addChild(new ASTNode("assign", null).addChild(new ASTNode(SymbolValue.OBJECT_IDENTIFIER, "__i")).addChild(new ASTNode(SymbolValue.PLUS, null).addChild(new ASTNode(SymbolValue.INTEGER_LITERAL, 1).addProp("type", "int32")).addChild(new ASTNode(SymbolValue.OBJECT_IDENTIFIER, "__i"))))))))); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-7)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expression ::= LET letlist IN expression 
            {
              ASTNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode l = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = l; ASTNode deep = l; while(deep.getChildren().get(deep.getChildren().size() - 1) != null) deep = deep.getChildren().get(deep.getChildren().size() - 1); deep.getChildren().set(deep.getChildren().size() - 1, e); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expression ::= expression DOT OBJECT_IDENTIFIER deref assign 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		ASTNode d = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode m = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode("assign", null); ASTNode c1 = new ASTNode("fieldget", null); ASTNode a = new ASTNode(SymbolValue.OBJECT_IDENTIFIER, o.val); a.addProp("line", o.line + ""); a.addProp("col", o.col + ""); c1.addProp("col", e.getProp("col")); c1.addProp("line", e.getProp("line")); c1.addChild(e); c1.addChild(a); RESULT.addChild(c1); RESULT.addChild(m); RESULT.addChild(d); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expression ::= expression DOT OBJECT_IDENTIFIER assign 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode m = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode("assign", null); ASTNode c1 = new ASTNode("fieldget", null); ASTNode a = new ASTNode(SymbolValue.OBJECT_IDENTIFIER, o.val); a.addProp("line", o.line + ""); a.addProp("col", o.col + ""); c1.addProp("col", e.getProp("col")); c1.addProp("line", e.getProp("line")); c1.addChild(e); c1.addChild(a); RESULT.addChild(c1); RESULT.addChild(m); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expression ::= OBJECT_IDENTIFIER deref assign 
            {
              ASTNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		ASTNode d = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode m = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode("assign", null); ASTNode a = new ASTNode(SymbolValue.OBJECT_IDENTIFIER, o.val); a.addProp("line", o.line + ""); a.addProp("col", o.col + ""); RESULT.addChild(a); RESULT.addChild(m); RESULT.addChild(d); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expression ::= OBJECT_IDENTIFIER assign 
            {
              ASTNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode m = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode("assign", null); ASTNode a = new ASTNode(SymbolValue.OBJECT_IDENTIFIER, o.val); a.addProp("line", o.line + ""); a.addProp("col", o.col + ""); RESULT.addChild(a); RESULT.addChild(m); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expression ::= NOT expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode(SymbolValue.NOT, null); RESULT.addChild(e); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expression ::= SWITCH expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode(SymbolValue.SWITCH, null); RESULT.addChild(e); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expression ::= expression EQUAL expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode f = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode(SymbolValue.EQUAL, null); RESULT.addChild(e); RESULT.addChild(f); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expression ::= expression LOWER expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode f = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode(SymbolValue.LOWER, null); RESULT.addChild(e); RESULT.addChild(f); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expression ::= expression LOWER_EQUAL expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode f = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode(SymbolValue.LOWER_EQUAL, null); RESULT.addChild(e); RESULT.addChild(f); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expression ::= expression AND expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode f = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode(SymbolValue.AND, null); RESULT.addChild(e); RESULT.addChild(f); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expression ::= expression GREATER expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode f = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode(SymbolValue.GREATER, null); RESULT.addChild(e); RESULT.addChild(f); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expression ::= expression GREATER_EQUAL expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode f = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode(SymbolValue.GREATER_EQUAL, null); RESULT.addChild(e); RESULT.addChild(f); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expression ::= expression OR expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode f = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode(SymbolValue.OR, null); RESULT.addChild(e); RESULT.addChild(f); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expression ::= expression PLUS expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode f = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode(SymbolValue.PLUS, null); RESULT.addChild(e); RESULT.addChild(f); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expression ::= expression MINUS expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode f = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode(SymbolValue.MINUS, null); RESULT.addChild(e); RESULT.addChild(f); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expression ::= expression TIMES expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode f = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode(SymbolValue.TIMES, null); RESULT.addChild(e); RESULT.addChild(f); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expression ::= expression DIV expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode f = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode(SymbolValue.DIV, null); RESULT.addChild(e); RESULT.addChild(f); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expression ::= expression POW expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode f = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode(SymbolValue.POW, null); RESULT.addChild(e); RESULT.addChild(f); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expression ::= MINUS expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode("uminus", null); RESULT.addChild(e); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expression ::= ISNULL expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode(SymbolValue.ISNULL, null); RESULT.addChild(e); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expression ::= OBJECT_IDENTIFIER LPAR args RPAR 
            {
              ASTNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		ASTNode m = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		 RESULT = new ASTNode("call", null); ASTNode b = new ASTNode(SymbolValue.OBJECT_IDENTIFIER, "self"); b.addProp("line", o.line + ""); b.addProp("col", o.col + ""); RESULT.addChild(b); ASTNode a = new ASTNode(SymbolValue.OBJECT_IDENTIFIER, o.val); a.addProp("line", o.line + ""); a.addProp("col", o.col + ""); RESULT.addChild(a); if(m != null) RESULT.addChild(m); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expression ::= expression DOT OBJECT_IDENTIFIER LPAR args RPAR 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-5)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-5)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		ASTNode m = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		 RESULT = new ASTNode("call", null); RESULT.addChild(e); ASTNode a = new ASTNode(SymbolValue.OBJECT_IDENTIFIER, o.val); a.addProp("line", o.line + ""); a.addProp("col", o.col + ""); RESULT.addChild(a); if(m != null) RESULT.addChild(m); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-5)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expression ::= expression LOWER TYPE_IDENTIFIER DOT OBJECT_IDENTIFIER LPAR args RPAR 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-7)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-5)).right;
		Symbol c = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-5)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		ASTNode m = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		 RESULT = new ASTNode("call", null); RESULT.addChild(e); ASTNode a = new ASTNode(SymbolValue.OBJECT_IDENTIFIER, o.val); a.addProp("line", o.line + ""); a.addProp("col", o.col + ""); RESULT.addChild(a); if(m != null) RESULT.addChild(m); RESULT.addProp("cast", c.val); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-7)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expression ::= NEW types deref 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode d = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode(SymbolValue.NEW, null); RESULT.addChild(t); RESULT.addChild(d); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expression ::= NEW simtypes deref 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode d = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode(SymbolValue.NEW, null); RESULT.addChild(t); RESULT.addChild(d); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expression ::= NEW simtypes 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode(SymbolValue.NEW, null); RESULT.addChild(t); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expression ::= NEW simtypes LPAR args RPAR 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		ASTNode m = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		 RESULT = new ASTNode("call", null); ASTNode b = new ASTNode(SymbolValue.NEW, null); b.addChild(t); b.addProp("line", t.getProp("line")); b.addProp("col", t.getProp("col")); RESULT.addChild(b); ASTNode a = new ASTNode(SymbolValue.OBJECT_IDENTIFIER, "init"); a.addProp("line", m.getProp("line")); a.addProp("col", m.getProp("col")); RESULT.addChild(a); if(m != null) RESULT.addChild(m); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expression ::= OBJECT_IDENTIFIER 
            {
              ASTNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode(SymbolValue.OBJECT_IDENTIFIER, o.val); RESULT.addProp("line", o.line + ""); RESULT.addProp("col", o.col + ""); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expression ::= OBJECT_IDENTIFIER deref 
            {
              ASTNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode d = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode(SymbolValue.OBJECT_IDENTIFIER, o.val); RESULT.addProp("line", o.line + ""); RESULT.addProp("col", o.col + ""); RESULT.addChild(d); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expression ::= expression DOT OBJECT_IDENTIFIER 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode("fieldget", null); ASTNode c2 = new ASTNode(SymbolValue.OBJECT_IDENTIFIER, o.val); c2.addProp("line", o.line + ""); c2.addProp("col", o.col + ""); RESULT.addProp("line", e.getProp("line")); RESULT.addProp("col", e.getProp("col")); RESULT.addChild(e); RESULT.addChild(c2); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expression ::= expression DOT OBJECT_IDENTIFIER deref 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode d = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode("fieldget", null); ASTNode c2 = new ASTNode(SymbolValue.OBJECT_IDENTIFIER, o.val); c2.addProp("line", o.line + ""); c2.addProp("col", o.col + ""); RESULT.addProp("line", e.getProp("line")); RESULT.addProp("col", e.getProp("col")); RESULT.addChild(e); RESULT.addChild(c2); RESULT.addChild(d); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expression ::= expression LOWER TYPE_IDENTIFIER GREATER 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		Symbol c = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		 RESULT = new ASTNode("cast", null); RESULT.addChild(e); RESULT.addProp("cast", c.val); RESULT.addProp("col", e.getProp("col")); RESULT.addProp("line", e.getProp("line")); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expression ::= lit 
            {
              ASTNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode l = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = l; 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expression ::= LPAR RPAR 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		 Parser.lastLine = t.line; Parser.lastColumn = t.col; RESULT = new ASTNode(SymbolValue.UNIT_VALUE, null); RESULT.addProp("line", t.line + ""); RESULT.addProp("col", t.col + ""); RESULT.addProp("type", "unit"); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expression ::= LPAR expression RPAR 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		 RESULT = e; 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expression ::= block 
            {
              ASTNode RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode b = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = b; 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$VSOPExtendedParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$VSOPExtendedParser$do_action(
    int                        CUP$VSOPExtendedParser$act_num,
    java_cup.runtime.lr_parser CUP$VSOPExtendedParser$parser,
    java.util.Stack            CUP$VSOPExtendedParser$stack,
    int                        CUP$VSOPExtendedParser$top)
    throws java.lang.Exception
    {
              return CUP$VSOPExtendedParser$do_action_part00000000(
                               CUP$VSOPExtendedParser$act_num,
                               CUP$VSOPExtendedParser$parser,
                               CUP$VSOPExtendedParser$stack,
                               CUP$VSOPExtendedParser$top);
    }
}

}
