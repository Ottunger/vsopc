
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package be.ac.ulg.vsop.parser;

import java_cup.runtime.*;
import be.ac.ulg.vsop.lexer.Symbol;
import be.ac.ulg.vsop.parser.SymbolValue;
import be.ac.ulg.vsop.parser.ASTNode;
import be.ac.ulg.vsop.parser.Parser;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class VSOPExtendedParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SymbolValue.class;
}

  /** Default constructor. */
  @Deprecated
  public VSOPExtendedParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public VSOPExtendedParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public VSOPExtendedParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\101\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\004\004\000\002" +
    "\004\003\000\002\005\007\000\002\005\011\000\002\006" +
    "\004\000\002\006\004\000\002\006\002\000\002\007\007" +
    "\000\002\010\003\000\002\010\002\000\002\011\004\000" +
    "\002\012\011\000\002\013\005\000\002\013\003\000\002" +
    "\013\002\000\002\014\005\000\002\014\003\000\002\015" +
    "\005\000\002\015\007\000\002\016\007\000\002\016\005" +
    "\000\002\017\003\000\002\017\005\000\002\021\005\000" +
    "\002\021\003\000\002\021\002\000\002\022\005\000\002" +
    "\022\003\000\002\020\006\000\002\020\010\000\002\020" +
    "\006\000\002\020\011\000\002\020\004\000\002\020\004" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\020\005\000\002\020\005\000\002\020\005\000\002" +
    "\020\005\000\002\020\005\000\002\020\005\000\002\020" +
    "\004\000\002\020\004\000\002\020\006\000\002\020\010" +
    "\000\002\020\012\000\002\020\004\000\002\020\003\000" +
    "\002\020\003\000\002\020\004\000\002\020\005\000\002" +
    "\020\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\206\000\004\006\006\001\002\000\006\002\ufff5\006" +
    "\006\001\002\000\004\002\207\001\002\000\004\051\007" +
    "\001\002\000\006\011\011\026\010\001\002\000\006\027" +
    "\ufff0\050\014\001\002\000\004\051\012\001\002\000\004" +
    "\026\013\001\002\000\006\027\ufff0\050\014\001\002\000" +
    "\006\030\023\032\024\001\002\000\004\027\022\001\002" +
    "\000\006\027\ufff0\050\014\001\002\000\006\027\ufff0\050" +
    "\014\001\002\000\004\027\ufff1\001\002\000\004\027\ufff2" +
    "\001\002\000\006\002\ufff3\006\ufff3\001\002\000\006\031" +
    "\uffe8\050\165\001\002\000\014\005\030\015\031\022\026" +
    "\051\032\054\025\001\002\000\020\014\uffff\026\uffff\031" +
    "\uffff\032\uffff\033\uffff\034\uffff\045\uffff\001\002\000\020" +
    "\014\ufffe\026\ufffe\031\ufffe\032\ufffe\033\ufffe\034\ufffe\045" +
    "\ufffe\001\002\000\006\033\uffed\045\035\001\002\000\020" +
    "\014\000\026\000\031\000\032\000\033\000\034\000\045" +
    "\000\001\002\000\020\014\ufffd\026\ufffd\031\ufffd\032\ufffd" +
    "\033\ufffd\034\ufffd\045\ufffd\001\002\000\020\014\ufffc\026" +
    "\ufffc\031\ufffc\032\ufffc\033\ufffc\034\ufffc\045\ufffc\001\002" +
    "\000\006\014\uffee\033\uffee\001\002\000\004\033\164\001" +
    "\002\000\040\012\047\013\042\016\054\017\051\020\053" +
    "\021\040\024\041\025\037\026\044\030\056\036\050\047" +
    "\052\050\057\052\045\053\055\001\002\000\046\004\uffc4" +
    "\007\uffc4\010\uffc4\014\uffc4\023\uffc4\027\uffc4\031\uffc4\033" +
    "\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4" +
    "\042\uffc4\043\uffc4\044\uffc4\046\uffc4\001\002\000\040\012" +
    "\047\013\042\016\054\017\051\020\053\021\040\024\041" +
    "\025\037\026\044\030\056\036\050\047\052\050\057\052" +
    "\045\053\055\001\002\000\040\012\047\013\042\016\054" +
    "\017\051\020\053\021\040\024\041\025\037\026\044\030" +
    "\056\036\050\047\052\050\057\052\045\053\055\001\002" +
    "\000\046\004\ufff9\007\ufff9\010\ufff9\014\ufff9\023\ufff9\027" +
    "\ufff9\031\ufff9\033\ufff9\034\ufff9\035\ufff9\036\ufff9\037\ufff9" +
    "\040\ufff9\041\ufff9\042\ufff9\043\ufff9\044\ufff9\046\ufff9\001" +
    "\002\000\040\012\047\013\042\016\054\017\051\020\053" +
    "\021\040\024\041\025\037\026\044\030\056\036\050\047" +
    "\052\050\057\052\045\053\055\001\002\000\046\004\uffc1" +
    "\007\uffc1\010\uffc1\014\uffc1\023\uffc1\027\uffc1\031\uffc1\033" +
    "\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1" +
    "\042\uffc1\043\uffc1\044\uffc1\046\uffc1\001\002\000\040\012" +
    "\047\013\042\016\054\017\051\020\053\021\040\024\041" +
    "\025\037\026\044\030\056\036\050\047\052\050\057\052" +
    "\045\053\055\001\002\000\046\004\ufffa\007\ufffa\010\ufffa" +
    "\014\ufffa\023\ufffa\027\ufffa\031\ufffa\033\ufffa\034\ufffa\035" +
    "\ufffa\036\ufffa\037\ufffa\040\ufffa\041\ufffa\042\ufffa\043\ufffa" +
    "\044\ufffa\046\ufffa\001\002\000\046\004\065\007\uffec\010" +
    "\uffec\014\uffec\023\uffec\027\uffec\031\uffec\033\uffec\034\uffec" +
    "\035\071\036\064\037\075\040\072\041\067\042\070\043" +
    "\066\044\076\046\073\001\002\000\046\004\ufff8\007\ufff8" +
    "\010\ufff8\014\ufff8\023\ufff8\027\ufff8\031\ufff8\033\ufff8\034" +
    "\ufff8\035\ufff8\036\ufff8\037\ufff8\040\ufff8\041\ufff8\042\ufff8" +
    "\043\ufff8\044\ufff8\046\ufff8\001\002\000\040\012\047\013" +
    "\042\016\054\017\051\020\053\021\040\024\041\025\037" +
    "\026\044\030\056\036\050\047\052\050\057\052\045\053" +
    "\055\001\002\000\004\050\134\001\002\000\046\004\ufffb" +
    "\007\ufffb\010\ufffb\014\ufffb\023\ufffb\027\ufffb\031\ufffb\033" +
    "\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb\040\ufffb\041\ufffb" +
    "\042\ufffb\043\ufffb\044\ufffb\046\ufffb\001\002\000\004\051" +
    "\133\001\002\000\040\012\047\013\042\016\054\017\051" +
    "\020\053\021\040\024\041\025\037\026\044\030\056\036" +
    "\050\047\052\050\057\052\045\053\055\001\002\000\046" +
    "\004\ufff7\007\ufff7\010\ufff7\014\ufff7\023\ufff7\027\ufff7\031" +
    "\ufff7\033\ufff7\034\ufff7\035\ufff7\036\ufff7\037\ufff7\040\ufff7" +
    "\041\ufff7\042\ufff7\043\ufff7\044\ufff7\046\ufff7\001\002\000" +
    "\042\012\047\013\042\016\054\017\051\020\053\021\040" +
    "\024\041\025\037\026\044\030\056\031\130\036\050\047" +
    "\052\050\057\052\045\053\055\001\002\000\052\004\uffc5" +
    "\007\uffc5\010\uffc5\014\uffc5\023\uffc5\027\uffc5\030\061\031" +
    "\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5" +
    "\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045\035\046\uffc5\001" +
    "\002\000\046\004\uffd6\007\uffd6\010\uffd6\014\uffd6\023\uffd6" +
    "\027\uffd6\031\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037" +
    "\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6\046\uffd6" +
    "\001\002\000\042\012\047\013\042\016\054\017\051\020" +
    "\053\021\040\024\041\025\037\026\044\030\056\031\uffdd" +
    "\036\050\047\052\050\057\052\045\053\055\001\002\000" +
    "\004\031\126\001\002\000\032\004\065\031\uffde\034\074" +
    "\035\071\036\064\037\075\040\072\041\067\042\070\043" +
    "\066\044\076\046\073\001\002\000\040\012\047\013\042" +
    "\016\054\017\051\020\053\021\040\024\041\025\037\026" +
    "\044\030\056\036\050\047\052\050\057\052\045\053\055" +
    "\001\002\000\040\012\047\013\042\016\054\017\051\020" +
    "\053\021\040\024\041\025\037\026\044\030\056\036\050" +
    "\047\052\050\057\052\045\053\055\001\002\000\042\012" +
    "\047\013\042\016\054\017\051\020\053\021\040\024\041" +
    "\025\037\026\044\030\056\036\050\047\052\050\057\051" +
    "\115\052\045\053\055\001\002\000\040\012\047\013\042" +
    "\016\054\017\051\020\053\021\040\024\041\025\037\026" +
    "\044\030\056\036\050\047\052\050\057\052\045\053\055" +
    "\001\002\000\040\012\047\013\042\016\054\017\051\020" +
    "\053\021\040\024\041\025\037\026\044\030\056\036\050" +
    "\047\052\050\057\052\045\053\055\001\002\000\040\012" +
    "\047\013\042\016\054\017\051\020\053\021\040\024\041" +
    "\025\037\026\044\030\056\036\050\047\052\050\057\052" +
    "\045\053\055\001\002\000\040\012\047\013\042\016\054" +
    "\017\051\020\053\021\040\024\041\025\037\026\044\030" +
    "\056\036\050\047\052\050\057\052\045\053\055\001\002" +
    "\000\004\050\105\001\002\000\040\012\047\013\042\016" +
    "\054\017\051\020\053\021\040\024\041\025\037\026\044" +
    "\030\056\036\050\047\052\050\057\052\045\053\055\001" +
    "\002\000\040\012\047\013\042\016\054\017\051\020\053" +
    "\021\040\024\041\025\037\026\044\030\056\036\050\047" +
    "\052\050\057\052\045\053\055\001\002\000\040\012\047" +
    "\013\042\016\054\017\051\020\053\021\040\024\041\025" +
    "\037\026\044\030\056\036\050\047\052\050\057\052\045" +
    "\053\055\001\002\000\040\004\uffd2\007\uffd2\010\uffd2\014" +
    "\uffd2\023\uffd2\027\uffd2\031\uffd2\033\uffd2\034\uffd2\035\071" +
    "\036\064\037\075\040\072\041\067\046\073\001\002\000" +
    "\046\004\uffce\007\uffce\010\uffce\014\uffce\023\uffce\027\uffce" +
    "\031\uffce\033\uffce\034\uffce\035\uffce\036\uffce\037\uffce\040" +
    "\uffce\041\067\042\uffce\043\uffce\044\uffce\046\073\001\002" +
    "\000\004\031\uffdf\001\002\000\032\004\065\031\uffdb\034" +
    "\103\035\071\036\064\037\075\040\072\041\067\042\070" +
    "\043\066\044\076\046\073\001\002\000\040\012\047\013" +
    "\042\016\054\017\051\020\053\021\040\024\041\025\037" +
    "\026\044\030\056\036\050\047\052\050\057\052\045\053" +
    "\055\001\002\000\004\031\uffdc\001\002\000\004\030\106" +
    "\001\002\000\042\012\047\013\042\016\054\017\051\020" +
    "\053\021\040\024\041\025\037\026\044\030\056\031\uffdd" +
    "\036\050\047\052\050\057\052\045\053\055\001\002\000" +
    "\004\031\110\001\002\000\046\004\uffc8\007\uffc8\010\uffc8" +
    "\014\uffc8\023\uffc8\027\uffc8\031\uffc8\033\uffc8\034\uffc8\035" +
    "\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8" +
    "\044\uffc8\046\uffc8\001\002\000\046\004\uffcd\007\uffcd\010" +
    "\uffcd\014\uffcd\023\uffcd\027\uffcd\031\uffcd\033\uffcd\034\uffcd" +
    "\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041\067\042\uffcd\043" +
    "\uffcd\044\uffcd\046\073\001\002\000\046\004\uffd0\007\uffd0" +
    "\010\uffd0\014\uffd0\023\uffd0\027\uffd0\031\uffd0\033\uffd0\034" +
    "\uffd0\035\uffd0\036\uffd0\037\075\040\072\041\067\042\uffd0" +
    "\043\uffd0\044\uffd0\046\073\001\002\000\040\004\uffd4\007" +
    "\uffd4\010\uffd4\014\uffd4\023\uffd4\027\uffd4\031\uffd4\033\uffd4" +
    "\034\uffd4\035\071\036\064\037\075\040\072\041\067\046" +
    "\073\001\002\000\046\004\uffcc\007\uffcc\010\uffcc\014\uffcc" +
    "\023\uffcc\027\uffcc\031\uffcc\033\uffcc\034\uffcc\035\uffcc\036" +
    "\uffcc\037\uffcc\040\uffcc\041\067\042\uffcc\043\uffcc\044\uffcc" +
    "\046\073\001\002\000\004\046\117\001\002\000\040\004" +
    "\uffd3\007\uffd3\010\uffd3\014\uffd3\023\uffd3\027\uffd3\031\uffd3" +
    "\033\uffd3\034\uffd3\035\071\036\064\037\075\040\072\041" +
    "\067\046\073\001\002\000\004\050\120\001\002\000\004" +
    "\030\121\001\002\000\042\012\047\013\042\016\054\017" +
    "\051\020\053\021\040\024\041\025\037\026\044\030\056" +
    "\031\uffdd\036\050\047\052\050\057\052\045\053\055\001" +
    "\002\000\004\031\123\001\002\000\046\004\uffc7\007\uffc7" +
    "\010\uffc7\014\uffc7\023\uffc7\027\uffc7\031\uffc7\033\uffc7\034" +
    "\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7" +
    "\043\uffc7\044\uffc7\046\uffc7\001\002\000\046\004\uffd1\007" +
    "\uffd1\010\uffd1\014\uffd1\023\uffd1\027\uffd1\031\uffd1\033\uffd1" +
    "\034\uffd1\035\071\036\064\037\075\040\072\041\067\042" +
    "\070\043\066\044\076\046\073\001\002\000\046\004\uffcf" +
    "\007\uffcf\010\uffcf\014\uffcf\023\uffcf\027\uffcf\031\uffcf\033" +
    "\uffcf\034\uffcf\035\uffcf\036\uffcf\037\075\040\072\041\067" +
    "\042\uffcf\043\uffcf\044\uffcf\046\073\001\002\000\046\004" +
    "\uffc9\007\uffc9\010\uffc9\014\uffc9\023\uffc9\027\uffc9\031\uffc9" +
    "\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041" +
    "\uffc9\042\uffc9\043\uffc9\044\uffc9\046\uffc9\001\002\000\030" +
    "\004\065\031\131\035\071\036\064\037\075\040\072\041" +
    "\067\042\070\043\066\044\076\046\073\001\002\000\046" +
    "\004\uffc3\007\uffc3\010\uffc3\014\uffc3\023\uffc3\027\uffc3\031" +
    "\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3" +
    "\041\uffc3\042\uffc3\043\uffc3\044\uffc3\046\uffc3\001\002\000" +
    "\046\004\uffc2\007\uffc2\010\uffc2\014\uffc2\023\uffc2\027\uffc2" +
    "\031\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040" +
    "\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2\046\uffc2\001\002" +
    "\000\046\004\uffca\007\uffca\010\uffca\014\uffca\023\uffca\027" +
    "\uffca\031\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca" +
    "\040\uffca\041\067\042\uffca\043\uffca\044\uffca\046\073\001" +
    "\002\000\046\004\uffc6\007\uffc6\010\uffc6\014\uffc6\023\uffc6" +
    "\027\uffc6\031\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037" +
    "\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6\046\uffc6" +
    "\001\002\000\004\032\135\001\002\000\014\005\030\015" +
    "\031\022\026\051\032\054\025\001\002\000\006\014\uffed" +
    "\045\035\001\002\000\004\014\140\001\002\000\040\012" +
    "\047\013\042\016\054\017\051\020\053\021\040\024\041" +
    "\025\037\026\044\030\056\036\050\047\052\050\057\052" +
    "\045\053\055\001\002\000\046\004\065\007\uffd7\010\uffd7" +
    "\014\uffd7\023\uffd7\027\uffd7\031\uffd7\033\uffd7\034\uffd7\035" +
    "\071\036\064\037\075\040\072\041\067\042\070\043\066" +
    "\044\076\046\073\001\002\000\046\004\uffcb\007\uffcb\010" +
    "\uffcb\014\uffcb\023\uffcb\027\uffcb\031\uffcb\033\uffcb\034\uffcb" +
    "\035\uffcb\036\uffcb\037\uffcb\040\uffcb\041\067\042\uffcb\043" +
    "\uffcb\044\uffcb\046\073\001\002\000\032\004\065\027\145" +
    "\033\144\035\071\036\064\037\075\040\072\041\067\042" +
    "\070\043\066\044\076\046\073\001\002\000\040\012\047" +
    "\013\042\016\054\017\051\020\053\021\040\024\041\025" +
    "\037\026\044\030\056\036\050\047\052\050\057\052\045" +
    "\053\055\001\002\000\050\004\uffe2\007\uffe2\010\uffe2\014" +
    "\uffe2\023\uffe2\027\uffe2\031\uffe2\033\uffe2\034\uffe2\035\uffe2" +
    "\036\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2\044" +
    "\uffe2\046\uffe2\050\uffe2\001\002\000\004\027\152\001\002" +
    "\000\032\004\065\027\uffe1\033\150\035\071\036\064\037" +
    "\075\040\072\041\067\042\070\043\066\044\076\046\073" +
    "\001\002\000\040\012\047\013\042\016\054\017\051\020" +
    "\053\021\040\024\041\025\037\026\044\030\056\036\050" +
    "\047\052\050\057\052\045\053\055\001\002\000\004\027" +
    "\uffe0\001\002\000\050\004\uffe3\007\uffe3\010\uffe3\014\uffe3" +
    "\023\uffe3\027\uffe3\031\uffe3\033\uffe3\034\uffe3\035\uffe3\036" +
    "\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3\043\uffe3\044\uffe3" +
    "\046\uffe3\050\uffe3\001\002\000\030\004\065\023\154\035" +
    "\071\036\064\037\075\040\072\041\067\042\070\043\066" +
    "\044\076\046\073\001\002\000\040\012\047\013\042\016" +
    "\054\017\051\020\053\021\040\024\041\025\037\026\044" +
    "\030\056\036\050\047\052\050\057\052\045\053\055\001" +
    "\002\000\046\004\065\007\uffda\010\156\014\uffda\023\uffda" +
    "\027\uffda\031\uffda\033\uffda\034\uffda\035\071\036\064\037" +
    "\075\040\072\041\067\042\070\043\066\044\076\046\073" +
    "\001\002\000\040\012\047\013\042\016\054\017\051\020" +
    "\053\021\040\024\041\025\037\026\044\030\056\036\050" +
    "\047\052\050\057\052\045\053\055\001\002\000\046\004" +
    "\065\007\uffd9\010\uffd9\014\uffd9\023\uffd9\027\uffd9\031\uffd9" +
    "\033\uffd9\034\uffd9\035\071\036\064\037\075\040\072\041" +
    "\067\042\070\043\066\044\076\046\073\001\002\000\046" +
    "\004\uffd5\007\uffd5\010\uffd5\014\uffd5\023\uffd5\027\uffd5\031" +
    "\uffd5\033\uffd5\034\uffd5\035\071\036\064\037\075\040\072" +
    "\041\067\042\070\043\066\044\076\046\073\001\002\000" +
    "\030\004\065\007\162\035\071\036\064\037\075\040\072" +
    "\041\067\042\070\043\066\044\076\046\073\001\002\000" +
    "\040\012\047\013\042\016\054\017\051\020\053\021\040" +
    "\024\041\025\037\026\044\030\056\036\050\047\052\050" +
    "\057\052\045\053\055\001\002\000\046\004\065\007\uffd8" +
    "\010\uffd8\014\uffd8\023\uffd8\027\uffd8\031\uffd8\033\uffd8\034" +
    "\uffd8\035\071\036\064\037\075\040\072\041\067\042\070" +
    "\043\066\044\076\046\073\001\002\000\006\027\uffef\050" +
    "\uffef\001\002\000\004\032\201\001\002\000\006\031\uffe9" +
    "\034\174\001\002\000\004\031\170\001\002\000\004\032" +
    "\171\001\002\000\014\005\030\015\031\022\026\051\032" +
    "\054\025\001\002\000\004\026\044\001\002\000\006\027" +
    "\uffeb\050\uffeb\001\002\000\004\050\165\001\002\000\006" +
    "\031\uffe6\034\177\001\002\000\004\031\uffea\001\002\000" +
    "\004\050\165\001\002\000\004\031\uffe7\001\002\000\014" +
    "\005\030\015\031\022\026\051\032\054\025\001\002\000" +
    "\010\031\uffe5\032\203\034\uffe5\001\002\000\014\012\047" +
    "\024\041\047\052\052\045\053\055\001\002\000\006\031" +
    "\uffe4\034\uffe4\001\002\000\004\027\206\001\002\000\006" +
    "\002\ufff4\006\ufff4\001\002\000\004\002\001\001\002\000" +
    "\004\002\ufff6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\206\000\006\004\004\005\003\001\001\000\006\004" +
    "\207\005\003\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\006\204\007\015\012\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\006\014" +
    "\007\015\012\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\006\020\007\015\012\016\001\001\000\010" +
    "\006\017\007\015\012\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\013\166\015\165" +
    "\001\001\000\004\002\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\010\033\011\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\003\035\016\042\020\045" +
    "\001\001\000\002\001\001\000\010\003\035\016\042\020" +
    "\160\001\001\000\010\003\035\016\042\020\157\001\001" +
    "\000\002\001\001\000\010\003\035\016\042\020\152\001" +
    "\001\000\002\001\001\000\010\003\035\016\042\020\142" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\003\035\016\042\020\141\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\003" +
    "\035\016\042\020\131\001\001\000\002\001\001\000\010" +
    "\003\035\016\042\020\126\001\001\000\004\011\057\001" +
    "\001\000\002\001\001\000\012\003\035\016\042\020\062" +
    "\021\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\003\035\016\042\020\124\001\001\000\010\003\035" +
    "\016\042\020\123\001\001\000\010\003\035\016\042\020" +
    "\115\001\001\000\010\003\035\016\042\020\113\001\001" +
    "\000\010\003\035\016\042\020\112\001\001\000\010\003" +
    "\035\016\042\020\111\001\001\000\010\003\035\016\042" +
    "\020\110\001\001\000\002\001\001\000\012\003\035\016" +
    "\042\020\101\022\100\001\001\000\010\003\035\016\042" +
    "\020\077\001\001\000\010\003\035\016\042\020\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\003\035\016\042\020\101\022" +
    "\103\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\003\035\016\042\020\062\021\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\003\035\016\042\020\062\021\121\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\002\135\001\001\000\006\010\136\011" +
    "\032\001\001\000\002\001\001\000\010\003\035\016\042" +
    "\020\140\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\003\035\016\042\017\145\020\146" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\003\035\016\042\017\150\020\146\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\003\035\016\042\020\154\001\001\000\002\001\001" +
    "\000\010\003\035\016\042\020\156\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\003\035" +
    "\016\042\020\162\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\002\171\001\001\000\004\016" +
    "\172\001\001\000\002\001\001\000\006\014\175\015\174" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\014" +
    "\177\015\174\001\001\000\002\001\001\000\004\002\201" +
    "\001\001\000\002\001\001\000\004\003\203\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$VSOPExtendedParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$VSOPExtendedParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$VSOPExtendedParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



   public void report_error(String message, Object info) {
      System.err.println(Parser.name + ":" + Parser.lastLine + ":" + Parser.lastColumn + ": syntax error " + message);
   }
   public void syntax_error(Symbol cur_token) throws Exception {
      Parser.lastLine = cur_token.line;
      Parser.lastColumn = cur_token.col;
      throw new Exception("symbol not within expected ones");
   }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$VSOPExtendedParser$actions {
  private final VSOPExtendedParser parser;

  /** Constructor */
  CUP$VSOPExtendedParser$actions(VSOPExtendedParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$VSOPExtendedParser$do_action_part00000000(
    int                        CUP$VSOPExtendedParser$act_num,
    java_cup.runtime.lr_parser CUP$VSOPExtendedParser$parser,
    java.util.Stack            CUP$VSOPExtendedParser$stack,
    int                        CUP$VSOPExtendedParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$VSOPExtendedParser$result;

      /* select the action based on the action number */
      switch (CUP$VSOPExtendedParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		ASTNode start_val = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		RESULT = start_val;
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$VSOPExtendedParser$parser.done_parsing();
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // types ::= BOOL 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 Parser.lastLine = t.line; Parser.lastColumn = t.col; RESULT = new ASTNode(SymbolValue.BOOL, null); RESULT.addProp("line", t.line + ""); RESULT.addProp("col", t.col + ""); RESULT.addProp("type", "bool"); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("types",0, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // types ::= UNIT 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 Parser.lastLine = t.line; Parser.lastColumn = t.col; RESULT = new ASTNode(SymbolValue.UNIT, null); RESULT.addProp("line", t.line + ""); RESULT.addProp("col", t.col + ""); RESULT.addProp("type", "unit"); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("types",0, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // types ::= STRING 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 Parser.lastLine = t.line; Parser.lastColumn = t.col; RESULT = new ASTNode(SymbolValue.STRING, null); RESULT.addProp("line", t.line + ""); RESULT.addProp("col", t.col + ""); RESULT.addProp("type", "string"); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("types",0, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // types ::= INT32 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 Parser.lastLine = t.line; Parser.lastColumn = t.col; RESULT = new ASTNode(SymbolValue.INT32, null); RESULT.addProp("line", t.line + ""); RESULT.addProp("col", t.col + ""); RESULT.addProp("type", "int32"); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("types",0, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // types ::= TYPE_IDENTIFIER 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 Parser.lastLine = t.line; Parser.lastColumn = t.col; RESULT = new ASTNode(SymbolValue.TYPE_IDENTIFIER, t.val); RESULT.addProp("line", t.line + ""); RESULT.addProp("col", t.col + ""); RESULT.addProp("type", ASTNode.typeValue(RESULT)); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("types",0, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lit ::= INTEGER_LITERAL 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 Parser.lastLine = t.line; Parser.lastColumn = t.col; RESULT = new ASTNode(SymbolValue.INTEGER_LITERAL, t.val); RESULT.addProp("line", t.line + ""); RESULT.addProp("col", t.col + ""); RESULT.addProp("type", "int32"); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("lit",1, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // lit ::= STRING_LITERAL 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 Parser.lastLine = t.line; Parser.lastColumn = t.col; RESULT = new ASTNode(SymbolValue.STRING_LITERAL, t.val); RESULT.addProp("line", t.line + ""); RESULT.addProp("col", t.col + ""); RESULT.addProp("type", "string"); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("lit",1, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // lit ::= TRUE 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 Parser.lastLine = t.line; Parser.lastColumn = t.col; RESULT = new ASTNode(SymbolValue.TRUE, null); RESULT.addProp("line", t.line + ""); RESULT.addProp("col", t.col + ""); RESULT.addProp("type", "bool"); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("lit",1, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // lit ::= FALSE 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 Parser.lastLine = t.line; Parser.lastColumn = t.col; RESULT = new ASTNode(SymbolValue.FALSE, null); RESULT.addProp("line", t.line + ""); RESULT.addProp("col", t.col + ""); RESULT.addProp("type", "bool"); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("lit",1, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // lit ::= NULL 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 Parser.lastLine = t.line; Parser.lastColumn = t.col; RESULT = new ASTNode(SymbolValue.NULL, null); RESULT.addProp("line", t.line + ""); RESULT.addProp("col", t.col + ""); RESULT.addProp("type", "object"); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("lit",1, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // program ::= class_all program 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode c = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 c.pushChild(t); t.shuffleClass(); RESULT = c; 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("program",2, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // program ::= class_all 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode("program", null); RESULT.addChild(t); t.shuffleClass(); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("program",2, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // class_all ::= CLASS TYPE_IDENTIFIER LBRACE class_body RBRACE 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		ASTNode c = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		 RESULT = c; ASTNode b = new ASTNode(SymbolValue.TYPE_IDENTIFIER, "Object"); b.addProp("line", t.line + ""); b.addProp("col", t.col + ""); c.addChild(b); ASTNode a = new ASTNode(SymbolValue.TYPE_IDENTIFIER, t.val); a.addProp("line", t.line + ""); a.addProp("col", t.col + ""); c.addChild(a); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("class_all",3, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // class_all ::= CLASS TYPE_IDENTIFIER EXTENDS TYPE_IDENTIFIER LBRACE class_body RBRACE 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-5)).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).right;
		Symbol e = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		ASTNode c = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		 RESULT = c; ASTNode b = new ASTNode(SymbolValue.TYPE_IDENTIFIER, e.val); b.addProp("line", e.line + ""); b.addProp("col", e.col + ""); c.addChild(b); ASTNode a = new ASTNode(SymbolValue.TYPE_IDENTIFIER, t.val); a.addProp("line", t.line + ""); a.addProp("col", t.col + ""); c.addChild(a); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("class_all",3, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-6)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // class_body ::= field class_body 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode c = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 c.pushChild(t); RESULT = c; 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("class_body",4, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // class_body ::= method class_body 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode c = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 c.pushChild(t); RESULT = c; 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("class_body",4, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // class_body ::= 
            {
              ASTNode RESULT =null;
		 RESULT = new ASTNode(SymbolValue.CLASS, null); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("class_body",4, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // field ::= OBJECT_IDENTIFIER COLON types may_assign SEMICOLON 
            {
              ASTNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		ASTNode m = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		 RESULT = new ASTNode("field", null); ASTNode a = new ASTNode(SymbolValue.OBJECT_IDENTIFIER, o.val); a.addProp("line", o.line + ""); a.addProp("col", o.col + ""); a.addProp("type", ASTNode.typeValue(t)); RESULT.addChild(a); RESULT.addChild(t); if(m != null) RESULT.addChild(m); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("field",5, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // may_assign ::= assign 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = t; 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("may_assign",6, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // may_assign ::= 
            {
              ASTNode RESULT =null;
		 RESULT = null; 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("may_assign",6, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // assign ::= ASSIGN expression 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode(SymbolValue.ASSIGN, null); RESULT.addChild(t); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("assign",7, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // method ::= OBJECT_IDENTIFIER LPAR formals RPAR COLON types block 
            {
              ASTNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-6)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-6)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)).right;
		ASTNode f = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode b = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode("method", null); RESULT.addProp("type", ASTNode.typeValue(t)); ASTNode a = new ASTNode(SymbolValue.OBJECT_IDENTIFIER, o.val); a.addProp("line", o.line + ""); a.addProp("col", o.col + ""); RESULT.addChild(a); if(f != null) RESULT.addChild(f); RESULT.addChild(t); RESULT.addChild(b); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("method",8, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-6)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // formals ::= formal COMMA formals_full 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode c = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = c; c.pushChild(t); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("formals",9, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // formals ::= formal 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode("formals", null); RESULT.pushChild(t); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("formals",9, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // formals ::= 
            {
              ASTNode RESULT =null;
		 RESULT = null; 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("formals",9, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // formals_full ::= formal COMMA formals_full 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode c = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = c; c.pushChild(t); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("formals_full",10, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // formals_full ::= formal 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode("formals", null); RESULT.pushChild(t); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("formals_full",10, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // formal ::= OBJECT_IDENTIFIER COLON types 
            {
              ASTNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode("formal", null); ASTNode a = new ASTNode(SymbolValue.OBJECT_IDENTIFIER, o.val); a.addProp("line", o.line + ""); a.addProp("col", o.col + ""); a.addProp("type", ASTNode.typeValue(t)); RESULT.addChild(a); RESULT.addChild(t); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("formal",11, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // formal ::= OBJECT_IDENTIFIER COLON types COLON lit 
            {
              ASTNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode l = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode("formal", null); ASTNode a = new ASTNode(SymbolValue.OBJECT_IDENTIFIER, o.val); a.addProp("line", o.line + ""); a.addProp("col", o.col + ""); a.addProp("type", ASTNode.typeValue(t)); RESULT.addChild(a); RESULT.addChild(t); RESULT.addChild(l); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("formal",11, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // block ::= LBRACE expression SEMICOLON block_full RBRACE 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		ASTNode b = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		 RESULT = b; b.pushChild(e); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("block",12, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // block ::= LBRACE expression RBRACE 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		 RESULT = new ASTNode("block", null); RESULT.addChild(e); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("block",12, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // block_full ::= expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode("block", null); RESULT.addChild(e); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("block_full",13, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // block_full ::= expression SEMICOLON block_full 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode b = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = b; b.pushChild(e); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("block_full",13, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // args ::= expression COMMA args_full 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode b = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = b; b.pushChild(e); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("args",15, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // args ::= expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode("args", null); RESULT.addChild(e); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("args",15, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // args ::= 
            {
              ASTNode RESULT =null;
		 RESULT = null; 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("args",15, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // args_full ::= expression COMMA args_full 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode b = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = b; b.pushChild(e); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("args_full",16, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // args_full ::= expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode("args", null); RESULT.addChild(e); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("args_full",16, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression ::= IF expression THEN expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode f = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode("if", null); RESULT.addChild(e); RESULT.addChild(f); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression ::= IF expression THEN expression ELSE expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode f = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode g = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode("if", null); RESULT.addChild(e); RESULT.addChild(f); RESULT.addChild(g); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-5)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression ::= WHILE expression DO expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode f = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode("while", null); RESULT.addChild(e); RESULT.addChild(f); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression ::= LET OBJECT_IDENTIFIER COLON types may_assign IN expression 
            {
              ASTNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-5)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-5)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode m = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode("let", null); ASTNode a = new ASTNode(SymbolValue.OBJECT_IDENTIFIER, o.val); a.addProp("line", o.line + ""); a.addProp("col", o.col + ""); a.addProp("type", ASTNode.typeValue(t)); RESULT.addChild(a); RESULT.addChild(t); if(m != null) RESULT.addChild(m); RESULT.addChild(e); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-6)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expression ::= OBJECT_IDENTIFIER assign 
            {
              ASTNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode m = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode("assign", null); ASTNode a = new ASTNode(SymbolValue.OBJECT_IDENTIFIER, o.val); a.addProp("line", o.line + ""); a.addProp("col", o.col + ""); RESULT.addChild(a); RESULT.addChild(m); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expression ::= NOT expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode(SymbolValue.NOT, null); RESULT.addChild(e); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression ::= expression EQUAL expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode f = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode(SymbolValue.EQUAL, null); RESULT.addChild(e); RESULT.addChild(f); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expression ::= expression LOWER expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode f = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode(SymbolValue.LOWER, null); RESULT.addChild(e); RESULT.addChild(f); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expression ::= expression LOWER_EQUAL expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode f = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode(SymbolValue.LOWER_EQUAL, null); RESULT.addChild(e); RESULT.addChild(f); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expression ::= expression AND expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode f = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode(SymbolValue.AND, null); RESULT.addChild(e); RESULT.addChild(f); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expression ::= expression PLUS expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode f = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode(SymbolValue.PLUS, null); RESULT.addChild(e); RESULT.addChild(f); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expression ::= expression MINUS expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode f = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode(SymbolValue.MINUS, null); RESULT.addChild(e); RESULT.addChild(f); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expression ::= expression TIMES expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode f = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode(SymbolValue.TIMES, null); RESULT.addChild(e); RESULT.addChild(f); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expression ::= expression DIV expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode f = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode(SymbolValue.DIV, null); RESULT.addChild(e); RESULT.addChild(f); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expression ::= expression POW expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode f = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode(SymbolValue.POW, null); RESULT.addChild(e); RESULT.addChild(f); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expression ::= MINUS expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode("uminus", null); RESULT.addChild(e); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expression ::= ISNULL expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode(SymbolValue.ISNULL, null); RESULT.addChild(e); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expression ::= OBJECT_IDENTIFIER LPAR args RPAR 
            {
              ASTNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		ASTNode m = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		 RESULT = new ASTNode("call", null); ASTNode b = new ASTNode(SymbolValue.OBJECT_IDENTIFIER, "self"); b.addProp("line", o.line + ""); b.addProp("col", o.col + ""); RESULT.addChild(b); ASTNode a = new ASTNode(SymbolValue.OBJECT_IDENTIFIER, o.val); a.addProp("line", o.line + ""); a.addProp("col", o.col + ""); RESULT.addChild(a); if(m != null) RESULT.addChild(m); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expression ::= expression DOT OBJECT_IDENTIFIER LPAR args RPAR 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-5)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-5)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		ASTNode m = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		 RESULT = new ASTNode("call", null); RESULT.addChild(e); ASTNode a = new ASTNode(SymbolValue.OBJECT_IDENTIFIER, o.val); a.addProp("line", o.line + ""); a.addProp("col", o.col + ""); RESULT.addChild(a); if(m != null) RESULT.addChild(m); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-5)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expression ::= expression LOWER TYPE_IDENTIFIER DOT OBJECT_IDENTIFIER LPAR args RPAR 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-7)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-5)).right;
		Symbol c = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-5)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		ASTNode m = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		 RESULT = new ASTNode("call", null); RESULT.addChild(e); ASTNode a = new ASTNode(SymbolValue.OBJECT_IDENTIFIER, o.val); a.addProp("line", o.line + ""); a.addProp("col", o.col + ""); RESULT.addChild(a); if(m != null) RESULT.addChild(m); RESULT.addProp("cast", c.val); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-7)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expression ::= NEW TYPE_IDENTIFIER 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode(SymbolValue.NEW, null); ASTNode a = new ASTNode(SymbolValue.TYPE_IDENTIFIER, t.val); a.addProp("line", t.line + ""); a.addProp("col", t.col + ""); RESULT.addChild(a); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expression ::= OBJECT_IDENTIFIER 
            {
              ASTNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode(SymbolValue.OBJECT_IDENTIFIER, o.val); RESULT.addProp("line", o.line + ""); RESULT.addProp("col", o.col + ""); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expression ::= lit 
            {
              ASTNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode l = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = l; 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expression ::= LPAR RPAR 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		 Parser.lastLine = t.line; Parser.lastColumn = t.col; RESULT = new ASTNode(SymbolValue.UNIT_VALUE, null); RESULT.addProp("line", t.line + ""); RESULT.addProp("col", t.col + ""); RESULT.addProp("type", "unit"); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expression ::= LPAR expression RPAR 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		 RESULT = e; 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expression ::= block 
            {
              ASTNode RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode b = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = b; 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$VSOPExtendedParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$VSOPExtendedParser$do_action(
    int                        CUP$VSOPExtendedParser$act_num,
    java_cup.runtime.lr_parser CUP$VSOPExtendedParser$parser,
    java.util.Stack            CUP$VSOPExtendedParser$stack,
    int                        CUP$VSOPExtendedParser$top)
    throws java.lang.Exception
    {
              return CUP$VSOPExtendedParser$do_action_part00000000(
                               CUP$VSOPExtendedParser$act_num,
                               CUP$VSOPExtendedParser$parser,
                               CUP$VSOPExtendedParser$stack,
                               CUP$VSOPExtendedParser$top);
    }
}

}
