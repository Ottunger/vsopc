
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package be.ac.ulg.vsop.parser;

import java.util.Stack;
import java_cup.runtime.*;
import be.ac.ulg.vsop.lexer.Symbol;
import be.ac.ulg.vsop.parser.SymbolValue;
import be.ac.ulg.vsop.parser.ASTNode;
import be.ac.ulg.vsop.parser.Parser;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class VSOPExtendedParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SymbolValue.class;
}

  /** Default constructor. */
  @Deprecated
  public VSOPExtendedParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public VSOPExtendedParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public VSOPExtendedParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\120\000\002\002\004\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\002\003\000\002\002\005\000" +
    "\002\002\005\000\002\024\005\000\002\024\006\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\004\004" +
    "\000\002\004\003\000\002\005\007\000\002\005\011\000" +
    "\002\006\004\000\002\006\004\000\002\006\002\000\002" +
    "\007\007\000\002\010\003\000\002\010\002\000\002\011" +
    "\004\000\002\012\011\000\002\013\005\000\002\013\003" +
    "\000\002\013\002\000\002\014\005\000\002\014\003\000" +
    "\002\015\005\000\002\015\007\000\002\016\007\000\002" +
    "\016\005\000\002\017\003\000\002\017\005\000\002\021" +
    "\005\000\002\021\003\000\002\021\002\000\002\022\005" +
    "\000\002\022\003\000\002\020\006\000\002\020\010\000" +
    "\002\020\006\000\002\020\011\000\002\020\005\000\002" +
    "\020\004\000\002\020\004\000\002\020\004\000\002\020" +
    "\005\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\020\005\000\002\020\005\000\002\020\005\000\002" +
    "\020\005\000\002\020\005\000\002\020\004\000\002\020" +
    "\004\000\002\020\006\000\002\020\010\000\002\020\012" +
    "\000\002\020\005\000\002\020\005\000\002\020\004\000" +
    "\002\020\003\000\002\020\004\000\002\020\003\000\002" +
    "\020\004\000\002\020\005\000\002\020\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\240\000\004\006\006\001\002\000\006\002\uffee\006" +
    "\006\001\002\000\004\002\241\001\002\000\004\051\007" +
    "\001\002\000\006\011\011\026\010\001\002\000\006\027" +
    "\uffe9\050\014\001\002\000\004\051\012\001\002\000\004" +
    "\026\013\001\002\000\006\027\uffe9\050\014\001\002\000" +
    "\006\030\023\032\024\001\002\000\004\027\022\001\002" +
    "\000\006\027\uffe9\050\014\001\002\000\006\027\uffe9\050" +
    "\014\001\002\000\004\027\uffea\001\002\000\004\027\uffeb" +
    "\001\002\000\006\002\uffec\006\uffec\001\002\000\006\031" +
    "\uffe1\050\217\001\002\000\016\005\030\015\031\022\026" +
    "\051\033\054\025\061\034\001\002\000\064\004\uffff\007" +
    "\uffff\010\uffff\014\uffff\023\uffff\026\uffff\027\uffff\031\uffff" +
    "\032\uffff\033\uffff\034\uffff\035\uffff\036\uffff\037\uffff\040" +
    "\uffff\041\uffff\042\uffff\043\uffff\044\uffff\045\uffff\046\uffff" +
    "\056\uffff\057\uffff\060\uffff\064\uffff\001\002\000\064\004" +
    "\ufffe\007\ufffe\010\ufffe\014\ufffe\023\ufffe\026\ufffe\027\ufffe" +
    "\031\ufffe\032\ufffe\033\ufffe\034\ufffe\035\ufffe\036\ufffe\037" +
    "\ufffe\040\ufffe\041\ufffe\042\ufffe\043\ufffe\044\ufffe\045\ufffe" +
    "\046\ufffe\056\ufffe\057\ufffe\060\ufffe\064\ufffe\001\002\000" +
    "\010\033\uffe6\045\042\064\040\001\002\000\064\004\000" +
    "\007\000\010\000\014\000\023\000\026\000\027\000\031" +
    "\000\032\000\033\000\034\000\035\000\036\000\037\000" +
    "\040\000\041\000\042\000\043\000\044\000\045\000\046" +
    "\000\056\000\057\000\060\000\064\000\001\002\000\064" +
    "\004\ufffd\007\ufffd\010\ufffd\014\ufffd\023\ufffd\026\ufffd\027" +
    "\ufffd\031\ufffd\032\ufffd\033\ufffd\034\ufffd\035\ufffd\036\ufffd" +
    "\037\ufffd\040\ufffd\041\ufffd\042\ufffd\043\ufffd\044\ufffd\045" +
    "\ufffd\046\ufffd\056\ufffd\057\ufffd\060\ufffd\064\ufffd\001\002" +
    "\000\022\014\ufffa\026\ufffa\031\ufffa\032\ufffa\033\ufffa\034" +
    "\ufffa\045\ufffa\064\035\001\002\000\064\004\ufffb\007\ufffb" +
    "\010\ufffb\014\ufffb\023\ufffb\026\ufffb\027\ufffb\031\ufffb\032" +
    "\ufffb\033\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb\040\ufffb" +
    "\041\ufffb\042\ufffb\043\ufffb\044\ufffb\045\ufffb\046\ufffb\056" +
    "\ufffb\057\ufffb\060\ufffb\064\ufffb\001\002\000\064\004\ufffc" +
    "\007\ufffc\010\ufffc\014\ufffc\023\ufffc\026\ufffc\027\ufffc\031" +
    "\ufffc\032\ufffc\033\ufffc\034\ufffc\035\ufffc\036\ufffc\037\ufffc" +
    "\040\ufffc\041\ufffc\042\ufffc\043\ufffc\044\ufffc\045\ufffc\046" +
    "\ufffc\056\ufffc\057\ufffc\060\ufffc\064\ufffc\001\002\000\004" +
    "\065\036\001\002\000\022\014\ufff9\026\ufff9\031\ufff9\032" +
    "\ufff9\033\ufff9\034\ufff9\045\ufff9\064\ufff9\001\002\000\006" +
    "\014\uffe7\033\uffe7\001\002\000\004\065\164\001\002\000" +
    "\004\033\216\001\002\000\044\012\055\013\050\016\063" +
    "\017\057\020\061\021\045\024\047\025\044\026\052\030" +
    "\065\036\056\047\060\050\066\052\053\053\064\062\062" +
    "\063\046\001\002\000\054\004\uffb5\007\uffb5\010\uffb5\014" +
    "\uffb5\023\uffb5\027\uffb5\031\uffb5\033\uffb5\034\uffb5\035\uffb5" +
    "\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044" +
    "\uffb5\046\uffb5\056\uffb5\057\uffb5\060\uffb5\001\002\000\044" +
    "\012\055\013\050\016\063\017\057\020\061\021\045\024" +
    "\047\025\044\026\052\030\065\036\056\047\060\050\066" +
    "\052\053\053\064\062\062\063\046\001\002\000\044\012" +
    "\055\013\050\016\063\017\057\020\061\021\045\024\047" +
    "\025\044\026\052\030\065\036\056\047\060\050\066\052" +
    "\053\053\064\062\062\063\046\001\002\000\044\012\055" +
    "\013\050\016\063\017\057\020\061\021\045\024\047\025" +
    "\044\026\052\030\065\036\056\047\060\050\066\052\053" +
    "\053\064\062\062\063\046\001\002\000\054\004\ufff2\007" +
    "\ufff2\010\ufff2\014\ufff2\023\ufff2\027\ufff2\031\ufff2\033\ufff2" +
    "\034\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2\041\ufff2\042" +
    "\ufff2\043\ufff2\044\ufff2\046\ufff2\056\ufff2\057\ufff2\060\ufff2" +
    "\001\002\000\044\012\055\013\050\016\063\017\057\020" +
    "\061\021\045\024\047\025\044\026\052\030\065\036\056" +
    "\047\060\050\066\052\053\053\064\062\062\063\046\001" +
    "\002\000\054\004\uffb2\007\uffb2\010\uffb2\014\uffb2\023\uffb2" +
    "\027\uffb2\031\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\037" +
    "\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\046\uffb2" +
    "\056\uffb2\057\uffb2\060\uffb2\001\002\000\044\012\055\013" +
    "\050\016\063\017\057\020\061\021\045\024\047\025\044" +
    "\026\052\030\065\036\056\047\060\050\066\052\053\053" +
    "\064\062\062\063\046\001\002\000\054\004\ufff3\007\ufff3" +
    "\010\ufff3\014\ufff3\023\ufff3\027\ufff3\031\ufff3\033\ufff3\034" +
    "\ufff3\035\ufff3\036\ufff3\037\ufff3\040\ufff3\041\ufff3\042\ufff3" +
    "\043\ufff3\044\ufff3\046\ufff3\056\ufff3\057\ufff3\060\ufff3\001" +
    "\002\000\054\004\077\007\uffe5\010\uffe5\014\uffe5\023\uffe5" +
    "\027\uffe5\031\uffe5\033\uffe5\034\uffe5\035\104\036\076\037" +
    "\110\040\106\041\101\042\103\043\100\044\113\046\105" +
    "\056\102\057\111\060\112\001\002\000\054\004\ufff1\007" +
    "\ufff1\010\ufff1\014\ufff1\023\ufff1\027\ufff1\031\ufff1\033\ufff1" +
    "\034\ufff1\035\ufff1\036\ufff1\037\ufff1\040\ufff1\041\ufff1\042" +
    "\ufff1\043\ufff1\044\ufff1\046\ufff1\056\ufff1\057\ufff1\060\ufff1" +
    "\001\002\000\044\012\055\013\050\016\063\017\057\020" +
    "\061\021\045\024\047\025\044\026\052\030\065\036\056" +
    "\047\060\050\066\052\053\053\064\062\062\063\046\001" +
    "\002\000\004\050\165\001\002\000\054\004\ufff5\007\ufff5" +
    "\010\ufff5\014\ufff5\023\ufff5\027\ufff5\031\ufff5\033\ufff5\034" +
    "\ufff5\035\ufff5\036\ufff5\037\ufff5\040\ufff5\041\ufff5\042\ufff5" +
    "\043\ufff5\044\ufff5\046\ufff5\056\ufff5\057\ufff5\060\ufff5\001" +
    "\002\000\016\005\030\015\031\022\026\051\033\054\025" +
    "\061\034\001\002\000\054\004\ufff4\007\ufff4\010\ufff4\014" +
    "\ufff4\023\ufff4\027\ufff4\031\ufff4\033\ufff4\034\ufff4\035\ufff4" +
    "\036\ufff4\037\ufff4\040\ufff4\041\ufff4\042\ufff4\043\ufff4\044" +
    "\ufff4\046\ufff4\056\ufff4\057\ufff4\060\ufff4\001\002\000\044" +
    "\012\055\013\050\016\063\017\057\020\061\021\045\024" +
    "\047\025\044\026\052\030\065\036\056\047\060\050\066" +
    "\052\053\053\064\062\062\063\046\001\002\000\054\004" +
    "\ufff0\007\ufff0\010\ufff0\014\ufff0\023\ufff0\027\ufff0\031\ufff0" +
    "\033\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0\041" +
    "\ufff0\042\ufff0\043\ufff0\044\ufff0\046\ufff0\056\ufff0\057\ufff0" +
    "\060\ufff0\001\002\000\046\012\055\013\050\016\063\017" +
    "\057\020\061\021\045\024\047\025\044\026\052\030\065" +
    "\031\153\036\056\047\060\050\066\052\053\053\064\062" +
    "\062\063\046\001\002\000\062\004\uffb7\007\uffb7\010\uffb7" +
    "\014\uffb7\023\uffb7\027\uffb7\030\071\031\uffb7\033\uffb7\034" +
    "\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7" +
    "\043\uffb7\044\uffb7\045\042\046\uffb7\056\uffb7\057\uffb7\060" +
    "\uffb7\064\070\001\002\000\054\004\uffce\007\uffce\010\uffce" +
    "\014\uffce\023\uffce\027\uffce\031\uffce\033\uffce\034\uffce\035" +
    "\uffce\036\uffce\037\uffce\040\uffce\041\uffce\042\uffce\043\uffce" +
    "\044\uffce\046\uffce\056\uffce\057\uffce\060\uffce\001\002\000" +
    "\004\047\147\001\002\000\046\012\055\013\050\016\063" +
    "\017\057\020\061\021\045\024\047\025\044\026\052\030" +
    "\065\031\uffd6\036\056\047\060\050\066\052\053\053\064" +
    "\062\062\063\046\001\002\000\056\004\uffb6\007\uffb6\010" +
    "\uffb6\014\uffb6\023\uffb6\027\uffb6\031\uffb6\033\uffb6\034\uffb6" +
    "\035\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6\043" +
    "\uffb6\044\uffb6\045\042\046\uffb6\056\uffb6\057\uffb6\060\uffb6" +
    "\001\002\000\054\004\uffcf\007\uffcf\010\uffcf\014\uffcf\023" +
    "\uffcf\027\uffcf\031\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf" +
    "\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf\046" +
    "\uffcf\056\uffcf\057\uffcf\060\uffcf\001\002\000\004\031\146" +
    "\001\002\000\040\004\077\031\uffd7\034\107\035\104\036" +
    "\076\037\110\040\106\041\101\042\103\043\100\044\113" +
    "\046\105\056\102\057\111\060\112\001\002\000\044\012" +
    "\055\013\050\016\063\017\057\020\061\021\045\024\047" +
    "\025\044\026\052\030\065\036\056\047\060\050\066\052" +
    "\053\053\064\062\062\063\046\001\002\000\044\012\055" +
    "\013\050\016\063\017\057\020\061\021\045\024\047\025" +
    "\044\026\052\030\065\036\056\047\060\050\066\052\053" +
    "\053\064\062\062\063\046\001\002\000\046\012\055\013" +
    "\050\016\063\017\057\020\061\021\045\024\047\025\044" +
    "\026\052\030\065\036\056\047\060\050\066\051\135\052" +
    "\053\053\064\062\062\063\046\001\002\000\044\012\055" +
    "\013\050\016\063\017\057\020\061\021\045\024\047\025" +
    "\044\026\052\030\065\036\056\047\060\050\066\052\053" +
    "\053\064\062\062\063\046\001\002\000\044\012\055\013" +
    "\050\016\063\017\057\020\061\021\045\024\047\025\044" +
    "\026\052\030\065\036\056\047\060\050\066\052\053\053" +
    "\064\062\062\063\046\001\002\000\044\012\055\013\050" +
    "\016\063\017\057\020\061\021\045\024\047\025\044\026" +
    "\052\030\065\036\056\047\060\050\066\052\053\053\064" +
    "\062\062\063\046\001\002\000\044\012\055\013\050\016" +
    "\063\017\057\020\061\021\045\024\047\025\044\026\052" +
    "\030\065\036\056\047\060\050\066\052\053\053\064\062" +
    "\062\063\046\001\002\000\004\050\125\001\002\000\044" +
    "\012\055\013\050\016\063\017\057\020\061\021\045\024" +
    "\047\025\044\026\052\030\065\036\056\047\060\050\066" +
    "\052\053\053\064\062\062\063\046\001\002\000\044\012" +
    "\055\013\050\016\063\017\057\020\061\021\045\024\047" +
    "\025\044\026\052\030\065\036\056\047\060\050\066\052" +
    "\053\053\064\062\062\063\046\001\002\000\044\012\055" +
    "\013\050\016\063\017\057\020\061\021\045\024\047\025" +
    "\044\026\052\030\065\036\056\047\060\050\066\052\053" +
    "\053\064\062\062\063\046\001\002\000\044\012\055\013" +
    "\050\016\063\017\057\020\061\021\045\024\047\025\044" +
    "\026\052\030\065\036\056\047\060\050\066\052\053\053" +
    "\064\062\062\063\046\001\002\000\044\012\055\013\050" +
    "\016\063\017\057\020\061\021\045\024\047\025\044\026" +
    "\052\030\065\036\056\047\060\050\066\052\053\053\064" +
    "\062\062\063\046\001\002\000\044\012\055\013\050\016" +
    "\063\017\057\020\061\021\045\024\047\025\044\026\052" +
    "\030\065\036\056\047\060\050\066\052\053\053\064\062" +
    "\062\063\046\001\002\000\042\004\uffc9\007\uffc9\010\uffc9" +
    "\014\uffc9\023\uffc9\027\uffc9\031\uffc9\033\uffc9\034\uffc9\035" +
    "\104\036\076\037\110\040\106\041\101\046\105\060\uffc9" +
    "\001\002\000\054\004\uffc5\007\uffc5\010\uffc5\014\uffc5\023" +
    "\uffc5\027\uffc5\031\uffc5\033\uffc5\034\uffc5\035\104\036\076" +
    "\037\110\040\106\041\101\042\103\043\100\044\113\046" +
    "\105\056\102\057\111\060\uffc5\001\002\000\042\004\uffc6" +
    "\007\uffc6\010\uffc6\014\uffc6\023\uffc6\027\uffc6\031\uffc6\033" +
    "\uffc6\034\uffc6\035\104\036\076\037\110\040\106\041\101" +
    "\046\105\060\uffc6\001\002\000\054\004\uffc2\007\uffc2\010" +
    "\uffc2\014\uffc2\023\uffc2\027\uffc2\031\uffc2\033\uffc2\034\uffc2" +
    "\035\uffc2\036\uffc2\037\uffc2\040\uffc2\041\101\042\uffc2\043" +
    "\uffc2\044\uffc2\046\105\056\uffc2\057\uffc2\060\uffc2\001\002" +
    "\000\004\031\uffd8\001\002\000\040\004\077\031\uffd4\034" +
    "\122\035\104\036\076\037\110\040\106\041\101\042\103" +
    "\043\100\044\113\046\105\056\102\057\111\060\112\001" +
    "\002\000\044\012\055\013\050\016\063\017\057\020\061" +
    "\021\045\024\047\025\044\026\052\030\065\036\056\047" +
    "\060\050\066\052\053\053\064\062\062\063\046\001\002" +
    "\000\004\031\uffd5\001\002\000\054\004\uffc1\007\uffc1\010" +
    "\uffc1\014\uffc1\023\uffc1\027\uffc1\031\uffc1\033\uffc1\034\uffc1" +
    "\035\uffc1\036\uffc1\037\uffc1\040\uffc1\041\101\042\uffc1\043" +
    "\uffc1\044\uffc1\046\105\056\uffc1\057\uffc1\060\uffc1\001\002" +
    "\000\004\030\126\001\002\000\046\012\055\013\050\016" +
    "\063\017\057\020\061\021\045\024\047\025\044\026\052" +
    "\030\065\031\uffd6\036\056\047\060\050\066\052\053\053" +
    "\064\062\062\063\046\001\002\000\004\031\130\001\002" +
    "\000\054\004\uffbc\007\uffbc\010\uffbc\014\uffbc\023\uffbc\027" +
    "\uffbc\031\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc" +
    "\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\046\uffbc\056" +
    "\uffbc\057\uffbc\060\uffbc\001\002\000\054\004\uffc4\007\uffc4" +
    "\010\uffc4\014\uffc4\023\uffc4\027\uffc4\031\uffc4\033\uffc4\034" +
    "\uffc4\035\uffc4\036\uffc4\037\110\040\106\041\101\042\uffc4" +
    "\043\uffc4\044\uffc4\046\105\056\uffc4\057\uffc4\060\uffc4\001" +
    "\002\000\042\004\uffcb\007\uffcb\010\uffcb\014\uffcb\023\uffcb" +
    "\027\uffcb\031\uffcb\033\uffcb\034\uffcb\035\104\036\076\037" +
    "\110\040\106\041\101\046\105\060\uffcb\001\002\000\042" +
    "\004\uffc7\007\uffc7\010\uffc7\014\uffc7\023\uffc7\027\uffc7\031" +
    "\uffc7\033\uffc7\034\uffc7\035\104\036\076\037\110\040\106" +
    "\041\101\046\105\060\uffc7\001\002\000\054\004\uffc0\007" +
    "\uffc0\010\uffc0\014\uffc0\023\uffc0\027\uffc0\031\uffc0\033\uffc0" +
    "\034\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041\101\042" +
    "\uffc0\043\uffc0\044\uffc0\046\105\056\uffc0\057\uffc0\060\uffc0" +
    "\001\002\000\004\046\137\001\002\000\042\004\uffca\007" +
    "\uffca\010\uffca\014\uffca\023\uffca\027\uffca\031\uffca\033\uffca" +
    "\034\uffca\035\104\036\076\037\110\040\106\041\101\046" +
    "\105\060\uffca\001\002\000\004\050\140\001\002\000\004" +
    "\030\141\001\002\000\046\012\055\013\050\016\063\017" +
    "\057\020\061\021\045\024\047\025\044\026\052\030\065" +
    "\031\uffd6\036\056\047\060\050\066\052\053\053\064\062" +
    "\062\063\046\001\002\000\004\031\143\001\002\000\054" +
    "\004\uffbb\007\uffbb\010\uffbb\014\uffbb\023\uffbb\027\uffbb\031" +
    "\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb" +
    "\041\uffbb\042\uffbb\043\uffbb\044\uffbb\046\uffbb\056\uffbb\057" +
    "\uffbb\060\uffbb\001\002\000\054\004\uffc8\007\uffc8\010\uffc8" +
    "\014\uffc8\023\uffc8\027\uffc8\031\uffc8\033\uffc8\034\uffc8\035" +
    "\104\036\076\037\110\040\106\041\101\042\103\043\100" +
    "\044\113\046\105\056\102\057\111\060\uffc8\001\002\000" +
    "\054\004\uffc3\007\uffc3\010\uffc3\014\uffc3\023\uffc3\027\uffc3" +
    "\031\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037\110\040" +
    "\106\041\101\042\uffc3\043\uffc3\044\uffc3\046\105\056\uffc3" +
    "\057\uffc3\060\uffc3\001\002\000\054\004\uffbd\007\uffbd\010" +
    "\uffbd\014\uffbd\023\uffbd\027\uffbd\031\uffbd\033\uffbd\034\uffbd" +
    "\035\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043" +
    "\uffbd\044\uffbd\046\uffbd\056\uffbd\057\uffbd\060\uffbd\001\002" +
    "\000\004\065\150\001\002\000\060\004\ufff7\007\ufff7\010" +
    "\ufff7\014\ufff7\023\ufff7\027\ufff7\031\ufff7\033\ufff7\034\ufff7" +
    "\035\ufff7\036\ufff7\037\ufff7\040\ufff7\041\ufff7\042\ufff7\043" +
    "\ufff7\044\ufff7\045\ufff7\046\ufff7\056\ufff7\057\ufff7\060\ufff7" +
    "\064\070\001\002\000\056\004\ufff6\007\ufff6\010\ufff6\014" +
    "\ufff6\023\ufff6\027\ufff6\031\ufff6\033\ufff6\034\ufff6\035\ufff6" +
    "\036\ufff6\037\ufff6\040\ufff6\041\ufff6\042\ufff6\043\ufff6\044" +
    "\ufff6\045\ufff6\046\ufff6\056\ufff6\057\ufff6\060\ufff6\001\002" +
    "\000\036\004\077\031\154\035\104\036\076\037\110\040" +
    "\106\041\101\042\103\043\100\044\113\046\105\056\102" +
    "\057\111\060\112\001\002\000\054\004\uffb4\007\uffb4\010" +
    "\uffb4\014\uffb4\023\uffb4\027\uffb4\031\uffb4\033\uffb4\034\uffb4" +
    "\035\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043" +
    "\uffb4\044\uffb4\046\uffb4\056\uffb4\057\uffb4\060\uffb4\001\002" +
    "\000\054\004\uffb3\007\uffb3\010\uffb3\014\uffb3\023\uffb3\027" +
    "\uffb3\031\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3\037\uffb3" +
    "\040\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3\046\uffb3\056" +
    "\uffb3\057\uffb3\060\uffb3\001\002\000\054\004\uffbe\007\uffbe" +
    "\010\uffbe\014\uffbe\023\uffbe\027\uffbe\031\uffbe\033\uffbe\034" +
    "\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041\101\042\uffbe" +
    "\043\uffbe\044\uffbe\046\105\056\uffbe\057\uffbe\060\uffbe\001" +
    "\002\000\004\064\162\001\002\000\056\004\uffb8\007\uffb8" +
    "\010\uffb8\014\uffb8\023\uffb8\027\uffb8\031\uffb8\033\uffb8\034" +
    "\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8" +
    "\043\uffb8\044\uffb8\046\uffb8\056\uffb8\057\uffb8\060\uffb8\064" +
    "\160\001\002\000\006\047\147\065\036\001\002\000\054" +
    "\004\uffb9\007\uffb9\010\uffb9\014\uffb9\023\uffb9\027\uffb9\031" +
    "\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9" +
    "\041\uffb9\042\uffb9\043\uffb9\044\uffb9\046\uffb9\056\uffb9\057" +
    "\uffb9\060\uffb9\001\002\000\006\047\147\065\164\001\002" +
    "\000\054\004\uffba\007\uffba\010\uffba\014\uffba\023\uffba\027" +
    "\uffba\031\uffba\033\uffba\034\uffba\035\uffba\036\uffba\037\uffba" +
    "\040\uffba\041\uffba\042\uffba\043\uffba\044\uffba\046\uffba\056" +
    "\uffba\057\uffba\060\uffba\001\002\000\022\014\ufff8\026\ufff8" +
    "\031\ufff8\032\ufff8\033\ufff8\034\ufff8\045\ufff8\064\ufff8\001" +
    "\002\000\004\032\166\001\002\000\016\005\030\015\031" +
    "\022\026\051\033\054\025\061\034\001\002\000\010\014" +
    "\uffe6\045\042\064\040\001\002\000\004\014\171\001\002" +
    "\000\044\012\055\013\050\016\063\017\057\020\061\021" +
    "\045\024\047\025\044\026\052\030\065\036\056\047\060" +
    "\050\066\052\053\053\064\062\062\063\046\001\002\000" +
    "\054\004\077\007\uffd0\010\uffd0\014\uffd0\023\uffd0\027\uffd0" +
    "\031\uffd0\033\uffd0\034\uffd0\035\104\036\076\037\110\040" +
    "\106\041\101\042\103\043\100\044\113\046\105\056\102" +
    "\057\111\060\112\001\002\000\054\004\uffbf\007\uffbf\010" +
    "\uffbf\014\uffbf\023\uffbf\027\uffbf\031\uffbf\033\uffbf\034\uffbf" +
    "\035\uffbf\036\uffbf\037\uffbf\040\uffbf\041\101\042\uffbf\043" +
    "\uffbf\044\uffbf\046\105\056\uffbf\057\uffbf\060\uffbf\001\002" +
    "\000\040\004\077\027\176\033\175\035\104\036\076\037" +
    "\110\040\106\041\101\042\103\043\100\044\113\046\105" +
    "\056\102\057\111\060\112\001\002\000\044\012\055\013" +
    "\050\016\063\017\057\020\061\021\045\024\047\025\044" +
    "\026\052\030\065\036\056\047\060\050\066\052\053\053" +
    "\064\062\062\063\046\001\002\000\056\004\uffdb\007\uffdb" +
    "\010\uffdb\014\uffdb\023\uffdb\027\uffdb\031\uffdb\033\uffdb\034" +
    "\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb" +
    "\043\uffdb\044\uffdb\046\uffdb\050\uffdb\056\uffdb\057\uffdb\060" +
    "\uffdb\001\002\000\004\027\203\001\002\000\040\004\077" +
    "\027\uffda\033\201\035\104\036\076\037\110\040\106\041" +
    "\101\042\103\043\100\044\113\046\105\056\102\057\111" +
    "\060\112\001\002\000\044\012\055\013\050\016\063\017" +
    "\057\020\061\021\045\024\047\025\044\026\052\030\065" +
    "\036\056\047\060\050\066\052\053\053\064\062\062\063" +
    "\046\001\002\000\004\027\uffd9\001\002\000\056\004\uffdc" +
    "\007\uffdc\010\uffdc\014\uffdc\023\uffdc\027\uffdc\031\uffdc\033" +
    "\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc" +
    "\042\uffdc\043\uffdc\044\uffdc\046\uffdc\050\uffdc\056\uffdc\057" +
    "\uffdc\060\uffdc\001\002\000\036\004\077\023\205\035\104" +
    "\036\076\037\110\040\106\041\101\042\103\043\100\044" +
    "\113\046\105\056\102\057\111\060\112\001\002\000\044" +
    "\012\055\013\050\016\063\017\057\020\061\021\045\024" +
    "\047\025\044\026\052\030\065\036\056\047\060\050\066" +
    "\052\053\053\064\062\062\063\046\001\002\000\054\004" +
    "\077\007\uffd3\010\207\014\uffd3\023\uffd3\027\uffd3\031\uffd3" +
    "\033\uffd3\034\uffd3\035\104\036\076\037\110\040\106\041" +
    "\101\042\103\043\100\044\113\046\105\056\102\057\111" +
    "\060\112\001\002\000\044\012\055\013\050\016\063\017" +
    "\057\020\061\021\045\024\047\025\044\026\052\030\065" +
    "\036\056\047\060\050\066\052\053\053\064\062\062\063" +
    "\046\001\002\000\054\004\077\007\uffd2\010\uffd2\014\uffd2" +
    "\023\uffd2\027\uffd2\031\uffd2\033\uffd2\034\uffd2\035\104\036" +
    "\076\037\110\040\106\041\101\042\103\043\100\044\113" +
    "\046\105\056\102\057\111\060\112\001\002\000\054\004" +
    "\uffcc\007\uffcc\010\uffcc\014\uffcc\023\uffcc\027\uffcc\031\uffcc" +
    "\033\uffcc\034\uffcc\035\104\036\076\037\110\040\106\041" +
    "\101\042\103\043\100\044\113\046\105\056\102\057\111" +
    "\060\uffcc\001\002\000\054\004\uffcd\007\uffcd\010\uffcd\014" +
    "\uffcd\023\uffcd\027\uffcd\031\uffcd\033\uffcd\034\uffcd\035\104" +
    "\036\076\037\110\040\106\041\101\042\103\043\100\044" +
    "\113\046\105\056\102\057\111\060\uffcd\001\002\000\036" +
    "\004\077\007\214\035\104\036\076\037\110\040\106\041" +
    "\101\042\103\043\100\044\113\046\105\056\102\057\111" +
    "\060\112\001\002\000\044\012\055\013\050\016\063\017" +
    "\057\020\061\021\045\024\047\025\044\026\052\030\065" +
    "\036\056\047\060\050\066\052\053\053\064\062\062\063" +
    "\046\001\002\000\054\004\077\007\uffd1\010\uffd1\014\uffd1" +
    "\023\uffd1\027\uffd1\031\uffd1\033\uffd1\034\uffd1\035\104\036" +
    "\076\037\110\040\106\041\101\042\103\043\100\044\113" +
    "\046\105\056\102\057\111\060\112\001\002\000\006\027" +
    "\uffe8\050\uffe8\001\002\000\004\032\233\001\002\000\006" +
    "\031\uffe2\034\226\001\002\000\004\031\222\001\002\000" +
    "\004\032\223\001\002\000\016\005\030\015\031\022\026" +
    "\051\033\054\025\061\034\001\002\000\006\026\052\064" +
    "\040\001\002\000\006\027\uffe4\050\uffe4\001\002\000\004" +
    "\050\217\001\002\000\006\031\uffdf\034\231\001\002\000" +
    "\004\031\uffe3\001\002\000\004\050\217\001\002\000\004" +
    "\031\uffe0\001\002\000\016\005\030\015\031\022\026\051" +
    "\033\054\025\061\034\001\002\000\012\031\uffde\032\235" +
    "\034\uffde\064\040\001\002\000\016\012\055\024\047\047" +
    "\060\052\053\053\064\062\062\001\002\000\006\031\uffdd" +
    "\034\uffdd\001\002\000\004\027\240\001\002\000\006\002" +
    "\uffed\006\uffed\001\002\000\004\002\001\001\002\000\004" +
    "\002\uffef\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\240\000\006\004\004\005\003\001\001\000\006\004" +
    "\241\005\003\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\006\236\007\015\012\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\006\014" +
    "\007\015\012\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\006\020\007\015\012\016\001\001\000\010" +
    "\006\017\007\015\012\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\013\220\015\217" +
    "\001\001\000\006\002\026\023\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\040\011\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\003\042\016\050\020\053\001\001\000\002" +
    "\001\001\000\010\003\042\016\050\020\212\001\001\000" +
    "\010\003\042\016\050\020\211\001\001\000\010\003\042" +
    "\016\050\020\210\001\001\000\002\001\001\000\010\003" +
    "\042\016\050\020\203\001\001\000\002\001\001\000\010" +
    "\003\042\016\050\020\173\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\042\016\050" +
    "\020\172\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\002\155\023\156\001\001\000\002\001\001\000\010" +
    "\003\042\016\050\020\154\001\001\000\002\001\001\000" +
    "\010\003\042\016\050\020\151\001\001\000\006\011\066" +
    "\024\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\003\042\016\050\020\074\021\073\001\001\000\004" +
    "\011\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\042\016\050\020\144\001\001" +
    "\000\010\003\042\016\050\020\143\001\001\000\010\003" +
    "\042\016\050\020\135\001\001\000\010\003\042\016\050" +
    "\020\133\001\001\000\010\003\042\016\050\020\132\001" +
    "\001\000\010\003\042\016\050\020\131\001\001\000\010" +
    "\003\042\016\050\020\130\001\001\000\002\001\001\000" +
    "\010\003\042\016\050\020\123\001\001\000\012\003\042" +
    "\016\050\020\120\022\117\001\001\000\010\003\042\016" +
    "\050\020\116\001\001\000\010\003\042\016\050\020\115" +
    "\001\001\000\010\003\042\016\050\020\114\001\001\000" +
    "\010\003\042\016\050\020\113\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\003\042\016\050" +
    "\020\120\022\122\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\003\042\016\050\020\074" +
    "\021\126\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\003\042\016\050\020\074" +
    "\021\141\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\150\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\162\001\001\000\004\024\160\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\002\166\023\031\001\001\000\006\010\167\011\036" +
    "\001\001\000\002\001\001\000\010\003\042\016\050\020" +
    "\171\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\003\042\016\050\017\176\020\177\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\003\042\016\050\017\201\020\177\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\003\042\016\050\020\205\001\001\000\002\001\001\000" +
    "\010\003\042\016\050\020\207\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\003\042\016\050\020\214\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\002\223\023\031" +
    "\001\001\000\004\016\224\001\001\000\002\001\001\000" +
    "\006\014\227\015\226\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\014\231\015\226\001\001\000\002\001" +
    "\001\000\006\002\233\023\031\001\001\000\002\001\001" +
    "\000\004\003\235\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$VSOPExtendedParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$VSOPExtendedParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$VSOPExtendedParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



   public void report_error(String message, Object info) {
      System.err.println(Parser.name + ":" + Parser.lastLine + ":" + Parser.lastColumn + ": syntax error " + message);
   }
   public void syntax_error(Symbol cur_token) throws Exception {
      Parser.lastLine = cur_token.line;
      Parser.lastColumn = cur_token.col;
      throw new Exception("symbol not within expected ones");
   }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$VSOPExtendedParser$actions {
  private final VSOPExtendedParser parser;

  /** Constructor */
  CUP$VSOPExtendedParser$actions(VSOPExtendedParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$VSOPExtendedParser$do_action_part00000000(
    int                        CUP$VSOPExtendedParser$act_num,
    java_cup.runtime.lr_parser CUP$VSOPExtendedParser$parser,
    java.util.Stack            CUP$VSOPExtendedParser$stack,
    int                        CUP$VSOPExtendedParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$VSOPExtendedParser$result;

      /* select the action based on the action number */
      switch (CUP$VSOPExtendedParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		ASTNode start_val = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		RESULT = start_val;
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$VSOPExtendedParser$parser.done_parsing();
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // simtypes ::= BOOL 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 Parser.lastLine = t.line; Parser.lastColumn = t.col; RESULT = new ASTNode(SymbolValue.BOOL, null); RESULT.addProp("line", t.line + ""); RESULT.addProp("col", t.col + ""); RESULT.addProp("type", "bool"); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("simtypes",17, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // simtypes ::= UNIT 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 Parser.lastLine = t.line; Parser.lastColumn = t.col; RESULT = new ASTNode(SymbolValue.UNIT, null); RESULT.addProp("line", t.line + ""); RESULT.addProp("col", t.col + ""); RESULT.addProp("type", "unit"); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("simtypes",17, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // simtypes ::= STRING 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 Parser.lastLine = t.line; Parser.lastColumn = t.col; RESULT = new ASTNode(SymbolValue.STRING, null); RESULT.addProp("line", t.line + ""); RESULT.addProp("col", t.col + ""); RESULT.addProp("type", "string"); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("simtypes",17, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // simtypes ::= INT32 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 Parser.lastLine = t.line; Parser.lastColumn = t.col; RESULT = new ASTNode(SymbolValue.INT32, null); RESULT.addProp("line", t.line + ""); RESULT.addProp("col", t.col + ""); RESULT.addProp("type", "int32"); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("simtypes",17, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // simtypes ::= FLOAT 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 Parser.lastLine = t.line; Parser.lastColumn = t.col; RESULT = new ASTNode(SymbolValue.FLOAT, null); RESULT.addProp("line", t.line + ""); RESULT.addProp("col", t.col + ""); RESULT.addProp("type", "float"); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("simtypes",17, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // simtypes ::= TYPE_IDENTIFIER 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 Parser.lastLine = t.line; Parser.lastColumn = t.col; RESULT = new ASTNode(SymbolValue.TYPE_IDENTIFIER, t.val); RESULT.addProp("line", t.line + ""); RESULT.addProp("col", t.col + ""); RESULT.addProp("type", ASTNode.typeValue(RESULT)); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("simtypes",17, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // types ::= simtypes 
            {
              ASTNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode s = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = s; 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("types",0, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // types ::= simtypes LBRK RBRK 
            {
              ASTNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode s = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		 RESULT = s; s.itype = SymbolValue.TYPE_IDENTIFIER; String st = RESULT.getProp("type").toString(); RESULT.addProp("type", "[]:" + st); s.setValue("[]:" + st); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("types",0, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // types ::= types LBRK RBRK 
            {
              ASTNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode s = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		 RESULT = s; String st = RESULT.getProp("type").toString(); RESULT.addProp("type", "[]:" + st); s.setValue("[]:" + st); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("types",0, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // deref ::= LBRK INTEGER_LITERAL RBRK 
            {
              Stack<Integer> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		 RESULT = new Stack<Integer>(); RESULT.push((Integer) t.val); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("deref",18, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // deref ::= LBRK INTEGER_LITERAL RBRK deref 
            {
              Stack<Integer> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		Stack<Integer> d = (Stack<Integer>)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = d; d.push((Integer) t.val); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("deref",18, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // lit ::= INTEGER_LITERAL 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 Parser.lastLine = t.line; Parser.lastColumn = t.col; RESULT = new ASTNode(SymbolValue.INTEGER_LITERAL, t.val); RESULT.addProp("line", t.line + ""); RESULT.addProp("col", t.col + ""); RESULT.addProp("type", "int32"); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("lit",1, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // lit ::= FLOAT_LITERAL 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 Parser.lastLine = t.line; Parser.lastColumn = t.col; RESULT = new ASTNode(SymbolValue.FLOAT_LITERAL, t.val); RESULT.addProp("line", t.line + ""); RESULT.addProp("col", t.col + ""); RESULT.addProp("type", "float"); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("lit",1, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // lit ::= STRING_LITERAL 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 Parser.lastLine = t.line; Parser.lastColumn = t.col; RESULT = new ASTNode(SymbolValue.STRING_LITERAL, t.val); RESULT.addProp("line", t.line + ""); RESULT.addProp("col", t.col + ""); RESULT.addProp("type", "string"); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("lit",1, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // lit ::= TRUE 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 Parser.lastLine = t.line; Parser.lastColumn = t.col; RESULT = new ASTNode(SymbolValue.TRUE, null); RESULT.addProp("line", t.line + ""); RESULT.addProp("col", t.col + ""); RESULT.addProp("type", "bool"); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("lit",1, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // lit ::= FALSE 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 Parser.lastLine = t.line; Parser.lastColumn = t.col; RESULT = new ASTNode(SymbolValue.FALSE, null); RESULT.addProp("line", t.line + ""); RESULT.addProp("col", t.col + ""); RESULT.addProp("type", "bool"); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("lit",1, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // lit ::= NULL 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 Parser.lastLine = t.line; Parser.lastColumn = t.col; RESULT = new ASTNode(SymbolValue.NULL, null); RESULT.addProp("line", t.line + ""); RESULT.addProp("col", t.col + ""); RESULT.addProp("type", "object"); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("lit",1, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // program ::= class_all program 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode c = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 c.pushChild(t); t.shuffleClass(); RESULT = c; 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("program",2, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // program ::= class_all 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode("program", null); RESULT.addChild(t); t.shuffleClass(); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("program",2, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // class_all ::= CLASS TYPE_IDENTIFIER LBRACE class_body RBRACE 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		ASTNode c = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		 RESULT = c; ASTNode b = new ASTNode(SymbolValue.TYPE_IDENTIFIER, "Object"); b.addProp("line", t.line + ""); b.addProp("col", t.col + ""); c.addChild(b); ASTNode a = new ASTNode(SymbolValue.TYPE_IDENTIFIER, t.val); a.addProp("line", t.line + ""); a.addProp("col", t.col + ""); c.addChild(a); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("class_all",3, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // class_all ::= CLASS TYPE_IDENTIFIER EXTENDS TYPE_IDENTIFIER LBRACE class_body RBRACE 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-5)).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).right;
		Symbol e = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		ASTNode c = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		 RESULT = c; ASTNode b = new ASTNode(SymbolValue.TYPE_IDENTIFIER, e.val); b.addProp("line", e.line + ""); b.addProp("col", e.col + ""); c.addChild(b); ASTNode a = new ASTNode(SymbolValue.TYPE_IDENTIFIER, t.val); a.addProp("line", t.line + ""); a.addProp("col", t.col + ""); c.addChild(a); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("class_all",3, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-6)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // class_body ::= field class_body 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode c = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 c.pushChild(t); RESULT = c; 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("class_body",4, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // class_body ::= method class_body 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode c = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 c.pushChild(t); RESULT = c; 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("class_body",4, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // class_body ::= 
            {
              ASTNode RESULT =null;
		 RESULT = new ASTNode(SymbolValue.CLASS, null); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("class_body",4, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // field ::= OBJECT_IDENTIFIER COLON types may_assign SEMICOLON 
            {
              ASTNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		ASTNode m = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		 RESULT = new ASTNode("field", null); ASTNode a = new ASTNode(SymbolValue.OBJECT_IDENTIFIER, o.val); a.addProp("line", o.line + ""); a.addProp("col", o.col + ""); a.addProp("type", ASTNode.typeValue(t)); RESULT.addChild(a); RESULT.addChild(t); if(m != null) RESULT.addChild(m); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("field",5, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // may_assign ::= assign 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = t; 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("may_assign",6, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // may_assign ::= 
            {
              ASTNode RESULT =null;
		 RESULT = null; 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("may_assign",6, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // assign ::= ASSIGN expression 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode(SymbolValue.ASSIGN, null); RESULT.addChild(t); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("assign",7, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // method ::= OBJECT_IDENTIFIER LPAR formals RPAR COLON types block 
            {
              ASTNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-6)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-6)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)).right;
		ASTNode f = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode b = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode("method", null); RESULT.addProp("type", ASTNode.typeValue(t)); ASTNode a = new ASTNode(SymbolValue.OBJECT_IDENTIFIER, o.val); a.addProp("line", o.line + ""); a.addProp("col", o.col + ""); RESULT.addChild(a); if(f != null) RESULT.addChild(f); RESULT.addChild(t); RESULT.addChild(b); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("method",8, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-6)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // formals ::= formal COMMA formals_full 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode c = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = c; c.pushChild(t); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("formals",9, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // formals ::= formal 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode("formals", null); RESULT.pushChild(t); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("formals",9, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // formals ::= 
            {
              ASTNode RESULT =null;
		 RESULT = null; 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("formals",9, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // formals_full ::= formal COMMA formals_full 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode c = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = c; c.pushChild(t); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("formals_full",10, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // formals_full ::= formal 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode("formals", null); RESULT.pushChild(t); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("formals_full",10, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // formal ::= OBJECT_IDENTIFIER COLON types 
            {
              ASTNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode("formal", null); ASTNode a = new ASTNode(SymbolValue.OBJECT_IDENTIFIER, o.val); a.addProp("line", o.line + ""); a.addProp("col", o.col + ""); a.addProp("type", ASTNode.typeValue(t)); RESULT.addChild(a); RESULT.addChild(t); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("formal",11, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // formal ::= OBJECT_IDENTIFIER COLON types COLON lit 
            {
              ASTNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode l = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode("formal", null); ASTNode a = new ASTNode(SymbolValue.OBJECT_IDENTIFIER, o.val); a.addProp("line", o.line + ""); a.addProp("col", o.col + ""); a.addProp("type", ASTNode.typeValue(t)); RESULT.addChild(a); RESULT.addChild(t); RESULT.addChild(l); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("formal",11, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // block ::= LBRACE expression SEMICOLON block_full RBRACE 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		ASTNode b = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		 RESULT = b; b.pushChild(e); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("block",12, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // block ::= LBRACE expression RBRACE 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		 RESULT = new ASTNode("block", null); RESULT.addChild(e); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("block",12, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // block_full ::= expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode("block", null); RESULT.addChild(e); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("block_full",13, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // block_full ::= expression SEMICOLON block_full 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode b = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = b; b.pushChild(e); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("block_full",13, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // args ::= expression COMMA args_full 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode b = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = b; b.pushChild(e); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("args",15, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // args ::= expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode("args", null); RESULT.addChild(e); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("args",15, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // args ::= 
            {
              ASTNode RESULT =null;
		 RESULT = null; 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("args",15, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // args_full ::= expression COMMA args_full 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode b = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = b; b.pushChild(e); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("args_full",16, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // args_full ::= expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode("args", null); RESULT.addChild(e); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("args_full",16, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expression ::= IF expression THEN expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode f = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode("if", null); RESULT.addChild(e); RESULT.addChild(f); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expression ::= IF expression THEN expression ELSE expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode f = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode g = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode("if", null); RESULT.addChild(e); RESULT.addChild(f); RESULT.addChild(g); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-5)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expression ::= WHILE expression DO expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode f = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode("while", null); RESULT.addChild(e); RESULT.addChild(f); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expression ::= LET OBJECT_IDENTIFIER COLON types may_assign IN expression 
            {
              ASTNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-5)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-5)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode m = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode("let", null); ASTNode a = new ASTNode(SymbolValue.OBJECT_IDENTIFIER, o.val); a.addProp("line", o.line + ""); a.addProp("col", o.col + ""); a.addProp("type", ASTNode.typeValue(t)); RESULT.addChild(a); RESULT.addChild(t); if(m != null) RESULT.addChild(m); RESULT.addChild(e); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-6)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expression ::= OBJECT_IDENTIFIER deref assign 
            {
              ASTNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		Stack<Integer> d = (Stack<Integer>)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode m = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode("assign", null); ASTNode a = new ASTNode(SymbolValue.OBJECT_IDENTIFIER, o.val); a.addProp("line", o.line + ""); a.addProp("col", o.col + ""); RESULT.addChild(a); RESULT.addChild(m); RESULT.addProp("deref", d); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expression ::= OBJECT_IDENTIFIER assign 
            {
              ASTNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode m = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode("assign", null); ASTNode a = new ASTNode(SymbolValue.OBJECT_IDENTIFIER, o.val); a.addProp("line", o.line + ""); a.addProp("col", o.col + ""); RESULT.addChild(a); RESULT.addChild(m); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expression ::= NOT expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode(SymbolValue.NOT, null); RESULT.addChild(e); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expression ::= SWITCH expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode(SymbolValue.SWITCH, null); RESULT.addChild(e); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expression ::= expression EQUAL expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode f = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode(SymbolValue.EQUAL, null); RESULT.addChild(e); RESULT.addChild(f); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expression ::= expression LOWER expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode f = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode(SymbolValue.LOWER, null); RESULT.addChild(e); RESULT.addChild(f); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expression ::= expression LOWER_EQUAL expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode f = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode(SymbolValue.LOWER_EQUAL, null); RESULT.addChild(e); RESULT.addChild(f); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expression ::= expression AND expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode f = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode(SymbolValue.AND, null); RESULT.addChild(e); RESULT.addChild(f); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expression ::= expression GREATER expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode f = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode(SymbolValue.GREATER, null); RESULT.addChild(e); RESULT.addChild(f); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expression ::= expression GREATER_EQUAL expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode f = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode(SymbolValue.GREATER_EQUAL, null); RESULT.addChild(e); RESULT.addChild(f); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expression ::= expression OR expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode f = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode(SymbolValue.OR, null); RESULT.addChild(e); RESULT.addChild(f); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expression ::= expression PLUS expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode f = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode(SymbolValue.PLUS, null); RESULT.addChild(e); RESULT.addChild(f); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expression ::= expression MINUS expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode f = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode(SymbolValue.MINUS, null); RESULT.addChild(e); RESULT.addChild(f); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expression ::= expression TIMES expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode f = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode(SymbolValue.TIMES, null); RESULT.addChild(e); RESULT.addChild(f); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expression ::= expression DIV expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode f = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode(SymbolValue.DIV, null); RESULT.addChild(e); RESULT.addChild(f); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expression ::= expression POW expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode f = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode(SymbolValue.POW, null); RESULT.addChild(e); RESULT.addChild(f); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expression ::= MINUS expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode("uminus", null); RESULT.addChild(e); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expression ::= ISNULL expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode(SymbolValue.ISNULL, null); RESULT.addChild(e); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expression ::= OBJECT_IDENTIFIER LPAR args RPAR 
            {
              ASTNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		ASTNode m = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		 RESULT = new ASTNode("call", null); ASTNode b = new ASTNode(SymbolValue.OBJECT_IDENTIFIER, "self"); b.addProp("line", o.line + ""); b.addProp("col", o.col + ""); RESULT.addChild(b); ASTNode a = new ASTNode(SymbolValue.OBJECT_IDENTIFIER, o.val); a.addProp("line", o.line + ""); a.addProp("col", o.col + ""); RESULT.addChild(a); if(m != null) RESULT.addChild(m); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expression ::= expression DOT OBJECT_IDENTIFIER LPAR args RPAR 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-5)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-5)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		ASTNode m = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		 RESULT = new ASTNode("call", null); RESULT.addChild(e); ASTNode a = new ASTNode(SymbolValue.OBJECT_IDENTIFIER, o.val); a.addProp("line", o.line + ""); a.addProp("col", o.col + ""); RESULT.addChild(a); if(m != null) RESULT.addChild(m); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-5)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expression ::= expression LOWER TYPE_IDENTIFIER DOT OBJECT_IDENTIFIER LPAR args RPAR 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-7)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-5)).right;
		Symbol c = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-5)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		ASTNode m = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		 RESULT = new ASTNode("call", null); RESULT.addChild(e); ASTNode a = new ASTNode(SymbolValue.OBJECT_IDENTIFIER, o.val); a.addProp("line", o.line + ""); a.addProp("col", o.col + ""); RESULT.addChild(a); if(m != null) RESULT.addChild(m); RESULT.addProp("cast", c.val); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-7)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expression ::= NEW types deref 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		Stack<Integer> d = (Stack<Integer>)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode(SymbolValue.NEW, null); RESULT.addChild(t); RESULT.addProp("deref", d); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expression ::= NEW simtypes deref 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		Stack<Integer> d = (Stack<Integer>)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode(SymbolValue.NEW, null); RESULT.addChild(t); RESULT.addProp("deref", d); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expression ::= NEW simtypes 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode(SymbolValue.NEW, null); RESULT.addChild(t); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expression ::= OBJECT_IDENTIFIER 
            {
              ASTNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode(SymbolValue.OBJECT_IDENTIFIER, o.val); RESULT.addProp("line", o.line + ""); RESULT.addProp("col", o.col + ""); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expression ::= OBJECT_IDENTIFIER deref 
            {
              ASTNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		Stack<Integer> d = (Stack<Integer>)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode(SymbolValue.OBJECT_IDENTIFIER, o.val); RESULT.addProp("line", o.line + ""); RESULT.addProp("col", o.col + ""); RESULT.addProp("deref", d); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expression ::= lit 
            {
              ASTNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode l = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = l; 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expression ::= LPAR RPAR 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		 Parser.lastLine = t.line; Parser.lastColumn = t.col; RESULT = new ASTNode(SymbolValue.UNIT_VALUE, null); RESULT.addProp("line", t.line + ""); RESULT.addProp("col", t.col + ""); RESULT.addProp("type", "unit"); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expression ::= LPAR expression RPAR 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		 RESULT = e; 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expression ::= block 
            {
              ASTNode RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode b = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = b; 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$VSOPExtendedParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$VSOPExtendedParser$do_action(
    int                        CUP$VSOPExtendedParser$act_num,
    java_cup.runtime.lr_parser CUP$VSOPExtendedParser$parser,
    java.util.Stack            CUP$VSOPExtendedParser$stack,
    int                        CUP$VSOPExtendedParser$top)
    throws java.lang.Exception
    {
              return CUP$VSOPExtendedParser$do_action_part00000000(
                               CUP$VSOPExtendedParser$act_num,
                               CUP$VSOPExtendedParser$parser,
                               CUP$VSOPExtendedParser$stack,
                               CUP$VSOPExtendedParser$top);
    }
}

}
