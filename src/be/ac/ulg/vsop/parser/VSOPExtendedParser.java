
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package be.ac.ulg.vsop.parser;

import java_cup.runtime.*;
import be.ac.ulg.vsop.lexer.Symbol;
import be.ac.ulg.vsop.parser.SymbolValue;
import be.ac.ulg.vsop.parser.ASTNode;
import be.ac.ulg.vsop.parser.Parser;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class VSOPExtendedParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SymbolValue.class;
}

  /** Default constructor. */
  @Deprecated
  public VSOPExtendedParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public VSOPExtendedParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public VSOPExtendedParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\106\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\004\004\000\002\004\003\000\002\005" +
    "\007\000\002\005\011\000\002\006\004\000\002\006\004" +
    "\000\002\006\002\000\002\007\007\000\002\010\003\000" +
    "\002\010\002\000\002\011\004\000\002\012\011\000\002" +
    "\013\005\000\002\013\003\000\002\013\002\000\002\014" +
    "\005\000\002\014\003\000\002\015\005\000\002\015\007" +
    "\000\002\016\007\000\002\016\005\000\002\017\003\000" +
    "\002\017\005\000\002\021\005\000\002\021\003\000\002" +
    "\021\002\000\002\022\005\000\002\022\003\000\002\020" +
    "\006\000\002\020\010\000\002\020\006\000\002\020\011" +
    "\000\002\020\004\000\002\020\004\000\002\020\005\000" +
    "\002\020\005\000\002\020\005\000\002\020\005\000\002" +
    "\020\005\000\002\020\005\000\002\020\005\000\002\020" +
    "\005\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\004\000\002\020\004\000" +
    "\002\020\006\000\002\020\010\000\002\020\012\000\002" +
    "\020\004\000\002\020\003\000\002\020\003\000\002\020" +
    "\004\000\002\020\005\000\002\020\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\216\000\004\006\006\001\002\000\006\002\ufff3\006" +
    "\006\001\002\000\004\002\217\001\002\000\004\051\007" +
    "\001\002\000\006\011\011\026\010\001\002\000\006\027" +
    "\uffee\050\014\001\002\000\004\051\012\001\002\000\004" +
    "\026\013\001\002\000\006\027\uffee\050\014\001\002\000" +
    "\006\030\023\032\024\001\002\000\004\027\022\001\002" +
    "\000\006\027\uffee\050\014\001\002\000\006\027\uffee\050" +
    "\014\001\002\000\004\027\uffef\001\002\000\004\027\ufff0" +
    "\001\002\000\006\002\ufff1\006\ufff1\001\002\000\006\031" +
    "\uffe6\050\175\001\002\000\016\005\030\015\031\022\026" +
    "\051\032\054\025\061\033\001\002\000\020\014\uffff\026" +
    "\uffff\031\uffff\032\uffff\033\uffff\034\uffff\045\uffff\001\002" +
    "\000\020\014\ufffe\026\ufffe\031\ufffe\032\ufffe\033\ufffe\034" +
    "\ufffe\045\ufffe\001\002\000\006\033\uffeb\045\036\001\002" +
    "\000\020\014\000\026\000\031\000\032\000\033\000\034" +
    "\000\045\000\001\002\000\020\014\ufffd\026\ufffd\031\ufffd" +
    "\032\ufffd\033\ufffd\034\ufffd\045\ufffd\001\002\000\020\014" +
    "\ufffb\026\ufffb\031\ufffb\032\ufffb\033\ufffb\034\ufffb\045\ufffb" +
    "\001\002\000\020\014\ufffc\026\ufffc\031\ufffc\032\ufffc\033" +
    "\ufffc\034\ufffc\045\ufffc\001\002\000\006\014\uffec\033\uffec" +
    "\001\002\000\004\033\174\001\002\000\042\012\050\013" +
    "\043\016\056\017\052\020\054\021\041\024\042\025\040" +
    "\026\045\030\060\036\051\047\053\050\061\052\046\053" +
    "\057\062\055\001\002\000\054\004\uffbf\007\uffbf\010\uffbf" +
    "\014\uffbf\023\uffbf\027\uffbf\031\uffbf\033\uffbf\034\uffbf\035" +
    "\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf" +
    "\044\uffbf\046\uffbf\056\uffbf\057\uffbf\060\uffbf\001\002\000" +
    "\042\012\050\013\043\016\056\017\052\020\054\021\041" +
    "\024\042\025\040\026\045\030\060\036\051\047\053\050" +
    "\061\052\046\053\057\062\055\001\002\000\042\012\050" +
    "\013\043\016\056\017\052\020\054\021\041\024\042\025" +
    "\040\026\045\030\060\036\051\047\053\050\061\052\046" +
    "\053\057\062\055\001\002\000\054\004\ufff7\007\ufff7\010" +
    "\ufff7\014\ufff7\023\ufff7\027\ufff7\031\ufff7\033\ufff7\034\ufff7" +
    "\035\ufff7\036\ufff7\037\ufff7\040\ufff7\041\ufff7\042\ufff7\043" +
    "\ufff7\044\ufff7\046\ufff7\056\ufff7\057\ufff7\060\ufff7\001\002" +
    "\000\042\012\050\013\043\016\056\017\052\020\054\021" +
    "\041\024\042\025\040\026\045\030\060\036\051\047\053" +
    "\050\061\052\046\053\057\062\055\001\002\000\054\004" +
    "\uffbc\007\uffbc\010\uffbc\014\uffbc\023\uffbc\027\uffbc\031\uffbc" +
    "\033\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041" +
    "\uffbc\042\uffbc\043\uffbc\044\uffbc\046\uffbc\056\uffbc\057\uffbc" +
    "\060\uffbc\001\002\000\042\012\050\013\043\016\056\017" +
    "\052\020\054\021\041\024\042\025\040\026\045\030\060" +
    "\036\051\047\053\050\061\052\046\053\057\062\055\001" +
    "\002\000\054\004\ufff8\007\ufff8\010\ufff8\014\ufff8\023\ufff8" +
    "\027\ufff8\031\ufff8\033\ufff8\034\ufff8\035\ufff8\036\ufff8\037" +
    "\ufff8\040\ufff8\041\ufff8\042\ufff8\043\ufff8\044\ufff8\046\ufff8" +
    "\056\ufff8\057\ufff8\060\ufff8\001\002\000\054\004\067\007" +
    "\uffea\010\uffea\014\uffea\023\uffea\027\uffea\031\uffea\033\uffea" +
    "\034\uffea\035\074\036\066\037\101\040\076\041\070\042" +
    "\073\043\071\044\102\046\075\056\072\057\100\060\103" +
    "\001\002\000\054\004\ufff6\007\ufff6\010\ufff6\014\ufff6\023" +
    "\ufff6\027\ufff6\031\ufff6\033\ufff6\034\ufff6\035\ufff6\036\ufff6" +
    "\037\ufff6\040\ufff6\041\ufff6\042\ufff6\043\ufff6\044\ufff6\046" +
    "\ufff6\056\ufff6\057\ufff6\060\ufff6\001\002\000\042\012\050" +
    "\013\043\016\056\017\052\020\054\021\041\024\042\025" +
    "\040\026\045\030\060\036\051\047\053\050\061\052\046" +
    "\053\057\062\055\001\002\000\004\050\144\001\002\000" +
    "\054\004\ufffa\007\ufffa\010\ufffa\014\ufffa\023\ufffa\027\ufffa" +
    "\031\ufffa\033\ufffa\034\ufffa\035\ufffa\036\ufffa\037\ufffa\040" +
    "\ufffa\041\ufffa\042\ufffa\043\ufffa\044\ufffa\046\ufffa\056\ufffa" +
    "\057\ufffa\060\ufffa\001\002\000\004\051\143\001\002\000" +
    "\054\004\ufff9\007\ufff9\010\ufff9\014\ufff9\023\ufff9\027\ufff9" +
    "\031\ufff9\033\ufff9\034\ufff9\035\ufff9\036\ufff9\037\ufff9\040" +
    "\ufff9\041\ufff9\042\ufff9\043\ufff9\044\ufff9\046\ufff9\056\ufff9" +
    "\057\ufff9\060\ufff9\001\002\000\042\012\050\013\043\016" +
    "\056\017\052\020\054\021\041\024\042\025\040\026\045" +
    "\030\060\036\051\047\053\050\061\052\046\053\057\062" +
    "\055\001\002\000\054\004\ufff5\007\ufff5\010\ufff5\014\ufff5" +
    "\023\ufff5\027\ufff5\031\ufff5\033\ufff5\034\ufff5\035\ufff5\036" +
    "\ufff5\037\ufff5\040\ufff5\041\ufff5\042\ufff5\043\ufff5\044\ufff5" +
    "\046\ufff5\056\ufff5\057\ufff5\060\ufff5\001\002\000\044\012" +
    "\050\013\043\016\056\017\052\020\054\021\041\024\042" +
    "\025\040\026\045\030\060\031\140\036\051\047\053\050" +
    "\061\052\046\053\057\062\055\001\002\000\060\004\uffc0" +
    "\007\uffc0\010\uffc0\014\uffc0\023\uffc0\027\uffc0\030\063\031" +
    "\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0" +
    "\041\uffc0\042\uffc0\043\uffc0\044\uffc0\045\036\046\uffc0\056" +
    "\uffc0\057\uffc0\060\uffc0\001\002\000\054\004\uffd4\007\uffd4" +
    "\010\uffd4\014\uffd4\023\uffd4\027\uffd4\031\uffd4\033\uffd4\034" +
    "\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4" +
    "\043\uffd4\044\uffd4\046\uffd4\056\uffd4\057\uffd4\060\uffd4\001" +
    "\002\000\044\012\050\013\043\016\056\017\052\020\054" +
    "\021\041\024\042\025\040\026\045\030\060\031\uffdb\036" +
    "\051\047\053\050\061\052\046\053\057\062\055\001\002" +
    "\000\004\031\136\001\002\000\040\004\067\031\uffdc\034" +
    "\077\035\074\036\066\037\101\040\076\041\070\042\073" +
    "\043\071\044\102\046\075\056\072\057\100\060\103\001" +
    "\002\000\042\012\050\013\043\016\056\017\052\020\054" +
    "\021\041\024\042\025\040\026\045\030\060\036\051\047" +
    "\053\050\061\052\046\053\057\062\055\001\002\000\042" +
    "\012\050\013\043\016\056\017\052\020\054\021\041\024" +
    "\042\025\040\026\045\030\060\036\051\047\053\050\061" +
    "\052\046\053\057\062\055\001\002\000\042\012\050\013" +
    "\043\016\056\017\052\020\054\021\041\024\042\025\040" +
    "\026\045\030\060\036\051\047\053\050\061\052\046\053" +
    "\057\062\055\001\002\000\044\012\050\013\043\016\056" +
    "\017\052\020\054\021\041\024\042\025\040\026\045\030" +
    "\060\036\051\047\053\050\061\051\124\052\046\053\057" +
    "\062\055\001\002\000\042\012\050\013\043\016\056\017" +
    "\052\020\054\021\041\024\042\025\040\026\045\030\060" +
    "\036\051\047\053\050\061\052\046\053\057\062\055\001" +
    "\002\000\042\012\050\013\043\016\056\017\052\020\054" +
    "\021\041\024\042\025\040\026\045\030\060\036\051\047" +
    "\053\050\061\052\046\053\057\062\055\001\002\000\042" +
    "\012\050\013\043\016\056\017\052\020\054\021\041\024" +
    "\042\025\040\026\045\030\060\036\051\047\053\050\061" +
    "\052\046\053\057\062\055\001\002\000\004\050\115\001" +
    "\002\000\042\012\050\013\043\016\056\017\052\020\054" +
    "\021\041\024\042\025\040\026\045\030\060\036\051\047" +
    "\053\050\061\052\046\053\057\062\055\001\002\000\042" +
    "\012\050\013\043\016\056\017\052\020\054\021\041\024" +
    "\042\025\040\026\045\030\060\036\051\047\053\050\061" +
    "\052\046\053\057\062\055\001\002\000\042\012\050\013" +
    "\043\016\056\017\052\020\054\021\041\024\042\025\040" +
    "\026\045\030\060\036\051\047\053\050\061\052\046\053" +
    "\057\062\055\001\002\000\042\012\050\013\043\016\056" +
    "\017\052\020\054\021\041\024\042\025\040\026\045\030" +
    "\060\036\051\047\053\050\061\052\046\053\057\062\055" +
    "\001\002\000\042\012\050\013\043\016\056\017\052\020" +
    "\054\021\041\024\042\025\040\026\045\030\060\036\051" +
    "\047\053\050\061\052\046\053\057\062\055\001\002\000" +
    "\042\012\050\013\043\016\056\017\052\020\054\021\041" +
    "\024\042\025\040\026\045\030\060\036\051\047\053\050" +
    "\061\052\046\053\057\062\055\001\002\000\054\004\uffcc" +
    "\007\uffcc\010\uffcc\014\uffcc\023\uffcc\027\uffcc\031\uffcc\033" +
    "\uffcc\034\uffcc\035\074\036\066\037\101\040\076\041\070" +
    "\042\073\043\071\044\102\046\075\056\072\057\100\060" +
    "\uffcc\001\002\000\042\004\uffd0\007\uffd0\010\uffd0\014\uffd0" +
    "\023\uffd0\027\uffd0\031\uffd0\033\uffd0\034\uffd0\035\074\036" +
    "\066\037\101\040\076\041\070\046\075\060\uffd0\001\002" +
    "\000\054\004\uffc9\007\uffc9\010\uffc9\014\uffc9\023\uffc9\027" +
    "\uffc9\031\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9" +
    "\040\uffc9\041\070\042\uffc9\043\uffc9\044\uffc9\046\075\056" +
    "\uffc9\057\uffc9\060\uffc9\001\002\000\042\004\uffcd\007\uffcd" +
    "\010\uffcd\014\uffcd\023\uffcd\027\uffcd\031\uffcd\033\uffcd\034" +
    "\uffcd\035\074\036\066\037\101\040\076\041\070\046\075" +
    "\060\uffcd\001\002\000\004\031\uffdd\001\002\000\040\004" +
    "\067\031\uffd9\034\112\035\074\036\066\037\101\040\076" +
    "\041\070\042\073\043\071\044\102\046\075\056\072\057" +
    "\100\060\103\001\002\000\042\012\050\013\043\016\056" +
    "\017\052\020\054\021\041\024\042\025\040\026\045\030" +
    "\060\036\051\047\053\050\061\052\046\053\057\062\055" +
    "\001\002\000\004\031\uffda\001\002\000\054\004\uffc8\007" +
    "\uffc8\010\uffc8\014\uffc8\023\uffc8\027\uffc8\031\uffc8\033\uffc8" +
    "\034\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\041\070\042" +
    "\uffc8\043\uffc8\044\uffc8\046\075\056\uffc8\057\uffc8\060\uffc8" +
    "\001\002\000\004\030\116\001\002\000\044\012\050\013" +
    "\043\016\056\017\052\020\054\021\041\024\042\025\040" +
    "\026\045\030\060\031\uffdb\036\051\047\053\050\061\052" +
    "\046\053\057\062\055\001\002\000\004\031\120\001\002" +
    "\000\054\004\uffc3\007\uffc3\010\uffc3\014\uffc3\023\uffc3\027" +
    "\uffc3\031\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3" +
    "\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\046\uffc3\056" +
    "\uffc3\057\uffc3\060\uffc3\001\002\000\054\004\uffcb\007\uffcb" +
    "\010\uffcb\014\uffcb\023\uffcb\027\uffcb\031\uffcb\033\uffcb\034" +
    "\uffcb\035\uffcb\036\uffcb\037\101\040\076\041\070\042\uffcb" +
    "\043\uffcb\044\uffcb\046\075\056\uffcb\057\uffcb\060\uffcb\001" +
    "\002\000\042\004\uffd2\007\uffd2\010\uffd2\014\uffd2\023\uffd2" +
    "\027\uffd2\031\uffd2\033\uffd2\034\uffd2\035\074\036\066\037" +
    "\101\040\076\041\070\046\075\060\uffd2\001\002\000\042" +
    "\004\uffce\007\uffce\010\uffce\014\uffce\023\uffce\027\uffce\031" +
    "\uffce\033\uffce\034\uffce\035\074\036\066\037\101\040\076" +
    "\041\070\046\075\060\uffce\001\002\000\004\046\126\001" +
    "\002\000\042\004\uffd1\007\uffd1\010\uffd1\014\uffd1\023\uffd1" +
    "\027\uffd1\031\uffd1\033\uffd1\034\uffd1\035\074\036\066\037" +
    "\101\040\076\041\070\046\075\060\uffd1\001\002\000\004" +
    "\050\127\001\002\000\004\030\130\001\002\000\044\012" +
    "\050\013\043\016\056\017\052\020\054\021\041\024\042" +
    "\025\040\026\045\030\060\031\uffdb\036\051\047\053\050" +
    "\061\052\046\053\057\062\055\001\002\000\004\031\132" +
    "\001\002\000\054\004\uffc2\007\uffc2\010\uffc2\014\uffc2\023" +
    "\uffc2\027\uffc2\031\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2" +
    "\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2\046" +
    "\uffc2\056\uffc2\057\uffc2\060\uffc2\001\002\000\054\004\uffc7" +
    "\007\uffc7\010\uffc7\014\uffc7\023\uffc7\027\uffc7\031\uffc7\033" +
    "\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7\041\070" +
    "\042\uffc7\043\uffc7\044\uffc7\046\075\056\uffc7\057\uffc7\060" +
    "\uffc7\001\002\000\054\004\uffcf\007\uffcf\010\uffcf\014\uffcf" +
    "\023\uffcf\027\uffcf\031\uffcf\033\uffcf\034\uffcf\035\074\036" +
    "\066\037\101\040\076\041\070\042\073\043\071\044\102" +
    "\046\075\056\072\057\100\060\uffcf\001\002\000\054\004" +
    "\uffca\007\uffca\010\uffca\014\uffca\023\uffca\027\uffca\031\uffca" +
    "\033\uffca\034\uffca\035\uffca\036\uffca\037\101\040\076\041" +
    "\070\042\uffca\043\uffca\044\uffca\046\075\056\uffca\057\uffca" +
    "\060\uffca\001\002\000\054\004\uffc4\007\uffc4\010\uffc4\014" +
    "\uffc4\023\uffc4\027\uffc4\031\uffc4\033\uffc4\034\uffc4\035\uffc4" +
    "\036\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\044" +
    "\uffc4\046\uffc4\056\uffc4\057\uffc4\060\uffc4\001\002\000\036" +
    "\004\067\031\141\035\074\036\066\037\101\040\076\041" +
    "\070\042\073\043\071\044\102\046\075\056\072\057\100" +
    "\060\103\001\002\000\054\004\uffbe\007\uffbe\010\uffbe\014" +
    "\uffbe\023\uffbe\027\uffbe\031\uffbe\033\uffbe\034\uffbe\035\uffbe" +
    "\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe\044" +
    "\uffbe\046\uffbe\056\uffbe\057\uffbe\060\uffbe\001\002\000\054" +
    "\004\uffbd\007\uffbd\010\uffbd\014\uffbd\023\uffbd\027\uffbd\031" +
    "\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd" +
    "\041\uffbd\042\uffbd\043\uffbd\044\uffbd\046\uffbd\056\uffbd\057" +
    "\uffbd\060\uffbd\001\002\000\054\004\uffc5\007\uffc5\010\uffc5" +
    "\014\uffc5\023\uffc5\027\uffc5\031\uffc5\033\uffc5\034\uffc5\035" +
    "\uffc5\036\uffc5\037\uffc5\040\uffc5\041\070\042\uffc5\043\uffc5" +
    "\044\uffc5\046\075\056\uffc5\057\uffc5\060\uffc5\001\002\000" +
    "\054\004\uffc1\007\uffc1\010\uffc1\014\uffc1\023\uffc1\027\uffc1" +
    "\031\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040" +
    "\uffc1\041\uffc1\042\uffc1\043\uffc1\044\uffc1\046\uffc1\056\uffc1" +
    "\057\uffc1\060\uffc1\001\002\000\004\032\145\001\002\000" +
    "\016\005\030\015\031\022\026\051\032\054\025\061\033" +
    "\001\002\000\006\014\uffeb\045\036\001\002\000\004\014" +
    "\150\001\002\000\042\012\050\013\043\016\056\017\052" +
    "\020\054\021\041\024\042\025\040\026\045\030\060\036" +
    "\051\047\053\050\061\052\046\053\057\062\055\001\002" +
    "\000\054\004\067\007\uffd5\010\uffd5\014\uffd5\023\uffd5\027" +
    "\uffd5\031\uffd5\033\uffd5\034\uffd5\035\074\036\066\037\101" +
    "\040\076\041\070\042\073\043\071\044\102\046\075\056" +
    "\072\057\100\060\103\001\002\000\054\004\uffc6\007\uffc6" +
    "\010\uffc6\014\uffc6\023\uffc6\027\uffc6\031\uffc6\033\uffc6\034" +
    "\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6\041\070\042\uffc6" +
    "\043\uffc6\044\uffc6\046\075\056\uffc6\057\uffc6\060\uffc6\001" +
    "\002\000\040\004\067\027\155\033\154\035\074\036\066" +
    "\037\101\040\076\041\070\042\073\043\071\044\102\046" +
    "\075\056\072\057\100\060\103\001\002\000\042\012\050" +
    "\013\043\016\056\017\052\020\054\021\041\024\042\025" +
    "\040\026\045\030\060\036\051\047\053\050\061\052\046" +
    "\053\057\062\055\001\002\000\056\004\uffe0\007\uffe0\010" +
    "\uffe0\014\uffe0\023\uffe0\027\uffe0\031\uffe0\033\uffe0\034\uffe0" +
    "\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\043" +
    "\uffe0\044\uffe0\046\uffe0\050\uffe0\056\uffe0\057\uffe0\060\uffe0" +
    "\001\002\000\004\027\162\001\002\000\040\004\067\027" +
    "\uffdf\033\160\035\074\036\066\037\101\040\076\041\070" +
    "\042\073\043\071\044\102\046\075\056\072\057\100\060" +
    "\103\001\002\000\042\012\050\013\043\016\056\017\052" +
    "\020\054\021\041\024\042\025\040\026\045\030\060\036" +
    "\051\047\053\050\061\052\046\053\057\062\055\001\002" +
    "\000\004\027\uffde\001\002\000\056\004\uffe1\007\uffe1\010" +
    "\uffe1\014\uffe1\023\uffe1\027\uffe1\031\uffe1\033\uffe1\034\uffe1" +
    "\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1\043" +
    "\uffe1\044\uffe1\046\uffe1\050\uffe1\056\uffe1\057\uffe1\060\uffe1" +
    "\001\002\000\036\004\067\023\164\035\074\036\066\037" +
    "\101\040\076\041\070\042\073\043\071\044\102\046\075" +
    "\056\072\057\100\060\103\001\002\000\042\012\050\013" +
    "\043\016\056\017\052\020\054\021\041\024\042\025\040" +
    "\026\045\030\060\036\051\047\053\050\061\052\046\053" +
    "\057\062\055\001\002\000\054\004\067\007\uffd8\010\166" +
    "\014\uffd8\023\uffd8\027\uffd8\031\uffd8\033\uffd8\034\uffd8\035" +
    "\074\036\066\037\101\040\076\041\070\042\073\043\071" +
    "\044\102\046\075\056\072\057\100\060\103\001\002\000" +
    "\042\012\050\013\043\016\056\017\052\020\054\021\041" +
    "\024\042\025\040\026\045\030\060\036\051\047\053\050" +
    "\061\052\046\053\057\062\055\001\002\000\054\004\067" +
    "\007\uffd7\010\uffd7\014\uffd7\023\uffd7\027\uffd7\031\uffd7\033" +
    "\uffd7\034\uffd7\035\074\036\066\037\101\040\076\041\070" +
    "\042\073\043\071\044\102\046\075\056\072\057\100\060" +
    "\103\001\002\000\054\004\uffd3\007\uffd3\010\uffd3\014\uffd3" +
    "\023\uffd3\027\uffd3\031\uffd3\033\uffd3\034\uffd3\035\074\036" +
    "\066\037\101\040\076\041\070\042\073\043\071\044\102" +
    "\046\075\056\072\057\100\060\uffd3\001\002\000\036\004" +
    "\067\007\172\035\074\036\066\037\101\040\076\041\070" +
    "\042\073\043\071\044\102\046\075\056\072\057\100\060" +
    "\103\001\002\000\042\012\050\013\043\016\056\017\052" +
    "\020\054\021\041\024\042\025\040\026\045\030\060\036" +
    "\051\047\053\050\061\052\046\053\057\062\055\001\002" +
    "\000\054\004\067\007\uffd6\010\uffd6\014\uffd6\023\uffd6\027" +
    "\uffd6\031\uffd6\033\uffd6\034\uffd6\035\074\036\066\037\101" +
    "\040\076\041\070\042\073\043\071\044\102\046\075\056" +
    "\072\057\100\060\103\001\002\000\006\027\uffed\050\uffed" +
    "\001\002\000\004\032\211\001\002\000\006\031\uffe7\034" +
    "\204\001\002\000\004\031\200\001\002\000\004\032\201" +
    "\001\002\000\016\005\030\015\031\022\026\051\032\054" +
    "\025\061\033\001\002\000\004\026\045\001\002\000\006" +
    "\027\uffe9\050\uffe9\001\002\000\004\050\175\001\002\000" +
    "\006\031\uffe4\034\207\001\002\000\004\031\uffe8\001\002" +
    "\000\004\050\175\001\002\000\004\031\uffe5\001\002\000" +
    "\016\005\030\015\031\022\026\051\032\054\025\061\033" +
    "\001\002\000\010\031\uffe3\032\213\034\uffe3\001\002\000" +
    "\016\012\050\024\042\047\053\052\046\053\057\062\055" +
    "\001\002\000\006\031\uffe2\034\uffe2\001\002\000\004\027" +
    "\216\001\002\000\006\002\ufff2\006\ufff2\001\002\000\004" +
    "\002\001\001\002\000\004\002\ufff4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\216\000\006\004\004\005\003\001\001\000\006\004" +
    "\217\005\003\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\006\214\007\015\012\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\006\014" +
    "\007\015\012\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\006\020\007\015\012\016\001\001\000\010" +
    "\006\017\007\015\012\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\013\176\015\175" +
    "\001\001\000\004\002\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\010\034\011\033\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\003\036" +
    "\016\043\020\046\001\001\000\002\001\001\000\010\003" +
    "\036\016\043\020\170\001\001\000\010\003\036\016\043" +
    "\020\167\001\001\000\002\001\001\000\010\003\036\016" +
    "\043\020\162\001\001\000\002\001\001\000\010\003\036" +
    "\016\043\020\152\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\003\036\016\043\020\151" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\003\036\016\043\020\141" +
    "\001\001\000\002\001\001\000\010\003\036\016\043\020" +
    "\136\001\001\000\004\011\061\001\001\000\002\001\001" +
    "\000\012\003\036\016\043\020\064\021\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\036\016\043" +
    "\020\134\001\001\000\010\003\036\016\043\020\133\001" +
    "\001\000\010\003\036\016\043\020\132\001\001\000\010" +
    "\003\036\016\043\020\124\001\001\000\010\003\036\016" +
    "\043\020\122\001\001\000\010\003\036\016\043\020\121" +
    "\001\001\000\010\003\036\016\043\020\120\001\001\000" +
    "\002\001\001\000\010\003\036\016\043\020\113\001\001" +
    "\000\012\003\036\016\043\020\110\022\107\001\001\000" +
    "\010\003\036\016\043\020\106\001\001\000\010\003\036" +
    "\016\043\020\105\001\001\000\010\003\036\016\043\020" +
    "\104\001\001\000\010\003\036\016\043\020\103\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\003\036\016\043\020\110\022\112\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\003\036" +
    "\016\043\020\064\021\116\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\003\036\016\043\020\064" +
    "\021\130\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\002\145\001\001\000\006\010\146\011\033\001" +
    "\001\000\002\001\001\000\010\003\036\016\043\020\150" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\003\036\016\043\017\155\020\156\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\003\036\016\043\017\160\020\156\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\003" +
    "\036\016\043\020\164\001\001\000\002\001\001\000\010" +
    "\003\036\016\043\020\166\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\036\016\043" +
    "\020\172\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\002\201\001\001\000\004\016\202\001" +
    "\001\000\002\001\001\000\006\014\205\015\204\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\014\207\015" +
    "\204\001\001\000\002\001\001\000\004\002\211\001\001" +
    "\000\002\001\001\000\004\003\213\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$VSOPExtendedParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$VSOPExtendedParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$VSOPExtendedParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



   public void report_error(String message, Object info) {
      System.err.println(Parser.name + ":" + Parser.lastLine + ":" + Parser.lastColumn + ": syntax error " + message);
   }
   public void syntax_error(Symbol cur_token) throws Exception {
      Parser.lastLine = cur_token.line;
      Parser.lastColumn = cur_token.col;
      throw new Exception("symbol not within expected ones");
   }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$VSOPExtendedParser$actions {
  private final VSOPExtendedParser parser;

  /** Constructor */
  CUP$VSOPExtendedParser$actions(VSOPExtendedParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$VSOPExtendedParser$do_action_part00000000(
    int                        CUP$VSOPExtendedParser$act_num,
    java_cup.runtime.lr_parser CUP$VSOPExtendedParser$parser,
    java.util.Stack            CUP$VSOPExtendedParser$stack,
    int                        CUP$VSOPExtendedParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$VSOPExtendedParser$result;

      /* select the action based on the action number */
      switch (CUP$VSOPExtendedParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		ASTNode start_val = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		RESULT = start_val;
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$VSOPExtendedParser$parser.done_parsing();
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // types ::= BOOL 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 Parser.lastLine = t.line; Parser.lastColumn = t.col; RESULT = new ASTNode(SymbolValue.BOOL, null); RESULT.addProp("line", t.line + ""); RESULT.addProp("col", t.col + ""); RESULT.addProp("type", "bool"); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("types",0, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // types ::= UNIT 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 Parser.lastLine = t.line; Parser.lastColumn = t.col; RESULT = new ASTNode(SymbolValue.UNIT, null); RESULT.addProp("line", t.line + ""); RESULT.addProp("col", t.col + ""); RESULT.addProp("type", "unit"); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("types",0, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // types ::= STRING 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 Parser.lastLine = t.line; Parser.lastColumn = t.col; RESULT = new ASTNode(SymbolValue.STRING, null); RESULT.addProp("line", t.line + ""); RESULT.addProp("col", t.col + ""); RESULT.addProp("type", "string"); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("types",0, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // types ::= INT32 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 Parser.lastLine = t.line; Parser.lastColumn = t.col; RESULT = new ASTNode(SymbolValue.INT32, null); RESULT.addProp("line", t.line + ""); RESULT.addProp("col", t.col + ""); RESULT.addProp("type", "int32"); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("types",0, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // types ::= FLOAT 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 Parser.lastLine = t.line; Parser.lastColumn = t.col; RESULT = new ASTNode(SymbolValue.FLOAT, null); RESULT.addProp("line", t.line + ""); RESULT.addProp("col", t.col + ""); RESULT.addProp("type", "float"); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("types",0, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // types ::= TYPE_IDENTIFIER 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 Parser.lastLine = t.line; Parser.lastColumn = t.col; RESULT = new ASTNode(SymbolValue.TYPE_IDENTIFIER, t.val); RESULT.addProp("line", t.line + ""); RESULT.addProp("col", t.col + ""); RESULT.addProp("type", ASTNode.typeValue(RESULT)); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("types",0, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // lit ::= INTEGER_LITERAL 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 Parser.lastLine = t.line; Parser.lastColumn = t.col; RESULT = new ASTNode(SymbolValue.INTEGER_LITERAL, t.val); RESULT.addProp("line", t.line + ""); RESULT.addProp("col", t.col + ""); RESULT.addProp("type", "int32"); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("lit",1, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // lit ::= FLOAT_LITERAL 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 Parser.lastLine = t.line; Parser.lastColumn = t.col; RESULT = new ASTNode(SymbolValue.FLOAT_LITERAL, t.val); RESULT.addProp("line", t.line + ""); RESULT.addProp("col", t.col + ""); RESULT.addProp("type", "float"); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("lit",1, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // lit ::= STRING_LITERAL 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 Parser.lastLine = t.line; Parser.lastColumn = t.col; RESULT = new ASTNode(SymbolValue.STRING_LITERAL, t.val); RESULT.addProp("line", t.line + ""); RESULT.addProp("col", t.col + ""); RESULT.addProp("type", "string"); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("lit",1, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // lit ::= TRUE 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 Parser.lastLine = t.line; Parser.lastColumn = t.col; RESULT = new ASTNode(SymbolValue.TRUE, null); RESULT.addProp("line", t.line + ""); RESULT.addProp("col", t.col + ""); RESULT.addProp("type", "bool"); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("lit",1, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // lit ::= FALSE 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 Parser.lastLine = t.line; Parser.lastColumn = t.col; RESULT = new ASTNode(SymbolValue.FALSE, null); RESULT.addProp("line", t.line + ""); RESULT.addProp("col", t.col + ""); RESULT.addProp("type", "bool"); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("lit",1, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // lit ::= NULL 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 Parser.lastLine = t.line; Parser.lastColumn = t.col; RESULT = new ASTNode(SymbolValue.NULL, null); RESULT.addProp("line", t.line + ""); RESULT.addProp("col", t.col + ""); RESULT.addProp("type", "object"); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("lit",1, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // program ::= class_all program 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode c = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 c.pushChild(t); t.shuffleClass(); RESULT = c; 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("program",2, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // program ::= class_all 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode("program", null); RESULT.addChild(t); t.shuffleClass(); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("program",2, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // class_all ::= CLASS TYPE_IDENTIFIER LBRACE class_body RBRACE 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		ASTNode c = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		 RESULT = c; ASTNode b = new ASTNode(SymbolValue.TYPE_IDENTIFIER, "Object"); b.addProp("line", t.line + ""); b.addProp("col", t.col + ""); c.addChild(b); ASTNode a = new ASTNode(SymbolValue.TYPE_IDENTIFIER, t.val); a.addProp("line", t.line + ""); a.addProp("col", t.col + ""); c.addChild(a); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("class_all",3, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // class_all ::= CLASS TYPE_IDENTIFIER EXTENDS TYPE_IDENTIFIER LBRACE class_body RBRACE 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-5)).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).right;
		Symbol e = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		ASTNode c = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		 RESULT = c; ASTNode b = new ASTNode(SymbolValue.TYPE_IDENTIFIER, e.val); b.addProp("line", e.line + ""); b.addProp("col", e.col + ""); c.addChild(b); ASTNode a = new ASTNode(SymbolValue.TYPE_IDENTIFIER, t.val); a.addProp("line", t.line + ""); a.addProp("col", t.col + ""); c.addChild(a); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("class_all",3, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-6)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // class_body ::= field class_body 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode c = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 c.pushChild(t); RESULT = c; 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("class_body",4, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // class_body ::= method class_body 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode c = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 c.pushChild(t); RESULT = c; 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("class_body",4, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // class_body ::= 
            {
              ASTNode RESULT =null;
		 RESULT = new ASTNode(SymbolValue.CLASS, null); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("class_body",4, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // field ::= OBJECT_IDENTIFIER COLON types may_assign SEMICOLON 
            {
              ASTNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		ASTNode m = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		 RESULT = new ASTNode("field", null); ASTNode a = new ASTNode(SymbolValue.OBJECT_IDENTIFIER, o.val); a.addProp("line", o.line + ""); a.addProp("col", o.col + ""); a.addProp("type", ASTNode.typeValue(t)); RESULT.addChild(a); RESULT.addChild(t); if(m != null) RESULT.addChild(m); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("field",5, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // may_assign ::= assign 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = t; 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("may_assign",6, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // may_assign ::= 
            {
              ASTNode RESULT =null;
		 RESULT = null; 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("may_assign",6, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // assign ::= ASSIGN expression 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode(SymbolValue.ASSIGN, null); RESULT.addChild(t); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("assign",7, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // method ::= OBJECT_IDENTIFIER LPAR formals RPAR COLON types block 
            {
              ASTNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-6)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-6)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)).right;
		ASTNode f = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode b = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode("method", null); RESULT.addProp("type", ASTNode.typeValue(t)); ASTNode a = new ASTNode(SymbolValue.OBJECT_IDENTIFIER, o.val); a.addProp("line", o.line + ""); a.addProp("col", o.col + ""); RESULT.addChild(a); if(f != null) RESULT.addChild(f); RESULT.addChild(t); RESULT.addChild(b); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("method",8, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-6)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // formals ::= formal COMMA formals_full 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode c = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = c; c.pushChild(t); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("formals",9, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // formals ::= formal 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode("formals", null); RESULT.pushChild(t); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("formals",9, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // formals ::= 
            {
              ASTNode RESULT =null;
		 RESULT = null; 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("formals",9, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // formals_full ::= formal COMMA formals_full 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode c = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = c; c.pushChild(t); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("formals_full",10, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // formals_full ::= formal 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode("formals", null); RESULT.pushChild(t); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("formals_full",10, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // formal ::= OBJECT_IDENTIFIER COLON types 
            {
              ASTNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode("formal", null); ASTNode a = new ASTNode(SymbolValue.OBJECT_IDENTIFIER, o.val); a.addProp("line", o.line + ""); a.addProp("col", o.col + ""); a.addProp("type", ASTNode.typeValue(t)); RESULT.addChild(a); RESULT.addChild(t); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("formal",11, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // formal ::= OBJECT_IDENTIFIER COLON types COLON lit 
            {
              ASTNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode l = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode("formal", null); ASTNode a = new ASTNode(SymbolValue.OBJECT_IDENTIFIER, o.val); a.addProp("line", o.line + ""); a.addProp("col", o.col + ""); a.addProp("type", ASTNode.typeValue(t)); RESULT.addChild(a); RESULT.addChild(t); RESULT.addChild(l); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("formal",11, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // block ::= LBRACE expression SEMICOLON block_full RBRACE 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		ASTNode b = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		 RESULT = b; b.pushChild(e); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("block",12, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // block ::= LBRACE expression RBRACE 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		 RESULT = new ASTNode("block", null); RESULT.addChild(e); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("block",12, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // block_full ::= expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode("block", null); RESULT.addChild(e); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("block_full",13, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // block_full ::= expression SEMICOLON block_full 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode b = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = b; b.pushChild(e); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("block_full",13, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // args ::= expression COMMA args_full 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode b = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = b; b.pushChild(e); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("args",15, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // args ::= expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode("args", null); RESULT.addChild(e); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("args",15, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // args ::= 
            {
              ASTNode RESULT =null;
		 RESULT = null; 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("args",15, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // args_full ::= expression COMMA args_full 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode b = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = b; b.pushChild(e); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("args_full",16, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // args_full ::= expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode("args", null); RESULT.addChild(e); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("args_full",16, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression ::= IF expression THEN expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode f = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode("if", null); RESULT.addChild(e); RESULT.addChild(f); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression ::= IF expression THEN expression ELSE expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode f = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode g = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode("if", null); RESULT.addChild(e); RESULT.addChild(f); RESULT.addChild(g); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-5)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expression ::= WHILE expression DO expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode f = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode("while", null); RESULT.addChild(e); RESULT.addChild(f); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expression ::= LET OBJECT_IDENTIFIER COLON types may_assign IN expression 
            {
              ASTNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-5)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-5)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode m = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode("let", null); ASTNode a = new ASTNode(SymbolValue.OBJECT_IDENTIFIER, o.val); a.addProp("line", o.line + ""); a.addProp("col", o.col + ""); a.addProp("type", ASTNode.typeValue(t)); RESULT.addChild(a); RESULT.addChild(t); if(m != null) RESULT.addChild(m); RESULT.addChild(e); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-6)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression ::= OBJECT_IDENTIFIER assign 
            {
              ASTNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode m = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode("assign", null); ASTNode a = new ASTNode(SymbolValue.OBJECT_IDENTIFIER, o.val); a.addProp("line", o.line + ""); a.addProp("col", o.col + ""); RESULT.addChild(a); RESULT.addChild(m); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expression ::= NOT expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode(SymbolValue.NOT, null); RESULT.addChild(e); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expression ::= expression EQUAL expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode f = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode(SymbolValue.EQUAL, null); RESULT.addChild(e); RESULT.addChild(f); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expression ::= expression LOWER expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode f = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode(SymbolValue.LOWER, null); RESULT.addChild(e); RESULT.addChild(f); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expression ::= expression LOWER_EQUAL expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode f = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode(SymbolValue.LOWER_EQUAL, null); RESULT.addChild(e); RESULT.addChild(f); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expression ::= expression AND expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode f = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode(SymbolValue.AND, null); RESULT.addChild(e); RESULT.addChild(f); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expression ::= expression GREATER expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode f = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode(SymbolValue.GREATER, null); RESULT.addChild(e); RESULT.addChild(f); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expression ::= expression GREATER_EQUAL expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode f = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode(SymbolValue.GREATER_EQUAL, null); RESULT.addChild(e); RESULT.addChild(f); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expression ::= expression OR expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode f = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode(SymbolValue.OR, null); RESULT.addChild(e); RESULT.addChild(f); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expression ::= expression PLUS expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode f = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode(SymbolValue.PLUS, null); RESULT.addChild(e); RESULT.addChild(f); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expression ::= expression MINUS expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode f = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode(SymbolValue.MINUS, null); RESULT.addChild(e); RESULT.addChild(f); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expression ::= expression TIMES expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode f = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode(SymbolValue.TIMES, null); RESULT.addChild(e); RESULT.addChild(f); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expression ::= expression DIV expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode f = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode(SymbolValue.DIV, null); RESULT.addChild(e); RESULT.addChild(f); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expression ::= expression POW expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode f = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode(SymbolValue.POW, null); RESULT.addChild(e); RESULT.addChild(f); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expression ::= MINUS expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode("uminus", null); RESULT.addChild(e); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expression ::= ISNULL expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode(SymbolValue.ISNULL, null); RESULT.addChild(e); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expression ::= OBJECT_IDENTIFIER LPAR args RPAR 
            {
              ASTNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		ASTNode m = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		 RESULT = new ASTNode("call", null); ASTNode b = new ASTNode(SymbolValue.OBJECT_IDENTIFIER, "self"); b.addProp("line", o.line + ""); b.addProp("col", o.col + ""); RESULT.addChild(b); ASTNode a = new ASTNode(SymbolValue.OBJECT_IDENTIFIER, o.val); a.addProp("line", o.line + ""); a.addProp("col", o.col + ""); RESULT.addChild(a); if(m != null) RESULT.addChild(m); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expression ::= expression DOT OBJECT_IDENTIFIER LPAR args RPAR 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-5)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-5)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		ASTNode m = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		 RESULT = new ASTNode("call", null); RESULT.addChild(e); ASTNode a = new ASTNode(SymbolValue.OBJECT_IDENTIFIER, o.val); a.addProp("line", o.line + ""); a.addProp("col", o.col + ""); RESULT.addChild(a); if(m != null) RESULT.addChild(m); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-5)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expression ::= expression LOWER TYPE_IDENTIFIER DOT OBJECT_IDENTIFIER LPAR args RPAR 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-7)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-5)).right;
		Symbol c = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-5)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		ASTNode m = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		 RESULT = new ASTNode("call", null); RESULT.addChild(e); ASTNode a = new ASTNode(SymbolValue.OBJECT_IDENTIFIER, o.val); a.addProp("line", o.line + ""); a.addProp("col", o.col + ""); RESULT.addChild(a); if(m != null) RESULT.addChild(m); RESULT.addProp("cast", c.val); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-7)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expression ::= NEW TYPE_IDENTIFIER 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode(SymbolValue.NEW, null); ASTNode a = new ASTNode(SymbolValue.TYPE_IDENTIFIER, t.val); a.addProp("line", t.line + ""); a.addProp("col", t.col + ""); RESULT.addChild(a); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expression ::= OBJECT_IDENTIFIER 
            {
              ASTNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = new ASTNode(SymbolValue.OBJECT_IDENTIFIER, o.val); RESULT.addProp("line", o.line + ""); RESULT.addProp("col", o.col + ""); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expression ::= lit 
            {
              ASTNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode l = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = l; 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expression ::= LPAR RPAR 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		 Parser.lastLine = t.line; Parser.lastColumn = t.col; RESULT = new ASTNode(SymbolValue.UNIT_VALUE, null); RESULT.addProp("line", t.line + ""); RESULT.addProp("col", t.col + ""); RESULT.addProp("type", "unit"); 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expression ::= LPAR expression RPAR 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-1)).value;
		 RESULT = e; 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.elementAt(CUP$VSOPExtendedParser$top-2)), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expression ::= block 
            {
              ASTNode RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()).right;
		ASTNode b = (ASTNode)((java_cup.runtime.Symbol) CUP$VSOPExtendedParser$stack.peek()).value;
		 RESULT = b; 
              CUP$VSOPExtendedParser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VSOPExtendedParser$stack.peek()), RESULT);
            }
          return CUP$VSOPExtendedParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$VSOPExtendedParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$VSOPExtendedParser$do_action(
    int                        CUP$VSOPExtendedParser$act_num,
    java_cup.runtime.lr_parser CUP$VSOPExtendedParser$parser,
    java.util.Stack            CUP$VSOPExtendedParser$stack,
    int                        CUP$VSOPExtendedParser$top)
    throws java.lang.Exception
    {
              return CUP$VSOPExtendedParser$do_action_part00000000(
                               CUP$VSOPExtendedParser$act_num,
                               CUP$VSOPExtendedParser$parser,
                               CUP$VSOPExtendedParser$stack,
                               CUP$VSOPExtendedParser$top);
    }
}

}
